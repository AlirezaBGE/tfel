/*!
 * \file   mfront/tests/behaviours/castem/UMATExternalBehaviourDescription.cxx
 * \brief    
 * \author Helfer Thomas
 * \date   15 June 2015
 * \copyright Copyright (C) 2006-2014 CEA/DEN, EDF R&D. All rights 
 * reserved. 
 * This project is publicly released under either the GNU GPL Licence 
 * or the CECILL-A licence. A copy of thoses licences are delivered 
 * with the sources of TFEL. CEA or EDF may also distribute this 
 * project under specific licensing conditions. 
 */

#ifdef NDEBUG
#undef NDEBUG
#endif /* NDEBUG */

// a small trick so that the compiler refers to the original file for
// error reports
#line 21 "@abs_top_srcdir@/mfront/tests/behaviours/castem/UMATExternalBehaviourDescription.cxx.in"

#include<cstdlib>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<stdexcept>

#include"TFEL/Tests/TestCase.hxx"
#include"TFEL/Tests/TestProxy.hxx"
#include"TFEL/Tests/TestManager.hxx"
#include"TFEL/Glossary/Glossary.hxx"
#include"TFEL/Glossary/GlossaryEntry.hxx"
#include"TFEL/System/ExternalBehaviourDescription.hxx"

struct UMATBehaviourDescriptionTest
  : public tfel::tests::TestCase
{
  UMATBehaviourDescriptionTest()
    : tfel::tests::TestCase("TFEL/System","UMATBehaviourDescriptionTest")
  {} // end of UMATBehaviourDescriptionTest

  tfel::tests::TestResult
  execute()
  {
    this->test1();
    this->test2();
    this->test3();
    this->test4();
    return this->result;
  }
 private:
  typedef tfel::system::ExternalBehaviourDescription ExternalBehaviourDescription;
  /*!
   * \brief test of the standard norton behaviour in PlaneStrain
   */
  void test1(){
    using namespace std;
    using namespace tfel::glossary;
    const ExternalBehaviourDescription b("@MFrontCastemBehavioursBuildPath@",
					 "umatnorton","PlaneStrain");
    // should small strain behaviour
    TFEL_TESTS_ASSERT(b.btype==1u);
    // behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.stype==0u);
    // elastic behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.etype==0u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size()==2u);
    TFEL_TESTS_ASSERT(b.mpnames[0]=="A");
    TFEL_TESTS_ASSERT(b.mpnames[1]=="E");
    // state variables
    TFEL_TESTS_ASSERT(b.ivnames.size()==2u);
    TFEL_TESTS_ASSERT(b.ivnames[0]==Glossary::ElasticStrain);
    TFEL_TESTS_ASSERT(b.ivnames[1]==Glossary::EquivalentViscoplasticStrain);
  }
  /*!
   * \brief test of failure to build an ExternalBehaviourDescription
   * for unknown behaviour or unsupported modelling hypothesis
   */
  void test2(){
    using namespace std;
    {
      bool ok = false;
      try{
	ExternalBehaviourDescription b("@MFrontCastemBehavioursBuildPath@",
				       "unknown","PlaneStrain");
      } catch(runtime_error&){
	ok = true;
      }
      this->registerResult("check throw on undefined behaviour",ok);
    }
    {
      bool ok = false;
      try{
	ExternalBehaviourDescription b("@MFrontCastemBehavioursBuildPath@",
				       "umatnorton","PlaneStress");
      } catch(runtime_error&){
	ok = true;
      }
      this->registerResult("check throw on unsupported hypothesis",ok);
    }
  }
  /*!
   * \brief test of the log1D strategy
   */
  void test3(){
    using namespace std;
    using namespace tfel::glossary;
    ExternalBehaviourDescription b("@MFrontCastemBehavioursBuildPath@",
				   "umatnorton_log1d","AxisymmetricalGeneralisedPlaneStrain");
    // should small strain behaviour
    TFEL_TESTS_ASSERT(b.btype==1u);
    // behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.stype==0u);
    // elastic behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.etype==0u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size()==2u);
    TFEL_TESTS_ASSERT(b.mpnames[0]=="A");
    TFEL_TESTS_ASSERT(b.mpnames[1]=="E");
    // state variables
    TFEL_TESTS_ASSERT(b.ivnames.size()==2u);
    TFEL_TESTS_ASSERT(b.ivtypes.size()==2u);
    TFEL_TESTS_ASSERT(b.ivnames[0]==Glossary::ElasticStrain);
    TFEL_TESTS_ASSERT(b.ivtypes[0]==1u);
    TFEL_TESTS_ASSERT(b.ivnames[1]==Glossary::EquivalentViscoplasticStrain);
    TFEL_TESTS_ASSERT(b.ivtypes[1]==0u);
    // external state variables
    TFEL_TESTS_ASSERT(b.evnames.empty());
    // additional attributes
    TFEL_TESTS_ASSERT(!b.requiresStiffnessTensor);
    TFEL_TESTS_ASSERT(!b.requiresThermalExpansionCoefficientTensor);
  }
  /*!
   * orthotropic finite strain behaviour with arrays of internal state variables
   */
  void test4(){
    using namespace std;
    using namespace tfel::glossary;
    ExternalBehaviourDescription b("@MFrontCastemBehavioursBuildPath@",
				   "umatfinitestrainsinglecrystal","Tridimensional");
    // should finite strain behaviour
    TFEL_TESTS_ASSERT(b.btype==2u);
    // behaviour shall be orthotropic
    TFEL_TESTS_ASSERT(b.stype==1u);
    // elastic behaviour shall be orthotropic
    TFEL_TESTS_ASSERT(b.etype==1u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size()==7u);
    TFEL_TESTS_ASSERT(b.mpnames[0]=="m");
    TFEL_TESTS_ASSERT(b.mpnames[1]=="K");
    TFEL_TESTS_ASSERT(b.mpnames[2]=="C");
    TFEL_TESTS_ASSERT(b.mpnames[3]=="R0");
    TFEL_TESTS_ASSERT(b.mpnames[4]=="Q");
    TFEL_TESTS_ASSERT(b.mpnames[5]=="b");
    TFEL_TESTS_ASSERT(b.mpnames[6]=="d1");
    //    state variables
    TFEL_TESTS_ASSERT(b.ivnames.size()==37u);
    TFEL_TESTS_ASSERT(b.ivtypes.size()==37u);
    for(unsigned int i=0;i!=12;++i){
      ostringstream nb;
      nb << i;
      const std::string s = nb.str();
      TFEL_TESTS_ASSERT(b.ivnames[i]=="g["+s+"]");
      TFEL_TESTS_ASSERT(b.ivtypes[i]==0u);
      TFEL_TESTS_ASSERT(b.ivnames[13+i]=="p["+s+"]");
      TFEL_TESTS_ASSERT(b.ivtypes[13+i]==0u);
      TFEL_TESTS_ASSERT(b.ivnames[25+i]=="a["+s+"]");
      TFEL_TESTS_ASSERT(b.ivtypes[25+i]==0u);
    }
    TFEL_TESTS_ASSERT(b.ivnames[12]=="Fe");
    TFEL_TESTS_ASSERT(b.ivtypes[12]==3u);
    // external state variables
    TFEL_TESTS_ASSERT(b.evnames.empty());
    // additional attributes
    TFEL_TESTS_ASSERT(b.requiresStiffnessTensor);
    TFEL_TESTS_ASSERT(!b.requiresThermalExpansionCoefficientTensor);
  }
};
  
TFEL_TESTS_GENERATE_PROXY(UMATBehaviourDescriptionTest,
			  "UMATBehaviourDescriptionTest");

int main(void){
  using namespace std;
  using namespace tfel::tests;
  TestManager& manager = TestManager::getTestManager();
  manager.addTestOutput(cout);
  manager.addXMLTestOutput("UMATBehaviourDescription.xml");
  TestResult r = manager.execute();
  if(!r.success()){
    return EXIT_FAILURE;
  }
  return EXIT_SUCCESS;
}
