%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: Suivi_these_HAN_Xu_ENSMP_2.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: th202608
%%CreationDate: 13/01/2014, 20:46:20
%%BoundingBox: 153 347 442 495
%%HiResBoundingBox: 153.2399 347.9721 441.7602 494.0280
%%CropBox: 153.2399 347.9721 441.7602 494.0280
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (iR-ADV C5235/5240) (3017.104)1
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A4
<</PageSize [595 842 ] >> setpagedevice
%% FoomaticRIPOptionSetting: PageSize=A4
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1191 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GPL Ghostscript 8.64"
   pdf:Keywords=""
   xmp:ModifyDate="2010-07-25T15:36:35+02:00"
   xmp:CreateDate="2010-07-25T15:36:35+02:00"
   xmp:CreatorTool="PDFCreator Version 0.9.8"
   xmpMM:DocumentID="4a08aa0a-9a4d-11df-0000-a70fe8d39417"
   xmpMM:InstanceID="4a08aa0a-9a4d-11df-0000-a70fe8d39417"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Implantation loi crystalline_2507</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Owner</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
     <rdf:li xml:lang="x-repair"/>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 3 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (3)]
[/TrimBox [153.23985290527 347.97204589844 441.76013183594 494.02795410156]]
[/BleedBox [153.23985290527 347.97204589844 441.76013183594 494.02795410156]]
[/ArtBox [0 189.346 590.212 842 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFErz!!!*$'MtY,XL"\Y\?Mgis7@aZ:&k=q!<<K-.sKSJmG:g>KJXqS1+4ON0I[S6&-)e4!rsYJ6+Hq
Cs7@d$3<03_!XVR$;"O^,ppUM0(B=U=z"Yb6&LWQjA!!!0&**flOdE7BeVG8B:0-U]&#lk#,!<<Z20ne
]rrpV\&=9S[)!s(=\8(di5s6M-R0)u.U0-heCM/-i=PBqBt!YAH6=n;EFlC.qX&HDq6%graF>"(m\ZC-
\^]UOdiQ=F&)S:#E),T@[&L2:T:U2a`\<?2qW1]ROV"pG/18NAd2YaLJ\J4`316jjD'H='t`?RI#t<CT
FXEF2uUN-KOh)&!Y`IVW[/RYQSYUm@0ODc^!BZC-eg7l`R03\E#b_l/iaF?VV`Y,%_\_Oca,A5Z>,G[O
h_XaY4;4>&2cUPaUd_PrrrN)raW]Vh6kX+,(:C,.CAWfr37`NPf?T57sLZ\`rgF^JAX\u2$i[>]Q$Q[*
a"^T*]p9b\6@Bi7h049YohJnSa*]rRQr^7'pj;]-GQVfunu_QoiX\"]4GKht5?\rhS=^n$9n`i,/f^n6
R)Z)FG#[BQITW-W5&_Oum2Xf%_Z6OX;%So%jI`iGDs_m#]E]9J%O[#0/l`1N'4Y_$pK`Mo<$P$V,m`2T
/t`iY`7_P3':@k/r-[Z5c&`NPiFYCCXF_kE6C[Z#Z%C0"=9`2Ai]_P<0?]9IqHP[RW!Z%[<V_m,fM\<)
//Spki2]U=Uba0(r=R<j!$_QKWR^n6Hu`N#5nX*e_.`MSWEa01l1QXa/*9KG-5Q$RU!AhPS5`i>K)\=/
+U_m,fJ^6jac\s%bD_l]TGW/lX'\;u24`N5Au["s#h_kE*8_P33F]U"@Z[>B2lFC&5W_lK6']pOOY_4H
a4^p0HFLi[GM+W;7!_lB<3YE4E1ZE'h7d`@Kjd%=f(HU/8E&HDn5#s*kBOMIpEf?8ocN$nZ+zs6qb$FX
\a>2)/D;>.jlEo]/Q7@gi>;hU?DPP<^Do0dmq?)$0g=!rsqR7*bfm!<<l830X7P!WX2?4Jr,ss7@^=63
%,g!sC[c9@s2?s6_Eb1]R[Z!sLpi9]Q.Ws5+k,-NF>NQbf9?e9rYG3@$]e:3F,\[DnKTY"\os"TSQ'"!
D7WD;`dCkLs4DE"r?QZ*L1`]<e0epW-c5K16FQa2F1d\6U<[s77mhDC$b4!ZPVLBBIg>R>-AT^TFEr^T
FEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr^TFEr~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
153.24 347.972 mo
153.24 494.028 li
441.76 494.028 li
441.76 347.972 li
cp
clp
[1 0 0 1 -4.78785 189.346 ]ct
false sop
.952117 .938109 .00546273 .0071107 cmyk
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-ItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 39 /quotesingle put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 232 /egrave put
dup 233 /eacute put
def
/FontBBox {-498 -307 1120 1023} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
22 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704
AA3988900AFCFF05DD> |-
/space <1C60D8A8C9B8707C25> |-
/quotesingle <1C60D8A8C9B8947499AFE677370939E2B3857517CA9699C011
93FB834143B43A9807C37C3E61CF28DF85EF323465A6C4F7D4438E4ABDA26E7A
169DAA60CD6954AA2D215FC88C7FE4> |-
/R <1C60D8A8C9B7D8BE195E0BA0550813F7A1C95B40C34EE7C166B605C5E416
25E3101EB014E3DAAD84193254186B7E6AC947AD73CAF38FA20978F097259DCD
CC9F76D9A66219BDA26D542F42B78A3F758D42FC467077B530F3A0EF00297F14
334889530497D12DADBDB29871F4A6DBEAE31C64002932303A6AA84980E69924
65D78E1DD59A5E1A416D5223B1E149C512F5DF21783501F0D632EF4D387E22AB
0A5E0E6D756687B64C88D1A426DB31228C832F3BAF1C73480D3D50F939803EFA
12249AF9744ADF22AAB17D73672B3B1A39> |-
/a <1C60D8A8C9B7A73DB68C06FC199F1F2F20B1C2E3715651C87BCD4ADD6877
5B4647B129144EBE49EAC15F019B26773F428CC0D1BB4A6183FD1BAD53C3DC7D
C1778E21FEA13949F179F397E1068E68EF5BDF24BE0DC7557B673C23D4A50497
DF80D9C838AB9EEA3C59483A8E7BD334D2361BCA7F19AE87B1D972F7B79ABAD0
7378C084886016D514CC545EA1F4A9EE8851A3C3F902C0F0DCD2FEE069D9BC21
3BFD5E5AFCA4D73D61283DE2191744FD94BBAE1E2CE71F1DD86C9281938B9644
2B456E7FA2EA8852C51CB5A9C2A0AFF4A5706E78B9A6A93AA2E14914A3A3355D
7AE853081C2D03136A31> |-
/c <1C60D8A8C9B77FE2C1AAE0EC93E571B636F5347D3714722A84750C1B29A3
9B8539044786FB4D21214EC790263603D768977575E3DFEDEB06ED210B719A19
51D9CD3A1CEDC2DBBBA9F50EB52B23C7BC0E7C5116FC1274BBC998D424E35185
95216116D6B76CDF4E0BCDAF27025304BCCA1980CECDB742C27E839F34D438C5
CC751D1A202A9B0CBB89CFB07DF67AB5E8EE4143A6BB864E7AFD01C988BDA57B
AAFB46475895EDA7DC9A3D645E52BE6B50DA1C1724C629C5533C12A95B43E497
C080A6D8450597> |-
/d <1C60D8A8C9B7A73DB691FFA60643BA6E96E7C7C2DDEF80CD1CC4E8DF6116
160F4B6BEC2C5A3FD0EFF676934C9853DC2AFCDE40FCD6A7962C3CCB0F256744
23D13531F42E3841F98600FD9B5DAA96A9419079DE3DDCAA270D347DBB8C114A
6FB1D82FDCA79BCBEE0518D5F888E4054C9768F6434472E73165A3126D5BD56D
8E1B8CDE44ACA6EF9615CFA40888BA656F1BE25E2866BF1A2FCA5AAAEE4F1293
B59360F147EFB7B6289498A57B7354A472AFD0CD81D495F51B9A26687A9D12C5
CDEBB20FAC42D12F908FE6C73F05DD391AF99090AF4E6EC3C789DC0A2BD1E10D
AD701AF1166FE91AEB4B604D5FDFFD4C81AD27FA4031BCD4AA2A60CE2C008F46
6E3EE8EE5415C047> |-
/e <1C60D8A8C9B77FE2CEBC851BC1D55BEFCC6636F8B07C124AAAAD6AC237A2
E0178B712156D556EE6FB45645CC6CBEAF8E97CBE4F832E2F621B213660DC4F9
A0F0631BE4B937D282930FF5CB48932FE4C3118EA58028F6EA53582C8DE2452B
3135816834C0E4D947BA5BD58F1D5AB9E28423127BFB8D26FB6EEF3AB8E9B9D2
410DD3AF694FFEBD7B7FE682E5B937ACC2C6A43489D3F9EF3944E87BAD6842E7
160B3BC59BD87C15EE67EE949D19E2030F058D91390B17854C6C> |-
/h <1C60D8A8C9B7A73DB934211EE75262541A4D85B1CC4DD6D9C4EEFBE392B2
C3DF5E8B3AD1861AF250672E43E47D65A2910BA6093D7F37665DB6F20ED3CAC7
E203AFFF54D81CA639706D1AD945448E2C4061AEE88677BFB689EDB256B054E6
3EA418718F0BDB6A92C04DBD4739E7122649EE83BC0CE5F7638133DC907C5EB2
BC5A2F7FA147FE5A1B3391F309C5602D0D237A0F40E52035CB5685844AC784AF
DD26FD7B41C3515F6B73D4C6EED94F09D9360851CEFA497A29FF3613FEF17A0C
D2921A429E8F85B8F39F59022F066567DAABA859FF01519AE0F5F9457096CFA7
92FC8B9E3D2AB2C897> |-
/i <1C60D8A8C9B854D0F4620EF8AB3A43726CA9F1D5CA3F0AC21C46156AA7EA
FD30B421C67072AD9E9673A39A0C73C611BF2D30694524FB9362DF4B7BF42BD4
03E13FE93BE1CC4B973BBB2F8A1766424F865950A3B4E0C2909B014DAC40D6C3
1A5A624961F141A00D5EA650DA557D976995CE1AB37642609DB19511A8C6A021
6D711E915D0A16129E261DB540D787FC5DFEB3FE9BF504AACF3812EF9A098716
4BC0CA8AED8AA0620C2C50ECD33D7A5F1286537664219BFD394BB743A505> |-
/l <1C60D8A8C9B854D0F428CB56497DB3751CBCE205181DF8576DE7D01F56E6
658D50F3A55031CCFD90149657F347A7B8FBDA51BC713C50D2F7103D339A28E1
EA0AB3CDF3E8F9F3065FE59E41F46C69A0F86CC9ACCBC34698A8315C973C6386
81FD1CB4E96CC4A31C9059B1294515AA76EDF0278C3082EAC668C9E35B588539
A6BE> |-
/m <1C60D8A8C9B6079F294C4EE7B58DD8549C7A301BB90EFCD355016DAFC9A3
88412536D7A2E886C8D640A4C7783E0796960D40AE1B1791784274642CCFB691
F36307EDF8E8446214A1889CF4277988EC4C2195F54D6C384A6175E65E708C40
48FE9229254DCCE698804A484B506134BF418D0C8628102130364D19652360BB
35F09AD44B769546EF6AF789EFF3D5DFFFCA19ABB2178EE13E00C37C31B65C0B
479141272F98B246D2AC399E147E05EC4B23A6D96C9AC0C70DDF5869A095C41F
0D75E8A3216EEE5BE2138C33580B53CB3747DAB1DDD8B2076C83FFCDA28D75E9
36383254D10FA13A9B70D344720970D85450575B72C0569D3235625D419878B6
86876548F8DF1FAD4F3B0F8B637CEE500E8AAA6FCB94F818A9FE160DE886DB2D
F71EE98486C4B97E7016F4D897B80AE8402E0025B41950E80C2D7466150DFB22
4CD3540E4B45D021A319CC07F7> |-
/n <1C60D8A8C9B7A73DF087C158A303AE922A1CFBE99458C02E528DF85BC641
2E6FDD19DEE624C52F34F700473C3AF58CFD622B892B54F8D6362CC51D3848E5
F8B6B32B7B11E5E94464027CCA3CF1614C8F48813802B308AF8EC8766137EB89
CD5DD757628F33FCEA75D425A44D9BACEE2228E64D06D107FD7CF2CD26322E84
A7ED288FE0F79BC1C309E227374927714BC56EB962BF48D51F35D6762D6E3752
739DD5CCAA41E9D5E43DD7EF5CD51215167BF87390988E3AF0B364F3ACEB0FB5
C2394968F3DBA5DCC32E43963EC56DCDE85C8CB04CD0FA96CC48CFDB5153D23F
36F9AB24> |-
/o <1C60D8A8C9B7A73DB6821681307BB58AF24E53259C166A4EBACA0E69F5B8
B042F6E6706D71FE2C4006799F0D83733098F02E11647B564DF12A496B06EAD6
56E6D297AE5BF88AE7615ABAF60F522DC6D667D6E703D83FA4EACD5E655591C5
F794B5601A90C6028B31DB06F3BFF28E5BAA1BCA504CD90A443D934E8ED98B1E
48DB90AD3B6CC51A1E1FA2EC8D3518D7436B0D1C> |-
/p <1C60D8A8C9B7A73D8E81CAA60D14E3E98C0D2E05AFF3FB862AEA3DF0C900
A6244DFC203BD831D689E22DB403066666BFF3F475FEB3829C9D7ECDAB0DC925
8303ED1E42322E45D2E74BDF643BC8197209EBDB2F245FB9585F9D7C5F4C0605
E973113BC15F69B61D839FC08F998D44808113D68025D33AED404EFD98528A1C
4BF8833248921CD84E8766EA07C2F75403CFFB9CC1A48AD11EBE79666821D3F8
B741F5FE91D0F75F9F9632B838010D323EEA8F5B163329DD917466275C63DA4F
B54445D129B662802A208E18CFAD13CCA131C101542E45275DFEF10296A99CE9
BEFE39650F703ED74130D9F7EBDFC13232> |-
/r <1C60D8A8C9B7361F365886EBFECCD8473E83DA137EE4FF5446DC34EB9670
2032A1EC6B4D0B80987318881760797A2A703BDB19E24F1B10629EC5D3297F26
5B468217AF43A693E97671CE6B3D388E20C056A563C2FC1423CD8BC8B3EC8EC0
9DC18882E406798A4EAEA9C53CBBD9B8E9BC3831F4F1A6A626135124B3F0C4D3
2FC8873A1B53DB02AD4C1E42492228869E79B5F7AA6DA878613B470F5F6920F4
2F08D0203966> |-
/s <1C60D8A8C9B7361F025C7C4D0303D6CE893F51D869BCCC57F238FED481B9
6AB0D6B406042D64909B5B15A441860ACAD524570DEF75E4EA76578FD91FD71A
8077FF6E23AAE6F0974095E4C999A83B7E16B60FBB6A5AE152855056216BA421
C7B30818AA939C216FDAB05C60988B0DD7002BC261826362CD346E3A6F514F9F
1431C9C48DFC0F46570808CB49BD9B3149C4A3AA291BC1EEAA3D03623F2375C9
388ABFFC392B3B4B21840AE82436B62C4B88BD91D9BCB6B1AFA172883784EBAA
7B75DEB4573067FB9BF34769691A6A89267BC4E51631D49211C8FFEA> |-
/t <1C60D8A8C9B854D0F4BEDEF58C8CF76928EC03CF9E6A69066343B65CF2F2
9CD6E545B8A00752040D324808F3F5D7377FE94463A69378800F35B93737A90E
D33397EF28DE6855D7404A61AF81C1EEF0FFED3B556E8E9BEB0451CA1D28658C
106F5916BA3D50810F2ED0B604B6D36F194AAE36158BC40E0B3FFAD76350433E> |-
/u <1C60D8A8C9B7A73DB696F616AD1E8C523DE2B82F13E539F2F5A98334D0F5
5E69681EECBE9B8A673782E2D5DA7ECE87085B6BE9DE5E8D858C099EDE463809
F96C447D392A6DE059AD0A50E94A5D37F229938D5217B023A1C4AB76F7D08399
F6EA9BD89918F0602727CA42A79AC859215A77C7D9DF8D698659D76EF0C2B892
768EB6D20F49FB0D3A7A74070F106ECC4385D33E3281653F6DD4BA0D15309CE5
E98E933A8923243F40E57D9947D0DB0AA6217E92729A241F84BF6D54FC04BFC6
B33B444BCAA2BA868D9CBE34634DE9D5C3DFEF8E5631F5B8FC1886A7F6B5261F
0D050D874B59F5058096E349E66930972826DEC50C532EF83B8BE833273202B6
4328C70E25FCC1CD14274C4833> |-
/v <1C60D8A8C9B77FE29D633FA43DA023BF4CB025823D2F6A721BED2F3CDB85
BFE76FB696C8C73BE2C85700A7B0AB542C98F999408404AECC756059B3CC9066
884F54240E39D39C24046A65F831CA2DF07EF1069A5130E633A8184D10E7108E
E4EFCE6D3EDFDF83A145DE678D9E8A1E1FD0EAEFE9FDD3B6152ACEE9B23BD29F
6B30B6DC08DEBD6BDA6E5BD40E108AE06010930821877AB92D2042E19E613504
7C480A5E> |-
/egrave <1C60D8A8C9B77FE2CEBC851BC1D55BEFCC6636F8B07C124AAAAD6AC
237A2E0178B712156D556EE6FB45645CC6CBEAF8E97CBE4F832E2F621B213660
DC4F9A0F0631BE4B937D282930FF5CB48932FE4C3118EA58028F6EA53582C8DE
2452B3135816834C0E4D947BA5BD58F1D5AB9E28423127BFB8D26FB6EEF3AB8E
9B9D2410DD3AF694FFEBD7B7FE682E5B937ACC2C6A43489D3F9EF3944E87BAD6
842E7160B3BC59BD87C15EE67EE949D19E2030F058D91390B17854CE2E0BE10D
171F2172DFC8D017BF98C1878> |-
/eacute <1C60D8A8C9B77FE2CEBC851BC1D55BEFCC6636F8B07C124AAAAD6AC
237A2E0178B712156D556EE6FB45645CC6CBEAF8E97CBE4F832E2F621B213660
DC4F9A0F0631BE4B937D282930FF5CB48932FE4C3118EA58028F6EA53582C8DE
2452B3135816834C0E4D947BA5BD58F1D5AB9E28423127BFB8D26FB6EEF3AB8E
9B9D2410DD3AF694FFEBD7B7FE682E5B937ACC2C6A43489D3F9EF3944E87BAD6
842E7160B3BC59BD87C15EE67EE949D19E2030F058D91390B17854C951D33C33
ACBFBB7661FA4ADEB946DF4B58C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT /TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 42{/.notdef}rp /R 14{/.notdef}rp /a 
/.notdef /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 113{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [10.5539 0 0 -10.56 0 0 ]msf
192.24 48.4803 mo
(Rapport pour la r\351union d'avancement de la th\350se )
[6.47992 5.28 5.28 5.16 5.27998 4.07993 2.87999 2.63998 5.28 5.28 5.28 4.07993 
2.63998 2.88002 5.27997 2.63998 4.07993 4.55984 5.28 5.27997 2.88 5.28 5.27997 2.63998 
5.15997 2.27988 5.16 4.67984 5.27997 5.28003 4.67981 4.55984 7.67984 4.67984 5.28 2.88 
2.63998 5.28 4.55978 2.64001 2.88 5.27997 2.64001 2.88 5.27997 4.67987 4.0799 4.67984 
0 ]xsh
/1 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0F4DB70B6414046A9F51BAC56D79E7CCC16170F> |-
/zero <1C60D8A8C9B7A73DB95E4C3B2CBDAA180DE16ED2E0B54D373FA0624F4
D4D6AEC3868DC3B6FCE2354D83BCFB00DD4446A756F968EEE24EB76F936C153C
554CF6C4FC531FF7FF83B6E48CEE21091E0E09B4C454DFC4E65880C366E13FC5
BC8A513523C320C7B30F5347C743B956722220B3BEF7EACE8E5F9F591092F7BD
516A6AD1802BEF3B681970F31BDF1B1A76203F2B6ADF0680B5FEC4F306B1764A
BEA599CAC4C746792036F08DB0B307F28AC5ED1> |-
/one <1C60D8A8C9B7A73DB6A4A1045477B897A236531EE6744E986B049CB2B4
C1FE00325C8BF061D241BD30B895F448A012FA11CB58DD958F1372DACE120865
7E476E9190270F7FC72B0B9DCE2DDE5E748B644DD70718A6734618F8229BDD2E
5AE0C198797BC9647A1D37D27AAA1BAE3BFBF0B70DB4F621F7> |-
/two <1C60D8A8C9B7A73DB69C12026B750802855EAC5092BB0A5898B5D5C055
BF85280FEB4B1F3E4AFB01B0A8A29DB15451C23681417470B94B4D8D92484A39
334C366B9828F8F838BF53371C17891341B316F197C3AA30247051762DF7F17C
B7ACE84978B012AD0CA07C229C814073CD1F19CA205691988B437B6925EC8729
C2823046BA> |-
/three <1C60D8A8C9B7A73DB9AD9E1198F486357EF0B21BA3B223A4454F8713
4A33E7B05FBEBD54E2E15EE07CA0E86475CEDA75FE6EC7CC26A7C1193ABEBB34
8EE8C242C93B4A3DFB138E90E470C0795857EBAC82F9500B9007C3C3C1D35242
A2D7BB7BCB129B370D84AE06270498BAA570E6A849DF2A3057781782DB63178F
B7BF717AB4A95100FB82CC3D5D208D5079E8F6ADB85140C7EE0091E36F5A2AE3
715EE555C7F426C8085BCD4F5A9912A4CA4D78AA92806C8E53C32C02A5E8E15F
BE1796AC7FAB231D974845F7A3FB01849ADAEB1660889453E08F67B2D84BCE43
9196EB> |-
/five <1C60D8A8C9B7A73DB908A529EA1B163495C9FBB8496693F386DC631C9
3FD9220058D664A9080E06A7F63C9E18E916A4265AF18C2006B16A2D3AEA0C2F
C36F3FF4AE67A5B81A0E6EA757A0FDFB61DB3F4BB7C3EAE9D58824A3C8FAB386
93EEC731E580A5F87A6798AD5FA39DC059E95FC414150CB8B8BC8DEE1D36AAD9
B55CA49AACD14C53714D321E9D9FC1594BFD69902F71B64402D33285D> |-
/seven <1C60D8A8C9B7A73DB92C9C134B6FD8C7AA5C05B22EBB62EA3FDEF87E
62275BC3B23B39F8646B48B31119C5F277226A43E011DF63> |-
/A <1C60D8A8C9B7D8BE190A9802974A4C1AA5E1AB8A0FFB01E4A47ABF2336F0
B7F1CBE59C6A88B7A18B3BB28E33891DB38D52F9AB7A997D51E39EC1D9F8CF16
C31B71C98BBB555D1D69FBFE589D43D4B943BF5F1156C652C4E5E5570908950D
0233BB795D8D4CD7EA058C3748BF16A701A854775E917E1502BF5EABD0A646F4
71EFB1163ED661F0DE028C78049723108696DDA3770D6F5BB10FBDFD1D17FEC3> |-
/H <1C60D8A8C9B6079F621206CBD7A4702230C9D588C962A53608AEF3467A86
5FC31780250C802FFEB67D8ABC56489419F4426F212A9A6E1C90131EA202D248
A503776844440DFB82BB117BAC74429B112B6B402CEA2A8966C88AD47E231216
EFD3DC57AC931220A8A4FBBF4D438C24220F62D8F8CE97DA7460B4F69FC21DC7
4A116DA816C490066ED68CA4AAFA42020E95CE1DB0F3AACBC0475DDB4D76FDA9
BDCB60CE8A0D1C9DFA841E3522DB2C2CE5C2B899EAC26962F78BB1C50E5166CB
C8F104D35D45C66AA2BB87087C3A7F97763FAAF697D7D49F26426B3974D388AB
44C2A6210C7F34650C845B569A7E5DC642B2676DD7DE75BBCBF21C8503FD868E
446D60DC1618F0> |-
/N <1C60D8A8C9B64EDFF4DA474F415D5DD537FAA93C37EEC62FDC4A039CA573
DD652A21E9CE136A62765D8121CCC1F8B6C69DF6675E56D02777F89248A7E9F8
174321009C99A7EB5A01D10C6E86BF0A4F9A0D56B508A1E855C0FF0A6C58B1C7
7BA71F42A09686FC0B9D9347A0229AAC02E9F435CD8098A9D1CEA8AEE9A656F4
D80C818AD8E6F22D6A0A48B5693B6D4404BEB011866D75A098B62476C7952178
AF8113D66FC324EF6F1393F40514FE> |-
/X <1C60D8A8C9B7D8BE191C1C0F62FA691904A44B116336C9FB6E58589A0829
BC275B144479988B8464F056F41919A825CDF4E1781F09DD498C68EC539819D8
A640E525DE57B03123DF2DFCEEBC0EDF15AD44258565A6DA9402196FE1D8A52E
B592B8BB9263BCF720D51FE9C65284F0350DBD024884B7CE65563AD80D966090
0E1DE2ED2F72236525F24DBA0F9820678CA4F00C9235473601AC5592356CED20
2910196004FDBABA340CDA328534C270345CFEA704C3A2256D5907B9F12305DF
37063F680F92DEAAE49193D310C0659C20AC533F24587F7A831373D91597008C
6EE08321F21F39C8F368E543A45B929B8DE6E8A15D0A4FFC131C4552A3E568DC
B656C3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 65 /A put
dup 72 /H put
dup 78 /N put
dup 88 /X put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 7{/.notdef}rp /slash /zero /one 
/two /three /.notdef /five /.notdef /seven 9{/.notdef}rp /A 
6{/.notdef}rp /H 5{/.notdef}rp /N 3{/.notdef}rp /R 5{/.notdef}rp /X 
8{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v 113{/.notdef}rp /egrave /eacute 
22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [8.99484 0 0 -9 0 0 ]msf
90 790.08 mo
(HAN Xu                                              )
[6.47986 5.51994 5.99949 2.27999 5.51994 4.56001 4.43999 4.55999 4.44 4.56 4.44 4.55998 
4.44 4.56 4.44 4.56 4.44 4.56 4.44 4.55998 4.44 4.56 4.44 4.56 
4.44 4.44 4.55998 4.56 4.43999 4.56 4.44 4.56 4.44 4.56001 4.44 4.56 
4.43999 4.55997 4.44 4.56 4.44 4.56 4.44 4.56 4.43997 4.56 4.43997 4.56 
4.44 4.55997 4.44 0 ]xsh
327.36 790.08 mo
(                              25/07/2010 )
[4.44 4.55997 4.56 4.44 4.56 4.44 4.56 4.44 4.55997 4.44 4.56 4.44 
4.56 4.44 4.56 4.43997 4.56003 4.43997 4.56003 4.43997 4.56 4.44 4.56 4.44 
4.55997 4.44006 4.56 4.44 4.56 4.56 4.44 4.56 2.39999 4.56003 4.56 2.39996 
4.56003 4.44 4.56 4.56003 0 ]xsh
294.36 790.2 mo
(3)sh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 39 /quotesingle put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 58 /colon put
dup 76 /L put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 226 /acircumflex put
dup 232 /egrave put
dup 233 /eacute put
def
/FontBBox {-568 -307 2028 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
32 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/space <1C60D8A8C9B8707C25> |-
/quotesingle <1C60D8A8C9B8B6EEBF34B404A9ED44637F193F6988F1F13BD0
D02504AC90B7D9DC51E56AD05254CD117BCCB1BB3E1709AEEA36C23F1B253598
49E7E9C7ECC034> |-
/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9A
E12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533
946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA0
49D36B9B13B7F6C8AA7A4A5EB0> |-
/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF
58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63
BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B54
0A016D558248DC4A3E8183F5F> |-
/comma <1C60D8A8C9B8707CDCEBD9C789FC719A6E699B9D99F66BE737EEBAFF
7111B9225F270084B7F68BC0DDECBD8A23968AE48D16B628A165111DDE7E6CD8
DD6007F82AE5C9057E54AF2D17F8AB7C9B11610F20000D2C65AB75461D35EBD1
19C9E1C1E902BC7C231A59B4A0E3A4C206C50EEA0EE1> |-
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/colon <1C60D8A8C9B854D0F13087BBB1CA740A43DAD9701E3526922439491C
919607A35FADE78CBF58DEB6F77162B833A564944651E40EB8B1029279A92DA8
7F1970EA51E0E090EFBE9271A7A54984404D201FAE563EA042AC2F2168613E23
5EA185B91D3B39DC0CADE02D647DEA9D03A1D7A0C1E2B40AEF5E6B5E30B20C5D
70C85702672228> |-
/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09
270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C2
21DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12
A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B
847D2C24AD687E0CDB56> |-
/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550D
EC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B
177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB33
3E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB
0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70
BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895
DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737
B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272E
F1EF1464C3F0D45D7CBB8749AF571E09> |-
/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC5
4400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A
6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C
2999730E7919239B324086FEA852156F456647AA0692084759C352D699897179
9F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-
/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D2030
65B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A
86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857
EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB
01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104
E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A
36815EA1CE5876FAC4F83CDFE1BD4A> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
/f <1C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF3209
2BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BF
E5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC
628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573
F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD9
41D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |-
/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F608
47F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF
4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AE
A8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA7
07BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8
585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF
9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA4
5E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD7
0E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC819
1E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D30027
81921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0
BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46
F1C707> |-
/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E0
27FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0
134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9
C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E
2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E
36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E9
7FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F
735A795EACD82F245D81FB43B5> |-
/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D
9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F9
8C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365
B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090
E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB
8CA3E9F85837FAC6> |-
/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C430
4B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D
244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527
D6441CE02F5A28D63A618F> |-
/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D
24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E
9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2
556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD
574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F24910
7C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18C
E6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE9556
17323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D98
7ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFE
C679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82
B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B5179
96> |-
/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC
81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D
4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF
60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B2800261
30687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E
277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0
027198438FE663C2EACF82CEB86F7C727594> |-
/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD441
6250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF9
96A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA4367
02294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D
9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD3
9E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB8
13B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272
E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462
E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D
017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D
23764933CEE9DC71CCD4C3E61E53DA702E> |-
/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE
6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983
E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53
A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455
AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C
360275B503E4954E912CD342> |-
/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22A
CE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A03
9A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40
BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FA
AB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593
B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B
93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-
/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448
713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43
DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B
36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-
/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A1
99CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152
D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B
867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E16
9A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97
520325221F3417C7781EB09765> |-
/v <1C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D2940
3E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF33
B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0EDAE
DA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D98
258ABD433E9E> |-
/x <1C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAA
DD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B
8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F
3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA259881698
31DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEAC
D6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D752
8EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |-
/acircumflex <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F4
60B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF534
56C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48
FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB
6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A8
5C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87
A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0
FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8
B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E280D5068C8D1DAEB8E8ED83B
B2DA7ADCEDFD1381B6EF07A1> |-
/egrave <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41B
E2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480
B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092
C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013
18984A59E1CFFFD06EA629758085868D3F5F720426B2910390E700BCCEA63132
038D4C891> |-
/eacute <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41B
E2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480
B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092
C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013
18984A59E1CFFFD06EA629758085868D3F5F720426B2A4285DC6258790687C7C
F1C3BC8F49363> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/.notdef /period 11{/.notdef}rp /colon 17{/.notdef}rp /L 20{/.notdef}rp /a 
/.notdef /c /d /e /f /g /h /i 
2{/.notdef}rp /l /m /n /o /p /q /r 
/s /t /u /v /.notdef /x 105{/.notdef}rp /acircumflex 
5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9929 0 0 -12 0 0 ]msf
90 74.2803 mo
(r\351aliser premi\350rement une transformation plastique )
[3.95991 5.27982 5.27982 3.36 3.35999 4.6799 5.27982 3.95991 5.52 6.12 3.95992 5.27983 
9.35997 3.36002 5.27982 4.0799 5.27983 9.36 5.2798 6 3.36002 5.51999 6.00002 6.00002 
5.2798 5.52 3.36 3.9599 5.27982 6.00002 4.67992 3.95992 5.99997 3.95993 9.48001 5.27979 
3.35999 3.35999 6.00003 5.99997 5.51999 6 3.36002 5.27982 4.67993 3.35999 3.35999 6 
6 5.27985 0 ]xsh
350.76 74.2803 mo
(depuis la configuration initiale )
[6 5.27982 6 6 3.35999 4.6799 5.51999 3.35999 5.27982 5.52002 5.27982 6.00003 
6 3.9599 3.48001 5.88 6 4.0799 5.39981 3.35999 3.36002 6 6 5.51999 
3.35999 6 3.36002 3.35999 3.35999 5.27979 3.35999 5.15979 0 ]xsh
89.9999 89.8803 mo
(vers la configuration rel\342ch\351e isocline, et suivie )
[5.99999 5.27982 3.95991 4.6799 3.48 3.36 5.27982 3.48 5.27981 6.00002 6 3.95988 
3.36002 5.88 6.12 3.9599 5.27983 3.36 3.36002 5.99998 6 3.48001 3.9599 5.27982 
3.36002 5.39981 5.27982 5.99998 5.27982 5.27982 3.48001 3.36 4.67992 6 5.2798 3.35999 
3.35999 6 5.27985 2.99997 3.48001 5.27982 3.35999 3.47998 4.67993 6 3.35999 6 
3.35999 5.27985 0 ]xsh
324.96 89.8803 mo
(d'une transformation \351lastique depuis )
[6 2.15991 6.00003 6 5.27982 3.47998 3.35999 3.95993 5.27979 6 4.67993 3.95993 
6 3.95993 9.35999 5.27982 3.35999 3.35999 6.00003 6 3.47998 5.27982 3.36002 5.27975 
4.67993 3.35999 3.35999 6 6 5.27985 3.47998 6 5.27985 6 5.99994 3.35999 
4.67993 0 ]xsh
89.9999 105.6 mo
(la configuration rel\342ch\351e isocline vers la configur)
[3.35999 5.27982 3.00001 5.27982 5.99999 6 3.9599 3.48 5.87999 6.00002 3.9599 5.27982 
3.36 3.36 6 6.00002 3 4.07991 5.27982 3.36002 5.2798 5.27982 6.12001 5.27983 
5.27982 3.12 3.35999 4.6799 6 5.27983 3.36 3.36 6.00002 5.27982 2.99998 6.00002 
5.27979 3.95993 4.6799 3 3.35999 5.27985 3 5.27979 5.99997 6.12003 3.95993 3.35999 
5.88 6.12 0 ]xsh
327.839 105.6 mo
(ation actuelle \()
[5.39981 3.35999 3.35999 6.00003 6 2.99997 5.27985 5.27982 3.35995 6 5.27982 3.35999 
3.36002 5.27982 2.99997 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-BoldMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-BoldMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 49 /one put
dup 70 /F put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 114 /r put
dup 117 /u put
def
/FontBBox {-558 -307 2034 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/space <1C60D8A8C9B8707C25> |-
/one <1C60D8A8C9B7A73DB9EF586AAA5514CED49708F80BBBB3E0C08981E71A
2FDC36B865E3FCA51E6A1484F46E65841854AEA89C775394E73B1898984FBC22
49D98BC6F183E16066F5FE57A76500983C69451DB2E93C4F88F69AFBA843BB16
999133215C928C0CBB37486BAEE843CAAF> |-
/F <1C60D8A8C9B7D8BE16C0AD3299FF178E380F23EF8285ECD14E32B6FC4FA4
C80A81C1367F22885BFFF85257C46061967A0BFAD29F8FCF5A785815FEC106E5
30C8EB839B80C8519F12ACC649019E78CD6DB38E8D81E3E87ECB25686FC8498E
04F3880676F25466B5822AF8EC443DDA03986B03D7D7D9A03FFD005A0FE16BE7
A8EFE9831E47150923F72B550D2570C2AB4C4C5204368FD59574148F88FC9066
9A7A7FF6280BDEA741FC397E07194D779BCD12> |-
/e <1C60D8A8C9B77FE2C1A0FFE616EB00E9CC30AEE6296E704D5E8E6E2A25CD
5B841666118E2FAE181ECDCA295C531BAEC8AA2C391851649F7A3F6C1D06B8F5
3311D73A0F775B337F21892F2D55D51BAAE57B9A38BC3FBC0F8B7058E4F9E704
709FA2F144D9397D8E7CC8EE685293C980753BDE3858AD8D5DB11A1F649D597D
E968E74B3A3B8C5A39BDCB85B6D8AE6FFD00E4F0A287> |-
/g <1C60D8A8C9B7A73DB95827D165CBA94F37D43D972EAAE57339132B24EEB3
269751BCA927C1513B63503B83734FF72F82FBA710B5424F96FFF7E943411B7E
7A713EED12F14B2BD28BCE56F0FA669D4B45D498AE948AE55ED3A2127E7CF255
B1E21C2384D44F86D6310CF1BD75C3CFB0483D4C181B588B6DBE0BAEBDD7FB8E
E6D3C70C5C2013030F092ACC4E08AD772DA82F9167E24DA30D2630801B833E8F
B36BFAE3B375A19AD81EB8DA4C979D041FFC7C9B1A73EF1C5B7E751A31335A96
371ACAE038F1C6D7312CCAE42C476D35BAF7EE8303BD721B3C9901074E92A47F
3ECA65FBFAD1842104F257AA28C400F288CED8FAB47E7B0F9AC674B2AD758DDC
4D82DD0D261718553330B37938706C656304353A29170CAF539CB305CE1DDFAA
CEE39BF9E79C6CCE45F70BFBD2BD4A513EEAE24D2E98156B2FDBD7BA4B869481
F19FB826F47EF5D2624958A3959A8F6D4DC2F78300ED78925E0F8B8B401EF0> |-
/i <1C60D8A8C9B854D0E61042376B1E283FB3F4BBB7CB3487BC74EE7E391A93
B180B577E22955D0FA3199DCD5C6BBEA2EDAEAAD70CAC2D387D654CFD6D585A6
0CE5094378FB8BA8FD5D1CAFC6A05D463B8B2BF660BFB6FA4902B50766CB2260
0DE6B8533451B6F73A6A051EB16DBCEA0EFC6C89350A34CB9DF0A7738E953A8F
7AB6ADA51E7F> |-
/r <1C60D8A8C9B77FE2960E00E3A8DCFC480C099B33BBDDEDCBBEDD2A0D472C
0A7B73DA6C507A02DE3334237527983B6592EE1B2F262F9019257EF00896B753
BA1EE7B97E00D2814390DFE8166E795665E9161989E492FE9CF41E80A3FAC0B9
410A0D35E8758FA16A6EBCF6A32D78AB8563CF90B05BC9CE7CBF6CAB662900B3
B6694F1FC2BDC482D5EA0481674C5822C4D45FD0EE1F9108A4ECF4F95EA02DB2
23FEC06EA06FE96C26DCC8DC8D15> |-
/u <1C60D8A8C9B7EF322BA0905ED0DC683347CE70FA474511E47D7F16FABA80
631D8B81EF4E26BB958E5CD419A29585E75FE6367FE08A7CCFFE45262AE333F2
24F7158401337079DCB57A01C4153127AD91F464BC7389BDB2B1F912E0435254
BC5B90C25CFA9CF36838EB1DC267155E152B4A4C084F64F36BC4A1C665448CAD
D0DC39A2B4C68518BC7B0B05DE633BA8500EE54DA457E79EC9CBA6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYEX+TimesNewRomanPS-BoldMT /TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/JDBYEX+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 20{/.notdef}rp /F 30{/.notdef}rp /e 
/.notdef /g /.notdef /i 8{/.notdef}rp /r 2{/.notdef}rp /u 
138{/.notdef}rp]
JDBYEX+TimesNewRomanPS-BoldMT nf
JDBYEX+TimesNewRomanPS-BoldMT*1 [11.9929 0 0 -12 0 0 ]msf
399.239 105.6 mo
(Figure 1)
[7.19992 3.35999 6 6.72 5.03983 5.27982 3 0 ]xsh
JDBYEW+TimesNewRomanPSMT*1 [11.9929 0 0 -12 0 0 ]msf
441.959 105.6 mo
(\). )
[3.95993 3.11996 0 ]xsh
108 370.68 mo
(Le gradient du vecteur vitesse peut s'exprimer : )
[7.1999 5.27982 3.12 5.99999 3.95992 5.27982 6.00002 3.35999 5.27982 6.00002 3.36 3 
6 6.00002 3 6.11998 5.27983 5.27983 3.36 5.27983 6 3.9599 3 5.99998 
3.48001 3.35999 5.27982 4.67992 4.67992 5.27982 3 5.99998 5.27985 6 3.35999 3 
4.79993 2.03992 5.27985 6.11996 6 3.9599 3.35999 9.36002 5.27982 3.95993 3 3.35999 
0 ]xsh
89.9999 453.96 mo
(avec )
[5.27982 6 5.27982 5.27981 0 ]xsh
.49536 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
122.28 458.16 mo
128.88 458.16 li
@
122.28 456.6 mo
128.88 456.6 li
@
147.96 458.16 mo
155.64 458.16 li
@
147.96 456.6 mo
155.64 456.6 li
@
162.96 458.16 mo
170.64 458.16 li
@
162.96 456.6 mo
170.64 456.6 li
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/.notdef /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 17{/.notdef}rp /L 
20{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/q /r /s /t /u /v /.notdef /x 
105{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [6.99564 0 0 -6.99984 0 0 ]msf
175.92 447.72 mo
(1)sh
true set_gvm
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /Symbol def
/FontInfo 6 dict dup begin
/Notice (Copyright URW Software, Copyright 1997 by URW) def
/Weight (Standard) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /minus put
dup 61 /equal put
dup 215 /dotmath put
def
/UniqueID 4245556 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [673 693] def
/BlueScale 0.039625 def
/StdHW [0] def
/StdVW [0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/minus <1C60D8A8C9B79676F49142DE56346D1DA3B82A9483D89BD7DD> |-
/equal <1C60D8A8C9B79676F4308A6DF9135F625BB9C0F60A91EF19FD60CB60
86E5C3B836937C14557529A086AFB2> |-
/dotmath <1C60D8A8C9B8707CDCDE83697E842FE201E96C33797EA3E59AF9E5
63FF3A837B683EE0> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol /Symbol findfont ct_VMDictPut
/JDBYEY+Symbol*1 
[45{/.notdef}rp /minus 15{/.notdef}rp /equal 153{/.notdef}rp /dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [6.99564 0 0 -6.99984 0 0 ]msf
172.08 447.72 mo
(-)sh
JDBYEY+Symbol*1 [11.9929 0 0 -12 0 0 ]msf
157.92 453.96 mo
(\327)sh
138.12 453.96 mo
(=)sh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7D8BE19A476B76DA626444203D435C21F603A8F4FA7429915
55F85EC616546A39378671CFCAFA4B1AB4CB2DADBE11058FEFE539FEABD5B214
F651E6BFEE80A74967E9AD1647F4686F73C5886CABC9BF1150842182D664E69D
C07C108E97F0AFC02C130199A638DCCECE5ED25956925B28FA04FFDA9B7670D7
1B40D49D73CDA3E3CA74CD0E6B25FD2B45688860E0A1F0F402877FAB287452A3
A77F70B67997462A3D6DC36985C52C840907315C130CE77DC7F17FA662D2B327
BE199082CDEE433AF947EF582F6506792FBBD7F063C74E0318> |-
/L <1C60D8A8C9B7EF3224EF14534B63E6D00A931A7B1F7C4E6610A4A79784E8
F71472BD433C216CD1B328C08A101C8579CC9AE0010F9D02418F4B50A4EFE66E
E4D2E87131AF1885C244793CDDC56EDE20C10027D0C09B436B660E2C02C9C836
E1B96E876461A546EF6906B53572BAF0A52C9ABFFB2CC7B18C0F0BBB3E78E5FE
8ECF9B5D3A5AD6469189D35D93EC876007D67F3619CECC58933278EEFDC58B13
7E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 69 /E put
dup 76 /L put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 7{/.notdef}rp /slash /zero /one 
/two /three /.notdef /five /.notdef /seven 9{/.notdef}rp /A 
3{/.notdef}rp /E 2{/.notdef}rp /H 3{/.notdef}rp /L /.notdef /N 
3{/.notdef}rp /R 5{/.notdef}rp /X 8{/.notdef}rp /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 113{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9929 0 0 -12 0 0 ]msf
163.2 453.96 mo
(E)sh
148.2 453.96 mo
(E)sh
122.52 453.96 mo
(L)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.99564 0 0 -6.99984 0 0 ]msf
130.2 447.72 mo
(e)sh
true set_gvm
%ADOBeginSubsetFont: MNTAAA+MTExtra Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MNTAAA+MTExtra def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g6 put
def
/FontBBox {-1 -214 1020 798} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7A73DC5D77C807106D8C88F3D6996286384ECD112B7
FC4FF640F1880CFC> |-
/g6 <1C60D8A8C9B81F2C3AE5CE2FAF39BFA8FBB8978F25F6FB2E1E14B716AAC
9D35BBF9C5851DBD3E19726F9AA5BD209C7298351371FDC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYEZ+MTExtra /MNTAAA+MTExtra findfont ct_VMDictPut
/JDBYEZ+MTExtra*1 
[/.notdef /g6 254{/.notdef}rp]
JDBYEZ+MTExtra nf
JDBYEZ+MTExtra*1 [11.9929 0 0 -11.9995 0 0 ]msf
150.96 450.72 mo
(\001)sh
JDBYEW+TimesNewRomanPSMT*1 [11.9929 0 0 -12 0 0 ]msf
189.72 453.96 mo
(et )
[5.27982 3.36002 0 ]xsh
208.68 458.16 mo
215.28 458.16 li
@
208.68 456.6 mo
215.28 456.6 li
@
235.8 458.16 mo
243.12 458.16 li
@
235.8 456.6 mo
243.12 456.6 li
@
250.44 458.16 mo
257.76 458.16 li
@
250.44 456.6 mo
257.76 456.6 li
@
JDBYEW+TimesNewRomanPSMT*1 [6.99564 0 0 -6.99984 0 0 ]msf
262.92 447.72 mo
(1)sh
JDBYEY+Symbol*1 [6.99564 0 0 -6.99984 0 0 ]msf
259.2 447.72 mo
(-)sh
JDBYEY+Symbol*1 [11.9929 0 0 -12 0 0 ]msf
245.4 453.96 mo
(\327)sh
225.96 453.96 mo
(=)sh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7D8BE160E350EFB153C8A56A585A57F885BE4FA15D682CC14
9632B16703269841BB1E3D6F596C110FF12709B0992D6FC8321F4533A6E3329D
41057EEA81DD77895DC82B552C740C4D22F75CFD205CA1CF8C15C06063681BA5
022194886C7D39FFFC16B271FA0F2B4A39A67823ECBF3EE95F6F9F05B5E42AB8
3D9EA20F952F9E20ACFD03BADFC5F7DF7093D4983BA89FF4E8586E9941580E4A
F151DAC9CF3084CFCDB299395F41597A169BE66336DAC4145C29A17F7BDB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 7{/.notdef}rp /slash /zero /one 
/two /three /.notdef /five /.notdef /seven 9{/.notdef}rp /A 
3{/.notdef}rp /E 2{/.notdef}rp /H 3{/.notdef}rp /L /.notdef /N 
/.notdef /P /.notdef /R 5{/.notdef}rp /X 8{/.notdef}rp /a 
/.notdef /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u /v 113{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9929 0 0 -12 0 0 ]msf
250.68 453.96 mo
(P)sh
236.04 453.96 mo
(P)sh
208.92 453.96 mo
(L)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.99564 0 0 -6.99984 0 0 ]msf
217.56 447.72 mo
(p)sh
JDBYEZ+MTExtra*1 [11.9929 0 0 -11.9995 0 0 ]msf
238.56 450.72 mo
(\001)sh
JDBYEW+TimesNewRomanPSMT*1 [11.9929 0 0 -12 0 0 ]msf
276.12 453.96 mo
(les gradients de la transformation associ\351s )
[3.35999 5.27982 4.67993 8.39996 5.88 4.0799 5.27985 6 3.35999 5.27982 6 3.48001 
4.6799 8.39999 6 5.27982 8.39996 3.36002 5.27982 8.39999 3.35999 3.95993 5.27982 6 
4.6799 3.95993 6 3.95993 9.35999 5.27982 3.35995 3.35999 6 6.12003 8.39996 5.27985 
4.67993 4.67993 6 5.27979 3.35999 5.27982 4.6799 0 ]xsh
89.9998 484.2 mo
(respectivement aux deux parties de la transformatio)
[3.95991 5.27982 4.6799 5.99999 5.27982 5.27982 3.36 3.36 6.00001 5.27982 9.47998 5.27983 
6 3.36 3.24001 5.27983 6 6.12 3.24001 6 5.27982 5.88 6 3.24002 
5.99998 5.2798 3.95992 3.36 3.36 5.27983 4.67992 3.23999 6 5.2798 3.24002 3.35995 
5.27982 3.23999 3.35999 3.95993 5.27982 6 4.67993 3.95993 6 3.9599 9.36002 5.27982 
3.47998 3.36002 0 ]xsh
339.12 484.2 mo
(n, alors le tenseur )
[6 3 3.23999 5.27982 3.35999 5.99997 3.95993 4.6799 3.23999 3.35999 5.27982 3.23999 
3.35999 5.27985 6 4.6799 5.27985 6 3.95993 0 ]xsh
432.24 488.4 mo
438.84 488.4 li
@
432.24 486.84 mo
438.84 486.84 li
@
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9676 0 0 -11.9747 0 0 ]msf
432.48 484.2 mo
(L)sh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/O <1C60D8A8C9B6079F6288DCC34B8AB15434B53D5CBCF7E29104F391BE1572
E1D4E07ABEE690B714C43DA0F68F9B727CD1B8007FE243EEEBD45E7815504A31
13BAFAC54AC3D3B019A1C9ACF716BD3362CCEE1A09F2069AE9AF5406AA47EF07
6128BEB6A74EB29D02BFBE8F43F41B56E48CC0FA84987A887327DB516D9441F2
C6BDCB9AC2AD82E8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 79 /O put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/.notdef /period 2{/.notdef}rp /one 8{/.notdef}rp /colon 17{/.notdef}rp /L 
2{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /q /r /s /t /u /v 
/.notdef /x 105{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9929 0 0 -12 0 0 ]msf
441.36 484.2 mo
( peut s'\351crire )
[6 6 5.27982 6 3.35999 3.23999 4.6799 2.03995 5.27982 5.27982 3.95993 3.47998 
3.95993 5.39978 0 ]xsh
90.0004 509.28 mo
(comme la somme de sa composante \351lastique et de sa )
[5.27982 6 9.35999 9.35999 5.27982 7.68 3.36 5.27982 7.67999 4.6799 6 9.35999 
9.36 5.27982 7.67999 6 5.39984 7.79999 4.67989 5.27982 7.67999 5.27985 6 9.35999 
6 5.99998 4.67993 5.27982 6 3.35999 5.27982 7.79996 5.27985 3.35999 5.27982 4.67993 
3.35999 3.35999 6.00003 6 5.27982 7.67999 5.27982 3.35999 7.67999 5.99997 5.39981 7.67999 
4.67993 5.27982 0 ]xsh
396.84 509.28 mo
(composante plastique )
[5.27982 6 9.36002 6 6 4.79993 5.27979 6 3.35999 5.27982 7.67999 6.00003 
3.35999 5.27979 4.67993 3.35999 3.35999 6.00003 5.99997 5.39981 0 ]xsh
90.0004 524.88 mo
(transport\351e dans la configuration actuelle. On d\351fi)
[3.35999 3.95992 5.27982 5.99999 4.6799 5.99999 6.00001 3.9599 3.36 5.27982 5.27983 3.12001 
6.11998 5.27983 6 4.6799 3.12001 3.36 5.27983 3.11998 5.27982 6 6.12003 3.9599 
3.48001 5.87997 6 4.07991 5.27982 3.36 3.36 6.00002 6 3.12 5.27979 5.27985 
3.35999 6 5.27982 3.36002 3.35999 5.27982 2.99997 3.23996 8.63983 6 3.12 6 
5.27985 4.0799 0 ]xsh
331.08 524.88 mo
(nit le tenseur vitesse de d\351formation )
[6 3.35999 3.35999 3.12 3.35999 5.27982 3.12 3.35999 5.27982 6 4.6799 5.27982 
6.00003 3.9599 3.12 6 3.35999 3.36002 5.27982 4.6799 4.67993 5.27982 3.12 6 
5.27979 3.23999 6 5.27985 3.9599 6 3.95993 9.35999 5.27982 3.35999 3.35999 5.99997 
6.11996 0 ]xsh
90.0004 547.56 mo
(par : )
[5.99999 5.27982 3.95991 3.00001 3.35999 0 ]xsh
119.52 551.76 mo
128.16 551.76 li
@
119.52 550.32 mo
128.16 550.32 li
@
163.92 551.76 mo
170.4 551.76 li
@
163.92 550.32 mo
170.4 550.32 li
@
true set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEY+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C34CDA278A2DAC979FE7B193F144A72B24A04
A8E4BBE314AA264F7F8E713D96F12B2C722F9FE58CCF22A87435960BE762B4C1
1EA72FD069F47E245537F5A01FB19590E0525155D69B66275F593E3772D693> |-
/parenright <1C60D8A8C9B81F2C34CDA278958F9F5DAE3BFC70350BE4456D0
10FB607F29238B8F1E7A5441D3D77BAEA8D66D5FF8CF731680EBDA695650E6B4
D8289AFB49A3DFCBC9D5F3287EF00856C4BAAE463E5D458A352C4D9EDEE07F1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEY+Symbol /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /minus 15{/.notdef}rp /equal 153{/.notdef}rp 
/dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [11.8246 0 0 -18.7256 0 0 ]msf
160.56 547.44 mo
(\(\))
[10.9199 0 ]xsh
187.08 544.56 mo
194.28 544.56 li
@
199.44 551.76 mo
205.92 551.76 li
@
199.44 550.32 mo
205.92 550.32 li
@
218.16 551.76 mo
224.64 551.76 li
@
218.16 550.32 mo
224.64 550.32 li
@
gsave
196.32 528.6 mo
200.28 528.6 li
200.28 552.12 li
196.32 552.12 li
cp
clp
JDBYEY+Symbol*1 [11.8247 0 0 -21.1289 0 0 ]msf
196.32 547.44 mo
(\()sh
grestore
gsave
232.56 528.6 mo
236.52 528.6 li
236.52 552.12 li
232.56 552.12 li
cp
clp
JDBYEY+Symbol*1 [11.8247 0 0 -21.1289 0 0 ]msf
232.56 547.44 mo
(\))sh
grestore
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62854094BF26E9B074C93C35A7227C28199102AA6B14
7768C39CD7C4EFFC03966A488F4292E39D5893EF5C1DAD58CF2A4EF566C42389
38A95DF39FD2FEB60DFDFD93E66D990FF4FF01C7F07E16543A236B2B14B94AB1
EBF61AB530B3F5C26BDB1537C1B0F308775F12CC0873E5D62E773768B278DE0F
94E4F7771642DF492107662FC8A99A390804DDDAFAE832ACC5C2A17F75B76022
70F3C8FFA2183A91B0908AED38352FEEB49558E62FDB76D0B21524A03F6C66BD
1FD5EFA3DE8A04F5944B052B384CDCC18D497CFA7D574E04264245> |-
/T <1C60D8A8C9B7EF323B043F7356D787F22DD5A27FFA2879B142D44CA92E81
ACF7A975B0E45B81B44C53ED72199A1209DEC52D9515733C0E6C89D066C927AC
EB3656C4FB019EF01B90F9D679F1D15A9D6304D98B7C01DDB7292A5060DFD76D
203F0196DC3CFB7A1EE816A5CD53976C6ED6843E9C8EFEB0518A2899C5367D08
14F7971EC4C722C4F59C> |-
/y <1C60D8A8C9B77FE2A5F6578EB74A5BFD70E96F53281130D42B07852DDCDE
D49DD330FC357D6058C03E8610E8E1D643E8CA0EBC7995F8BABA9747A0C2E2AC
A69173E30D3ACD29C808B16AC9A852CB62CBDD288A4A7E966451A68CB6890FD6
1B1EF6E37046C4AE362DFF52C05E5E0E60BC6A163B19979A909E3D594EE95DCB
C6E7C631883A0E99BDB5D8D9A3E3E1A27177F57AE523C60D5B87B9A8F95973B7
E240DB57053F25B7E2735427EEA7A7AB55075C8F2065CBC552B611C79F3A08A7
38B67D80BCFC3A017B83DD56AA10FE2705CDE9136F3729D089A4CE85B23F79FC
3F372F0C03CE3A67067C37B87214D407E8CDB95C04AC4E38F20F21F7B960D30F
D020> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 68 /D put
dup 84 /T put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 7{/.notdef}rp /slash /zero /one 
/two /three /.notdef /five /.notdef /seven 9{/.notdef}rp /A 
2{/.notdef}rp /D /E 2{/.notdef}rp /H 3{/.notdef}rp /L /.notdef 
/N /.notdef /P /.notdef /R /.notdef /T 3{/.notdef}rp 
/X 8{/.notdef}rp /a /.notdef /c /d /e 2{/.notdef}rp 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u /v 2{/.notdef}rp /y 
110{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.98676 0 0 -6.99096 0 0 ]msf
225.72 541.32 mo
(T)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
218.4 547.56 mo
(L)sh
199.68 547.56 mo
(L)sh
164.16 547.56 mo
(L)sh
141.72 547.56 mo
(sym)
[4.67987 5.2798 0 ]xsh
119.76 547.56 mo
(D)sh
true set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEY+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B7967688634518E0C63EDFCD231CB1631FDF629D82199BF
0CA0FE5C4AF45AF2C86567ED95C5441F8C5017E94BC569E5E5FF5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEY+Symbol /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 153{/.notdef}rp /dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [11.9775 0 0 -11.984 0 0 ]msf
208.8 547.56 mo
(+)sh
177.12 547.56 mo
(=)sh
131.76 547.56 mo
(=)sh
gsave
187.92 546.12 mo
193.92 546.12 li
193.92 559.56 li
187.92 559.56 li
cp
clp
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/.notdef /period 2{/.notdef}rp /one /two 7{/.notdef}rp /colon 17{/.notdef}rp 
/L 2{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c /d 
/e /f /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x 105{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 
22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
187.92 556.92 mo
(2)sh
grestore
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |-
/C <1C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA34
5031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9D
EB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC94209715
8DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC739
9ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B283
409DD22AD16B7DD28B54D5FC454C> |-
/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EA
E566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA75
9A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407C
A730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D50
0379950803F077453028FB6169> |-
/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F608
6ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238
376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE
6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11
ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41B
FE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34A
CA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-
/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BA
F02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A
3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8
B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD
6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DB
F9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A
71BC990F312D4821883A95164BCE1683B85434AFA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 45 /hyphen put
dup 67 /C put
dup 68 /D put
dup 71 /G put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/hyphen /period 2{/.notdef}rp /one /two 7{/.notdef}rp /colon 8{/.notdef}rp 
/C /D 2{/.notdef}rp /G 4{/.notdef}rp /L 2{/.notdef}rp /O 
17{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/q /r /s /t /u /v /.notdef /x 
/y 104{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
187.68 540 mo
(1)sh
236.64 547.56 mo
(. )
[2.99998 0 ]xsh
108 587.28 mo
(Dans la configuration interm\351diaire, on d\351finit le )
[8.63978 5.2798 5.99998 4.67988 3.23999 3.35999 5.27979 3.23997 5.2798 5.99998 5.99998 3.9599 
3.47998 5.87997 6.11996 3.9599 5.2798 3.35999 3.35999 5.99997 5.99997 3.23999 3.35999 5.99997 
3.35999 5.2798 3.9599 9.35995 5.27982 5.99995 3.35999 5.27982 3.35999 4.07986 5.27985 2.99997 
3.23996 6 5.99994 3.23996 6 5.27979 3.9599 3.35999 5.99994 3.35999 3.35999 3.23996 
3.35995 5.27982 0 ]xsh
347.52 587.28 mo
(tenseur des dilatations \351lastiques )
[3.47998 5.27982 5.99997 4.67987 5.27982 5.99997 3.9599 3.23999 5.99997 5.27982 4.6799 3.23996 
6 3.35999 3.35999 5.27982 3.35999 5.27979 3.35999 3.35999 5.99997 5.99997 4.6799 3.23999 
5.27979 3.47998 5.39981 4.6799 3.35999 3.35999 6 5.99994 5.27979 4.55991 0 ]xsh
90.0003 609.96 mo
(Cauchy-Green droit par : )
[8.03987 5.27981 5.99998 5.27979 6.11998 5.75998 4.0799 8.63979 4.07991 5.27979 5.27979 5.99998 
4.07999 5.99998 3.9599 5.99998 3.35995 3.36 2.99998 5.99997 5.27982 3.9599 2.99998 3.47998 
0 ]xsh
219.24 614.28 mo
226.92 614.28 li
@
219.24 612.84 mo
226.92 612.84 li
@
246 614.16 mo
253.68 614.16 li
@
246 612.6 mo
253.68 612.6 li
@
267.96 614.16 mo
275.64 614.16 li
@
267.96 612.6 mo
275.64 612.6 li
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFFAED57175A5527133421EBC21E76DBAB72ACCBE9103B
32DE3E656A165A65E9E2355845AEB7E09DA6E215018706AF7B889BE7E49F000F
A5830EB21A5EAF4CB6ED590C06E0E498B57B3D796FAE982CC67DEFCAB50BBE83
88E1AD2B73E137A2E5B3F021118B9D0E0F8E0263367F4EA42B3B0DAB36C4D910
060EDA039D6F9BADD9D5C901F008667A8BB691EF8D79CDA368B8ED3A1E406AF9
AE6ED0D182B9009F11361F5A89FC7840A3C9963B411D1FCF4E73561175> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 7{/.notdef}rp /slash /zero /one 
/two /three /.notdef /five /.notdef /seven 9{/.notdef}rp /A 
/.notdef /C /D /E 2{/.notdef}rp /H 3{/.notdef}rp /L 
/.notdef /N /.notdef /P /.notdef /R /.notdef /T 
3{/.notdef}rp /X 8{/.notdef}rp /a /.notdef /c /d /e 
2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 
/p /.notdef /r /s /t /u /v 2{/.notdef}rp 
/y 110{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
268.2 609.96 mo
(E)sh
246.36 609.96 mo
(E)sh
218.76 609.96 mo
(C)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.98676 0 0 -6.99096 0 0 ]msf
254.76 603.72 mo
(T)sh
228.24 603.72 mo
(e)sh
JDBYEY+Symbol*1 [11.9775 0 0 -11.984 0 0 ]msf
263.04 609.96 mo
(\327)sh
236.16 609.96 mo
(=)sh
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
278.28 609.96 mo
(. La d\351formation \351lastique de Green-Lagrange )
[2.99997 4.19998 7.07986 5.27979 4.07999 5.99997 5.27982 3.9599 6.11996 3.95987 9.35999 5.27982 
3.35995 3.35999 6 5.99997 4.07999 5.27975 3.35999 5.27985 4.67987 3.35999 3.35999 6 
5.99997 5.27982 4.07996 6 5.27979 4.07999 8.6398 3.95987 5.27979 5.27985 6.11996 4.07986 
7.19989 5.39981 5.87997 4.0799 5.27979 6.12 5.87994 5.39978 0 ]xsh
89.9999 641.16 mo
(est donc d\351finie comme : )
[5.27979 4.67989 3.35999 2.99999 5.99997 5.99998 5.99997 5.27979 2.99998 5.99998 5.2798 3.95988 
3.35999 5.99998 3.35999 5.27979 3.12 5.27979 5.99998 9.35995 9.35995 5.2798 2.99998 3.35999 
0 ]xsh
218.52 645.6 mo
224.16 645.6 li
@
218.52 644.04 mo
224.16 644.04 li
@
243.36 638.16 mo
250.56 638.16 li
@
255.72 645.6 mo
263.4 645.6 li
@
255.72 644.04 mo
263.4 644.04 li
@
281.04 645.36 mo
284.04 645.36 li
@
281.04 643.92 mo
284.04 643.92 li
@
gsave
252.6 622.2 mo
256.56 622.2 li
256.56 645.72 li
252.6 645.72 li
cp
clp
JDBYEY+Symbol*1 [11.8242 0 0 -21.1289 0 0 ]msf
252.6 641.04 mo
(\()sh
grestore
gsave
285 622.2 mo
288.96 622.2 li
288.96 645.72 li
285 645.72 li
cp
clp
JDBYEY+Symbol*1 [11.8242 0 0 -21.1289 0 0 ]msf
285 641.04 mo
(\))sh
grestore
300.36 638.16 mo
307.56 638.16 li
@
312.72 645.36 mo
320.4 645.36 li
@
312.72 643.92 mo
320.4 643.92 li
@
334.68 645.36 mo
342.36 645.36 li
@
334.68 643.92 mo
342.36 643.92 li
@
354.36 645.36 mo
357.36 645.36 li
@
354.36 643.92 mo
357.36 643.92 li
@
gsave
309.6 622.2 mo
313.56 622.2 li
313.56 645.72 li
309.6 645.72 li
cp
clp
JDBYEY+Symbol*1 [11.8242 0 0 -21.1289 0 0 ]msf
309.6 641.04 mo
(\()sh
grestore
gsave
358.32 622.2 mo
362.28 622.2 li
362.28 645.72 li
358.32 645.72 li
cp
clp
JDBYEY+Symbol*1 [11.8242 0 0 -21.1289 0 0 ]msf
358.32 641.04 mo
(\))sh
grestore
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
352.92 641.16 mo
(1)sh
gsave
301.2 639.72 mo
307.2 639.72 li
307.2 653.16 li
301.2 653.16 li
cp
clp
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
301.2 650.52 mo
(2)sh
grestore
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
301.08 633.6 mo
(1)sh
279.6 641.16 mo
(1)sh
gsave
244.2 639.72 mo
250.2 639.72 li
250.2 653.16 li
244.2 653.16 li
cp
clp
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
244.2 650.52 mo
(2)sh
grestore
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0C9
64F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF48
A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D2A
7DF15DDA4EFCA27B915E1B9ED43E7C12> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 73 /I put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/hyphen /period 2{/.notdef}rp /one /two 7{/.notdef}rp /colon 8{/.notdef}rp 
/C /D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L 
2{/.notdef}rp /O 17{/.notdef}rp /a /.notdef /c /d /e 
/f /g /h /i 2{/.notdef}rp /l /m /n 
/o /p /q /r /s /t /u /v 
/.notdef /x /y 104{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 
22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
243.96 633.6 mo
(1)sh
true set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEY+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/epsilon <1C60D8A8C9B76427592999C0F26B0BF134D0D5328FB1C971ED68D2
2E9384F79EB3BAE2A16FC90E306975C861591DC83D1960458E145CC617AE39C9
1E2D5DBD2F9AE3FC17122B7F755351264D1084FCA9EA4F7706532F3B0251096B
5102A1D951B79AB1E77787B730B9BE292E432703E50225077A2DD09EFBF41F07
803344FD048BCE4017FB654EDCF9A438793C811B2D0D6730A208D993A08B20C8
1A9F30D39BEAD6D7944F9793379346B72158D9704D3BFFEE0004B1647BBDA9B6
8B0EDD138C2527F30A0E3631179773114E24F4A21FED3FDE9ACE4C031BE9BB97
828E59> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEY+Symbol /Encoding get
dup 101 /epsilon put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 39{/.notdef}rp /epsilon 113{/.notdef}rp /dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [11.9775 0 0 -11.984 0 0 ]msf
345.24 641.16 mo
(-)sh
329.64 641.16 mo
(\327)sh
290.52 641.16 mo
(=)sh
271.92 641.16 mo
(-)sh
233.4 641.16 mo
(=)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
334.92 641.16 mo
(E)sh
312.96 641.16 mo
(E)sh
255.12 641.16 mo
(C)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.98676 0 0 -6.99096 0 0 ]msf
321.48 634.92 mo
(T)sh
264.72 634.92 mo
(e)sh
225.48 634.92 mo
(e)sh
JDBYEY+Symbol*1 [11.9775 0 4.09643 -11.984 0 0 ]msf
217.8 641.16 mo
(e)sh
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
362.64 641.16 mo
(. )
[2.99997 0 ]xsh
108.001 687 mo
(Ici, on note )
[3.83989 5.2798 3.35999 2.99998 3.83999 5.99997 5.99998 3.83998 5.99997 5.99997 3.35999 5.2798 
0 ]xsh
171.84 691.32 mo
179.4 691.32 li
@
171.84 689.88 mo
179.4 689.88 li
@
true set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEY+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/sigma <1C60D8A8C9B7C05490559783ACB234382C2A7AC779B480534BCC61AF
358132595679619EF6DBBEDB5B2E785A5F60FF9B48FA611BA7336352837C911A
5A9A6D0051A19DADC8CE17323486971095DF86483CC00EE53D01C2E3BF2021DA
EFCEC929234C9D3748CC1CEA24E4588A3F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEY+Symbol /Encoding get
dup 115 /sigma put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 39{/.notdef}rp /epsilon 13{/.notdef}rp /sigma 99{/.notdef}rp /dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [11.9676 0 4.09309 -11.9747 0 0 ]msf
170.76 687 mo
(s)sh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B6079F6DAD6439E719A5649ADA7D8B9E734C715565956F15B5
C4CFBB8891AD82AF5B965DC9DBF0762D43C17265BBD3CD422561D8093800D47C
30E7401B7FF953462B20D5841B49861E5477C9C06DC8DEA98C62C73A16DCD10A
99A3BB2728EF5C45B4F29723E3FD20A045034CDC5B2823010371DE4EA42A5365
F63BDAAE6E06349967F6DD5B6C651FF133F1AC111407BA069118B1E1EF88ECE8
67D30D2AC6A5EEB5F5B14A4020A8D1688A963E3E2FF5DFE6441AA27FDF0183EE
620579E7103491C7EBC49E5703B87C43F0A841871BC2D6A7D289877EB3748B6B
80FD93562885CC9F2182E80755BBCE3303DAD528BFBDFEB3202E48EDCFB93BC1> |-
/P <1C60D8A8C9B7EF322B88F9F448EE5C6C6600BEF9C3C9A017B9BABF876458
925BFD3DF1270B888D0A52682DD77562B0592DCEFA4305CC7C82B5C217C153D7
D799EF75C3E1B47B2F2C3741BE023ABA656D3600645948113D9E1ACE5988E886
C2CAB89042DA868AC9EEC60CE17BA00926C89C442DF26FC8F7E4DF94B56A18CF
B31DE37DED0B361C6E9E1A158721E9F2BF357AD3A9D82EC3F61E7737142FF120
86F5CF2AAB01A87FB3B34AEED6F7C6CCE06EC32D6DE2EC0B548299344251FBC6
28> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEW+TimesNewRomanPSMT /Encoding get
dup 75 /K put
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle /parenleft /parenright 2{/.notdef}rp /comma 
/hyphen /period 2{/.notdef}rp /one /two 7{/.notdef}rp /colon 8{/.notdef}rp 
/C /D 2{/.notdef}rp /G /.notdef /I /.notdef /K 
/L 2{/.notdef}rp /O /P 16{/.notdef}rp /a /.notdef /c 
/d /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /q /r /s /t 
/u /v /.notdef /x /y 104{/.notdef}rp /acircumflex 5{/.notdef}rp 
/egrave /eacute 22{/.notdef}rp]
JDBYEW+TimesNewRomanPSMT nf
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
181.92 687 mo
( le tenseur des contraintes de Cauchy d\351fini dans l)
[5.99997 3.35999 5.2798 3.83998 3.35999 5.2798 5.99997 4.67987 5.2798 5.99998 3.9599 3.83998 
5.99998 5.27982 4.6799 3.83995 5.27982 5.99997 6 3.35995 3.9599 5.27982 3.35999 5.99994 
3.35999 5.27982 4.6799 3.83997 6 5.27979 3.84 8.03989 5.27982 5.99997 5.27982 6.11996 
5.75998 3.95996 5.99997 5.27982 3.9599 3.35995 5.99997 3.35999 3.83997 5.99997 5.27982 5.99997 
4.6799 3.83997 0 ]xsh
431.52 687 mo
(a configuration )
[5.27982 3.83994 5.27979 5.99997 6 3.95987 3.47998 5.87997 6 4.0799 5.27979 3.35999 
3.36005 5.99994 5.99997 0 ]xsh
89.9997 712.08 mo
(actuelle. Le second tenseur \(sym\351trique\) de Piola-K)
[5.27979 5.27981 3.35999 5.99998 5.2798 3.35999 3.35999 5.27979 2.99998 9.83997 7.19987 5.2798 
9.71997 4.67987 5.39981 5.27979 5.99997 5.99998 5.99997 9.71997 3.35999 5.27979 5.99995 4.6799 
5.27982 5.99997 3.9599 9.71997 3.9599 4.91988 5.75998 9.35995 5.27982 3.35999 3.95987 3.35999 
5.99994 6.12 5.27979 3.9599 9.71994 6.11996 5.27982 9.71994 6.71997 3.35995 6 3.35995 
5.27979 3.95987 0 ]xsh
379.079 712.08 mo
(irchhoff d\351fini dans la )
[3.35999 3.9599 5.27979 6 5.99997 5.99997 3.8399 3.9599 9.71994 5.99997 5.27982 3.95987 
3.47998 5.99997 3.35999 9.71994 5.99997 5.27985 5.99997 4.6799 9.71994 3.35999 5.27982 0 
]xsh
89.9997 734.76 mo
(configuration interm\351diaire )
[5.27979 5.99998 5.99998 3.95989 3.35999 5.87998 6.11998 3.9599 5.27979 3.35999 3.35999 5.99997 
5.99997 3 3.35999 5.99997 3.35999 5.2798 3.95992 9.35994 5.2798 5.99998 3.35999 5.27979 
3.47998 3.9599 5.27977 0 ]xsh
229.56 738.96 mo
238.44 738.96 li
@
229.56 737.4 mo
238.44 737.4 li
@
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.98676 0 0 -6.99096 0 0 ]msf
239.76 728.52 mo
(e)sh
true set_gvm
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEY+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Pi <1C60D8A8C9B6F576984E5B3D4A947750CB609F6A2945BF73C974F5B012C
350C4B5B8D6349907E853F6769774A1C4CD95C054C77D989CB2FF9944797FDDF
866F41EE53A6B42367C65C1116498AA46E82B11D9004EF82E4027B709490424B
4B5765788434AEF9231F48F7A3A4E46C63230EFCCE9C2E2FB7500C0416D9B6B7
111CE4B095E3DB0A8F9CFD5031A0D207E87486CBE7C8E0586737C5EC2262802F
4A01486283836D7FB07142CA6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEY+Symbol /Encoding get
dup 80 /Pi put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEY+Symbol*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /minus 15{/.notdef}rp 
/equal 18{/.notdef}rp /Pi 20{/.notdef}rp /epsilon 13{/.notdef}rp /sigma 99{/.notdef}rp 
/dotmath 40{/.notdef}rp]
JDBYEY+Symbol nf
JDBYEY+Symbol*1 [11.9775 0 0 -11.984 0 0 ]msf
229.32 734.76 mo
(P)sh
JDBYEW+TimesNewRomanPSMT*1 [11.9775 0 0 -11.984 0 0 ]msf
244.68 734.76 mo
( s'exprime :  )
[5.99997 4.6799 2.0399 5.27982 6.11996 5.99997 3.9599 3.35999 9.35995 5.27979 2.99997 3.35999 
5.99997 0 ]xsh
171.24 307.44 mo
449.64 307.44 li
449.64 151.92 li
171.24 151.92 li
cp
gsave
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
^TFR!z!!!*$'2>%uWj/>1ZE9n7s855=9E5+o!!!B,.WWT4p[hm%IPN,J0d\4I/gq82%fc\3!rsVI6*KZ
"s7e2]2ZO!]!XVI!;!.1Rk,Sdh(B=U=z"YXuuH-3Cf!!!0&)d06Bd*[9-Sk:7./g1N$#lk#,!<<Z20n7
XWs7oJ^<<W@&!s(:[8B^cms5kI5/cZ%T/L)J?KP5!-NcoF_!YA?3<oqqRg5uR>&-)h5%LWXE=$o@UWfi
08Z]p2CO^V;sQ?R9h,9%R%Jn\g+RquRI;B-MR1&q:S"pG/17lWF-WKW-8Hq6U*6OO;&G$J5T>UCWp;aa
"RDHg9ILN@MT(_RG]HY@($Q%FN?TTG..CfFC9X-/EB7Q3:,3%QT\\"8\&E',uXWh#N'\!DkU?r'Q!FBh
uQV0Hi#3\;l_SqMMI[\&e4L/UbJZ_!G0UNp]"AhYb9UPsgl\>,FNQtTk;X+PRLEElWLZ(@5.XG2$[P&t
^b[%NY39+qp<APZ)&3X#ZeIV!!qZ_<V5[$-5C;&C,MTQ4`a\#5[aYaU_kJ5&H5Z&=&r[?ZGE\Xnq,[[2
eTXIku;Yc"(cTlk#e\!W%[Wh5T%64=2$QYBb9\Y,+4\##LTZAsN,XFtdP\<r.\W-rV3\=]%9NET6a\"A
n5\>#=H\!i4b?n*K'Y(q9]\>5OTVg<;-\=&=gY(_0\BN.n2\=J_$\!r:dZAsH'O'YfjWdo(<\>G[ZYDI
QdQ[!NnZ]^#<\Y>FKPBLpd\"oO^[?lVL\=f"1UNUAm\X\Og\YGCCP$h>s8N8U.OEGR`@P&u.\=f+<YEF
K0\##LV[#p&<Z&O6#\"fFVU5=F`YDIZj\=o+7XFbUL\!`+^\!i=iZ]Ki6Xb1gPE*HKK\"K";Z]Ti4[[2
q][\fIVKPtW>+;l$s\"K+EW/?*hY+hMMd`m?4_NeU]G!6N=&-)e4#W[J:MnuHrg=CS3LF3'%zrq98_E@
<481GE#5>d<-cqtaPu@13,9l/ll0N]n]g0..V;(]j^<!rsnQ7DnmS!<<i73/uo-!WX2?4.bLLs84f"5l
_#f!sCUa9?Zors6D*F1B7OX!sLjg9\8`.qpuSe-3+5MON!fkaE8g33$UHa9lR6GWm-<jV+C[f"TSQ'"!
D.TA_G+boC$:*C_QjLXfnM3\$;L6h6gZSIR=\I_T.D+YZW4Ps7T,MC*P,,!ZPMI?f'%^Q%=E<^TFR!^T
FR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!^TFR!~>
>>
/CSD add_res
/2 /CSD get_res idxcs
clp
[1 0 0 -1 4.78785 652.654 ]ct
[278.4 0 0 155.52 166.452 345.214 ]ct
snap_to_device
<<
/T 1
/W 416 
/H 233 
/M[416 0 0 -233 0 233 ]
/BC 8 
/D[0 255 ]
/DS [cf /ASCII85Decode fl dup/FlateDecode fl]
/O 2
>>
%%BeginBinary: 1
idximg
Gb"/lpRg51'u3%HB+c.9"]>a8-%X!@PLso'(?^nKo4bT__()osTC&tGQGh'7cB(#_foQ3R3.N0*jq'lC
]b>]`ke/>8hL"E]5U5ZrQdMsJk,n*#J$ShBZPr)/pL^4H,E7X)#_F0)Jfk>N+:*QA#_F2:_NL`C&OK5V
7<UbSFI"Mnc[A;R:H_Eq4-4PZ5N@4eQe_ikRkrAOq]+:+5VcL4J-S-k%u(Wpc9:V^%iua>a?sOJ"%h\R
$Qf"\fkj![\aZ>YX(8\j/%*ogOPPRU\G24ECLsu++3M/ff8jd1h$PDJooWd4j2=FZ!tfD!k4Mq*-RR1N
7+A>LHtpN0W;L<Y7IO)4HIVo>gi$l3)`e7RkR<0;L?kUK(a^\ej_/^`2.Z/B.70^1fakL=/F=_;<Kil7
]i0VuO*YmrF<LEWe<XthkssG!':Gu"A,Bsn_lVgM'\IqV6KbZ=M&9Xu3!VBf<84R<R]7icr1]pc2:kkj
),GPd==<5'3gXafk_GV3P37+m0.H.!1ge8_Z>F]"+?<6R7V6>;"3ch'l?+n/aQed%Na$TfFeU79g!h='
P.#eZc<7@&!TZaf26H(N&pQ/nM6@d\0e>hXY`2.eCtl@EY%Iik+3!Z$%Z]!UfQ+Ri7P0d*c+71d7V*eY
3^EU"_I6qGcRj$p%CN.jCl(5T,,#+SO5m)X*!l@T!iVp'=@_*=a#nNg11inF+2n^"JCtO+86?.q?,mQ/
-IU7dguIEM,l,i&*C#/nH4<X%,]Nn-+,*pA:/1-L3n#5L-nQ[")^(Id"b[j5eYbIi$!1Brp,YlrVRZJ"
rP5[!T]7AZ'Cob^nd9m!^1u!H?LQ5spmKmMCL)W5O&E$fHc[7<IoAb^A[X,3FNW-/kfic2IZ^8Efpt45
o/`k!3Rs^MU'VGtdiS-XKgLR2NtXS/GRYmG3MsTm$!m`TkTGbI-U&sn3^nLBL5mp"33ud,RbdTL?!fhS
K[+.ME>b0n3/12'e#k/@^`oSQm%O#sS`J-Kh%.QQd9>[h.EB>-A<j]KmI`MVIV/D0:9E48F&%t,Q:/(X
1Q^ku:?Yq=4WiolEr7KTHh()nnN!ojh<L$O:0]e#]fg3KmqHVr)=ssEqRQ;\1:Eh$"ahtFqWpA#%CJ8!
1@g$Q(?\GJ#&O*a(A;$`_"m[4#<uDdKJH?E:+)T=SnmXu&1.$4&it_qB]usUY22sLhWLhLfMT4G<2YMY
hMV;0h)RV?Z]XLM)`eWpr7&AP2es"Z:-^Ig9NrYcH=59k\;Vt'Id$:j@g6Smi^EIFa&AN3&fE8Tq?_oe
%mPB%JJThom\ICkd3o@"&10V;In%)3WnNN>3"oL)qjCb/$%5e>kMW%H4o:!/oJW'+)q)Er'cJ;2q3esZ
N)-;*5<qFQY^;S9_%8NVNtXPZBGEZ+&OV2:k!q'XEr<G@j8BAaa<Jf'06GR%>giQRTn@gTP2bXbcOGR<
qN4Ffch*4CS!f.`L43YFolKWlo8h,0J7X0>rJ2W`kNGVnI*iqor$hISKCA!]i>3U+Wo.%XbTB2:6Kn:1
L<]pkT=n`]Y$0U>1PJ-n"JN`mB7B9k/$;?'Jl$*sTi:<5L(7G,#uUfX93uoi^@j&2%u-*H)V]GkHn6lp
e'I+-SfJY/ic+2qVci2lGuha+$$ltMf_iC`^J\B9*?5Oi@"JP-/:MKIk5,'DLEq=q,5Di*Q`<4NJ;LA@
.eL(:nlNJEp/V'.$2p)9[e?`:cRl=amX2Y(V8)5l,gg1]7=Jq6\DKb?K",rNDf!J#rHP$rJpmj-+ZVAP
pTq*m27Eb^M!.>?N..Lt]]_j&/:J?eJ*hehbrkh77'Rg]FHYsBd>oCWr-262eNI(@rKJSZ:TrA95LRXH
'3[YQI\`+f-Sf's5LN*qF7Anh%rB?n+,kXOOlGPHd8F<C,EoX0K85KEZ%_)17F=n&U4-bjr9IMJkKo84
6@QKR8=8O8d>oDt5Q1]s-9lSMqSE!pEd3&MCTiWobYPFWoF:b9%caH4e5(2R<KWo5A)rVt5H>(gP[q\$
%_qh"83LFbT0_cTd8)b@Dg?-*PW.4?i2+*MVZcWpn8F5gN6Cil8LZ=h@E*WrakI]r[k"J17mChb0CN?@
1L!io4SiJ0o^X%-5=]X<a#g?%Jk&%Z7,N>kjMtQ*<Sc(loM\$Q]iY#YNkW\BWE%d&?hBP?]jp5-o]C7e
+28j/rJ3afGO.0o3I^m(?M#J$PXi2np^*5VU*!etq?_oeq@O!sTD-"mpfOV0*rUngfT-\,mlM<RUX5&E
MYsut:<NM;oHT)q5>LFtQE`W`69dGZRR<+-TH4^*7iGNZ,0tj25LN*s'3fg;I\`+ckPZKY]g`&$a<T[,
g?WVtO'_m\+)+.A\@p/s/G!rH7grfjh-PkNrY5<e_=t9TH`u%0nPeDA7F=mP>sI:o`*tqMa2mPghSb%q
no,[&H78>8p]<[eP]pDecUUAfH)NOJn[2H/IV@qEqq=p>PCrSF%ipJ0]up%IFm-?.T1mb:jNch]7C2nk
+$)%<-QR'Qk4Mq*;hiSsI^k&k$i3H4#p$M,@Ipgt:[#<]T*.pQm-OF,%"@@%55Z"Q&%"ej0d?:HKmpNr
$Qf8"M3d]Jq%<-JGk;ZB`(G=HrJ5`Y!mY]hgc?4#c:"NO@BWPDp^(>SF=$T)n-pZ,-\0IfPgD@NTUu3"
5C;iE6=8T%IKGE*bjF9[d>nTN'D`"`n2&bT)b:/8r<23XOnA2coFm>R7nW!TTV$`c5;M,CKmj)$rQ#?e
(\AB&ib*a\k\);=Hfuh"mUpS6j.@_.*Q99dhp[O5!ht.@B#qF?,N!/JoHT0RT?/\N2fE0H>>u,IEGQ<b
$1RmeNK^J<5uFD'LsE8"kU41;_\tQG[PtJ>iRfLL'0uLMLCU.Xs!78IE,63a$.prP*]dRXmXDstT8IFC
L(^3?;'X"WFK=kY3t^[4SGS-37d1:TK9/P%3dPdp8u!$IQ?VX"#_;jjI)jgU!F.iIJFLrs2ZU'(97HZg
QL#C&oqOU$[q^Dt1_"(o.]ej_"/p[U2LrVJPOI$<$W-d%3&Dj)MK=sM>2$h!:d<7XR`Lri%\ZN;UVQMs
!>lfdR"R;m2?9VH\hc=-5.%05+TfsrW'WcGW=cknVBqlQ:1g5Sk_F?)4D0(7@1^;`7&9m>I[m3P<q^$U
63m@0H(,'&V_1!+`)*:R61Fg!Bl3*9VI=S7%0G^JSuuH^*tOb?%F#D8WKMbk+Gsb<&ldh#G5:rN->7<K
F1@GE]j)=m+/-8d'i+EOm[5R%Q>m6@0rGJ&5Je%)BuC8YmK]ndXruS<KC+HZJT=sB#o1DUj8nYG@7%Tq
M;em%Hhp#$,NAV@%!OSJO??:=qJ%&?HJHJK_c!Y`Tc/Sd_"BZMUu=/Zi&?UIl:5V&LmOqee-XGr#cJi1
Y#D80K,uZVF3APWrQs=HG7qFpmP'jRPn6>Jmf()lH3,plj%+qq\-)B`##B;"Ea'&u?*"5+ETn56EI4:c
j:]9!\DnH9<$(\Ir$]Pr#*4Od@ZbuU\(X.D;;=:Z,>IZ;ajQBoV`t'I]:=B9mHP,]o&JD;lYc3n\GNVX
Im3W&03#0:>WMh907N0/?hs!=keFfN!ibpB28jR=FMQSX7X*b$BA^#V?iS.0kVp76cu4g"gYZ/ElFYsF
r:J8h@bUclkWV@ds32P<LtER_\`_i<s.J(?E8okMeu\i/O+."jhZ(3Bg@]oL$8DE83pi<*Occ:8m,u-^
E"h#/EVD,9p$:N5p347^5#T%BLfg4rM?*KeF=cm6lU:U"5Q&q)lq`,6C+J(!pUn8&^]*WhG==a`V?83'
m,VhGaW<\Io:sr\:JN*B03S.4Ih"pAF3hNIT9AoYdd$6<Z0JITGX9RqiW8VF[d*i5F;!tH[_15P!p@FY
<j'U?PL;5bTp''O\uL(gWKPIk2ul1#Wp70(q(4PuZn-Y%)?9R-kif"Dot(rIr9(h1en4q^o+ONBotNn-
lQaqUa%S<I/Np_9Go$AUg#nUW$90kBD^H`,;XVk(oj^D>(j^$9n)Et4_oWfk_['hd['Bl"IS@XmdS)dm
rXLYtQ5pP8&#*[h5sHK*A/AdM+5!5.fUs>=THDgZ+5!5.fUs<OUttXA%bZ1fr)?boJMMJ#IUIeW@"Wo9
K773\IUIeW@"Wo9K773\IUIeW@"Wo9K773\IUIeW@"Wo9K773\PGJP:+:*QA#_F0)Jfk>N^u55#=3%`
~>
%%EndBinary
grestore
np
1 /1 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-BoldItalicMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-BoldItalicMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 49 /one put
dup 70 /F put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 114 /r put
dup 117 /u put
def
/FontBBox {-547 -307 1206 1032} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD75DB9092FB01BBE833F55BB0B9375D47E84
581C0C7E888E7865A7> |-
/space <1C60D8A8C9B8707C25> |-
/one <1C60D8A8C9B7A73DB6FA486033F8090C7BC31C00403E37AB4D7EF81CB7
328EDBFB190947CC9711837E1DCDEC8A22E3167615E489AF92F73909AE811E7F
7AD2A3CC89F49EDEB804A1B0C671D1DDAE3C2FBDB93A75A564BF0BF88105EBF6
3D9E4045F5320885F24FD63DFBF6F44C0D5DAC47813C99AC56E4491B140D42> |-
/F <1C60D8A8C9B64EDFFB05CF3B276E31DDC3F0F0724602FFFF66FCFAAB7A51
CEB8E6166379686EB2EA0E7F12C1A6F7E46862E80836960BFCCF81E2E40A353D
A2420B32D9CD1EAA7CFC4CEF4BFA56B2D5865031AECBAD230A9AE7AEB08E61C0
C8DAC4B24CC5E734D26E7CA5BD438FC6D5FF2309CA55DAC5AA647AC19985172F
D1B88E1DCD09C066C4800ECE315F70233E42C3F15DEB4B6B07D1D0725891E4AC
F1DFC156964FBC55AFCA867EBE29B140D3E78AD560494BD38731CD804F0F8BF7
3D1769> |-
/e <1C60D8A8C9B77FE2CE91319F7D338D756C1E9B4908A37DB9D8BC76A8097B
4ECE0530880DEDEBEB2EC13B2E74DD427D38D23345FEC35CDE01D62199655DAA
6BD6A323BD5F32D058572DF5EB3EA71008324501D61DC8CE0A53A0EE5C67394C
AC9A78CAB8B35A9D875A6ACBC5404DB8C5B2F78D37F38AD7EABFB1AB97A2F213
DD4FD756803DB6C18BB232400BB7AE962F6F11192C6DD72C9B60BC5694F8FF9A
002955889A3629AD58672BA314D85E3CE9F54BC9999F3BA9D124FC72E205E5FA
A01734AC76F87554BA68AFFB75DF82> |-
/g <1C60D8A8C9B7A73DB9D5529D03022A8A942CF5A34DA26C88EAA6A5BC6D95
61EE655DDFB3684D14F07C654D0E951AB40C2C175CD7E9B49334C28739343BB6
C9390F869CA25DB155DFC93F82C6AB60A7EA40CD3A643F8AE2DD8B2055021674
5B912F12AD89B44B6992E633804644DC75E975B7C20FB9FA723E02076D0FF49E
92D781CA86FCD58F54FD9747B3E3F41A0FD555183D87F7E7444B3EF3F12F5F8A
5455FBF9E342485CC6454AEF96E96EB3DDC02F95191546AEFF28C8AE3A3C6839
3CA80859AFDF27856BFCB2B6CA3739D5FDD3C6EBD935ED4BD1F311481501774E
81FF77E6E5202D3FB1A1A7E28E067130554B375A9E92CB5FA677063E33B8189E
026811F9B75801ED3E85B7A7434A2865330BA09AE5CB446233B48D9A0DBA4564
A97246EB553D7DE80A54F37F4B29364312FCB4E3467558C34D70AEA8F15B8471
6325C3E59E1881983F26E450C9A394EA783AC1F2E98D070A924DBFA584AC9478
E37E08396DE049FDFC535EFDEEA66590BF192F26F90DBDBAB0D6> |-
/i <1C60D8A8C9B854D0F4771F7E8F7EDEC16B72A6AA71F380D97FED60E02EDA
3B51F939532F9801CF91AF478DE92B79D440F5376609D3B961685D8D7730A054
52EE8FF20E40FFF41679D4A76A6DBFA09A0669142E885A9F5927479EB4BA3710
EDDDFCF4316A5B48ABD359A85750AFA480865E520B20D7475E0665678F5EF7A5
5636046D100FE984A70C11B8FC1E7C18D2F0DE6FB416632007F17C86DAB776FD
84B5F522D512D9D812AD42561C145DDBC3661E42BEA711E4880B69D0> |-
/r <1C60D8A8C9B7361F02C23B46795D72653910CD93921A6FDD9CDDEAADC972
AB982CC5D8D3B5FE867CBBEEFC619F5A1C2B4A972B9FED9EE648F895E4E074EC
08EC6F22DFFDDDA4FA3BEB19639C658B27FC38CEB153BE4CD37CCB1259210F03
A26F252BB05ACC7AD073E089DF5280B37883152B560576F11E3FF437ECA5369F
BCC569CCCDE1E70144D40303ECACDE46325D1661B257361B9E51262D3B37B2E3
A6E5> |-
/u <1C60D8A8C9B7EF322B88F691AC5309AE7BF355D9914237A10CBE825B0416
60F2E00F1D6F6449E9C4D37B33D82782E56A2061AF3F4B99728F4300045677A6
67C6B44D067D4BBE518ACD173193A4B730D7E0A186CB80A1F5693C25BFD074EA
62C423D918DC4B92BBD1197B331986A8207C4A37FA765AF66694265A4C20F14A
2DFC23E19580E6396EBBFCEABF7F3940D96F73AA0CF53898108F7D38E903E24C
35CB2243AC608B6BBBC21DD600D7BD34DD026E693995D5CA52C4DEE7090FB81D
504C09663A5A6C0266A634ADF70DA362EA346EF398A0EC39EFCF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/JDBYFA+TimesNewRomanPS-BoldItalicMT /TimesNewRomanPS-BoldItalicMT findfont ct_VMDictPut
/JDBYFA+TimesNewRomanPS-BoldItalicMT*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 20{/.notdef}rp /F 30{/.notdef}rp /e 
/.notdef /g /.notdef /i 8{/.notdef}rp /r 2{/.notdef}rp /u 
138{/.notdef}rp]
JDBYFA+TimesNewRomanPS-BoldItalicMT nf
JDBYFA+TimesNewRomanPS-BoldItalicMT*1 [11.0334 0 0 -11.04 0 0 ]msf
115.2 319.32 mo
(Figure 1)
[7.31991 3.12 5.52 6.11998 4.07991 4.91983 4.31999 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CD03427A73DFD089415930F81028DE1ED47503063
97EBD9434E1A3ADDCEF4FE8174B07E1BD825A3A08C076C5401FD2F25440DDAF0
64A18F9D172DE3F221930B701B5AA25FFF87132E98E42DFB54AD8C5E278B78B5
B2B627FB44> |-
/period <1C60D8A8C9B8707C905F20AC65B0724ABD4661613FE1888BA57C3AB
275B36362EB4C0B6CF31618BBDC4ED0090833127FB776362E96CC63F273D95FD
A0687B0A248B64B3ED1> |-
/colon <1C60D8A8C9B81F2C3AFC3A227BC9DF5DFCC41A108CEAFA901EDED5BA
39E46D52ABD12E09CBBBBE1362C463AD251A498FCA5334BA3DBA0B984845BC18
9FDB3066DB7ECBEA5EDC03A10321FC74EA6B1843C3D9DF4C052ABB01447AA9FE
4CE7FBCAB03E8C65F67B82209CBA68CC6D89BED29C3EDD9DA557AF8F6A69C484
B315A595D55A78B8> |-
/f <1C60D8A8C9B854D0F4B281B42A092C6FF82395F80A15D2C3C12DDA8BD3AD
36E58B3AF910D2B8ADA6BC1C30137D0B4DF4FA4D59FA1ACB53459B7EC4AE089C
AED0AC91FA3467AFFE9A61F305EA6974A5E976D616D1A9D4FE32401AFC4C8256
E9DB7E7DA19A9590B8444669A02D969F9D7400113A1B0796FD928E598C3B7A80
D1D6A9C40F81F2F1E3C4D5AC7B233A0790585320A08546F89329AA00FD4D5E1E
75EC59101B6580A1509A78E0540D10213C525ADA794DAE15593AD445E59C9538
B4450ED729467A46BE6AB3BFA02A1FB3F6390813CCC3D99CF1B2B175F6DCAADE
66318988F9151791D53E6E4751A470A643E004161F0D3039A05AB8CF9D511D61
3F018EA1A7F7CD3D271165C92B396D85FCFE742D3DF0EDB5E2862C16D937DC> |-
/g <1C60D8A8C9B7A73DB6A115BACE7F487489BC503E16B9751BF18C6D7E42E0
6D2B7B1F089430E910A6253B6313C5EA899502D0D121C470848438F2B8A71B5D
102A13A82BD9E44627438E3D68944BDD10ECDC0CB5CF4D8C3CE72AE1E4BFF19C
4AD2BBC40F4E759C4D3469F3463BC36A69DB81E986C6811A83D2812B0E9989EE
680E8FEF508D5F307F1ADDA3FE5EB69147BD10417CE8BE6F7177827A708CCE4A
28BC62912C8577C9FCC2C284820C0D4D78BAE839F58F949E2DCA0357FDD18F3E
FEE894B48915C73CE679A1EBF63CDDD4819A9767EB909F9DC12CA2F1D6CF19CE
DDE14B260F16CAB8A1EE3C950BEF869CBEC21279DD1ECA7716492A81BD8B8D06
866B8145EA1E6F3754CEA3866CFB87B96A4D9E3A3656624F81275C91FDF7BA93
5E72F2A99C4EB25B2932A91C38CB78223D5AF70EC16B0EE27DA71AB9D0143E2B
2353D449A80518254D9FD55CE939B6FD0F1324A9AB14FB43BC87B748F7C154DE
3E1DD70C3E7F> |-
/acircumflex <1C60D8A8C9B7A73DB68C06FC199F1F2F20B1C2E3715651C87B
CD4ADD68775B4647B129144EBE49EAC15F019B26773F428CC0D1BB4A6183FD1B
AD53C3DC7DC1778E21FEA13949F179F397E1068E68EF5BDF24BE0DC7557B673C
23D4A50497DF80D9C838AB9EEA3C59483A8E7BD334D2361BCA7F19AE87B1D972
F7B79ABAD07378C084886016D514CC545EA1F4A9EE8851A3C3F902C0F0DCD2FE
E069D9BC213BFD5E5AFCA4D73D61283DE2191744FD94BBAE1E2CE71F1DD86C92
81938B96442B456E7FA2EA8852C51CB5A9C2A0AFF4A5706E78B9A6A93AA2E149
14A3A3355D7AE853081C2D03136A9EF5740FB4829DE86B19DA6A0B858F7B0498
8EFF57C077D1FAAC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 44 /comma put
dup 46 /period put
dup 58 /colon put
dup 102 /f put
dup 103 /g put
dup 226 /acircumflex put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 4{/.notdef}rp /comma /.notdef /period 
/slash /zero /one /two /three /.notdef /five /.notdef 
/seven 2{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D 
/E 2{/.notdef}rp /H 3{/.notdef}rp /L /.notdef /N /.notdef 
/P /.notdef /R /.notdef /T 3{/.notdef}rp /X 8{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /v 2{/.notdef}rp /y 104{/.notdef}rp 
/acircumflex 5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.0334 0 0 -11.04 0 0 ]msf
156.12 319.32 mo
( : D\351composition du tenseur gradient de la d\351format)
[2.76001 3.71991 4.31999 7.91985 4.91982 4.91982 5.52 7.91983 5.39999 5.51999 4.31992 3.00002 
3 3.11998 5.52 5.51999 4.2 5.52 5.52 4.32001 3.11998 4.91983 5.52002 4.19992 
4.91983 5.52002 4.31992 4.31998 5.51999 4.19992 5.52002 5.51999 3 4.91983 5.52002 3.12 
4.32001 5.39999 4.91986 4.31998 3.12 5.52002 4.20001 5.51996 4.91983 3.12 5.52002 4.31989 
7.91986 5.39999 0 ]xsh
398.76 319.32 mo
(ion : configurations )
[3.12 5.51999 5.52002 2.75998 3.71991 4.32001 4.79984 5.52002 5.51999 2.99997 3.12 5.52002 
5.51999 4.19992 5.52002 2.99997 3.12 5.40002 5.51999 4.31992 0 ]xsh
115.199 334.8 mo
(initiale, rel\342ch\351e isocline et actuelle. )
[3.12 5.52 3 3.12 3.12001 5.39999 3.12 4.91982 2.76001 2.64 4.31992 4.79982 
3.12001 5.52 4.91983 5.39999 4.91982 4.91983 2.76001 3 4.31992 5.51999 4.79984 3.12 
3 5.51997 4.91983 2.76001 4.79982 3.00002 2.75998 5.51999 4.91985 3.12 5.39999 4.91983 
3 3.12 4.91986 2.75998 0 ]xsh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
160.2 233.88 mo
(C)sh
gsave
168.24 228.24 mo
172.32 228.24 li
172.32 237.24 li
168.24 237.24 li
cp
clp
JDBYEV+TimesNewRomanPS-ItalicMT*1 [8.03532 0 0 -8.04 0 0 ]msf
168.24 235.44 mo
(0)sh
grestore
288.12 229.683 mo
299.28 229.683 li
4.248 lw
gsave
[.114802 0 0 .125197 0 842 ]ct
@
grestore newpath
JDBYEV+TimesNewRomanPS-ItalicMT*1 [7.47144 0 0 -7.47564 0 0 ]msf
295.92 244.8 mo
(t)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [12.8085 0 0 -12.8156 0 0 ]msf
287.64 241.68 mo
(C)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
421.2 218.28 mo
(C)sh
gsave
429.24 212.64 mo
431.64 212.64 li
431.64 221.64 li
429.24 221.64 li
cp
clp
JDBYEV+TimesNewRomanPS-ItalicMT*1 [8.03532 0 0 -8.04 0 0 ]msf
429.24 219.84 mo
(t)sh
grestore
263.039 140.64 mo
271.559 140.64 li
4.192 lw
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
263.039 139.2 mo
271.559 139.2 li
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
284.759 140.64 mo
292.798 140.64 li
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
284.759 139.2 mo
292.798 139.2 li
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
299.518 140.64 mo
307.079 140.64 li
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
299.518 139.2 mo
307.079 139.2 li
gsave
[.123664 0 0 .116336 0 842 ]ct
@
grestore newpath
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
JDBYEV+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7D8BE19D38CCF292DFC046A81C46904D6DBA45C92F5D70D3F
6EE199C42E4A4C9B3B0D87C6E3C2EDE67CD75D9ACE82154AD3064B8072C730BD
5E33CCE728F682C21B15C05744AD9C71CFA42728B71E17CDFE99F456763B119B
A3FA610548CF33938B2F236B852C1938DD05A18BA75E2CBAAEE0B3BF3055B956
ECB1A81C46282785CBAC883541E9D58F06378B9B39109988D498391B51FF826B
82A0206DB5AB25618DD21E217BBB77AE2DD83767DEE5C5D18C6FD1A87CA361B1
1F32974B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JDBYEV+TimesNewRomanPS-ItalicMT /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
reset_gvm
/JDBYEV+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quotesingle 4{/.notdef}rp /comma /.notdef /period 
/slash /zero /one /two /three /.notdef /five /.notdef 
/seven 2{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C /D 
/E /F /.notdef /H 3{/.notdef}rp /L /.notdef /N 
/.notdef /P /.notdef /R /.notdef /T 3{/.notdef}rp /X 
8{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i 2{/.notdef}rp /l /m /n /o /p 
/.notdef /r /s /t /u /v 2{/.notdef}rp /y 
104{/.notdef}rp /acircumflex 5{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
JDBYEV+TimesNewRomanPS-ItalicMT nf
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.8163 0 0 -11.8228 0 0 ]msf
299.76 136.56 mo
(P)sh
285 136.56 mo
(E)sh
263.28 136.56 mo
(F)sh
JDBYEY+Symbol*1 [11.8163 0 0 -11.8228 0 0 ]msf
294.72 136.56 mo
(\327)sh
274.92 136.56 mo
(=)sh
92.0402 415.92 mo
98.8803 415.92 li
4.224 lw
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
92.0402 414.36 mo
98.8803 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
113.04 415.92 mo
121.68 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
113.04 414.36 mo
121.68 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
129.36 415.92 mo
138.12 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
129.36 414.36 mo
138.12 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
164.881 415.92 mo
172.921 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
164.881 414.36 mo
172.921 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
180.601 415.92 mo
188.28 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
180.601 414.36 mo
188.28 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
201.121 415.92 mo
209.161 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
201.121 414.36 mo
209.161 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
216.84 415.92 mo
224.52 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
216.84 414.36 mo
224.52 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
gsave
161.4 397.68 mo
165.48 397.68 li
165.48 415.8 li
161.4 415.8 li
cp
clp
JDBYEY+Symbol*1 [12.3993 0 0 -19.2187 0 0 ]msf
161.4 411.6 mo
(\()sh
grestore
gsave
225.48 397.68 mo
229.56 397.68 li
229.56 415.8 li
225.48 415.8 li
cp
clp
JDBYEY+Symbol*1 [12.3993 0 0 -19.2187 0 0 ]msf
225.48 411.6 mo
(\))sh
grestore
235.32 415.92 mo
243.001 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
235.32 414.36 mo
243.001 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
260.16 415.92 mo
268.2 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
260.16 414.36 mo
268.2 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
291.721 415.92 mo
299.881 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
291.721 414.36 mo
299.881 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
307.56 415.92 mo
315.601 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
307.56 414.36 mo
315.601 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
337.8 415.92 mo
345.841 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
337.8 414.36 mo
345.841 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
353.521 415.92 mo
361.201 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
353.521 414.36 mo
361.201 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
368.881 415.92 mo
376.561 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
368.881 414.36 mo
376.561 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
393.601 415.92 mo
401.761 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
393.601 414.36 mo
401.761 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
425.281 415.92 mo
432.242 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
425.281 414.36 mo
432.242 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
450.841 415.92 mo
459.001 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
450.841 414.36 mo
459.001 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
466.561 415.92 mo
473.521 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
466.561 414.36 mo
473.521 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
488.641 415.92 mo
496.681 415.92 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
488.641 414.36 mo
496.681 414.36 li
gsave
[.122728 0 0 .117273 0 842 ]ct
@
grestore newpath
JDBYEW+TimesNewRomanPSMT*1 [6.99564 0 0 -6.99984 0 0 ]msf
501.84 405.48 mo
(1)sh
406.92 405.48 mo
(1)sh
381.72 405.48 mo
(1)sh
320.76 405.48 mo
(1)sh
273.36 405.48 mo
(1)sh
248.16 405.48 mo
(1)sh
143.28 405.48 mo
(1)sh
JDBYEY+Symbol*1 [6.99564 0 0 -6.99984 0 0 ]msf
498.24 405.48 mo
(-)sh
403.2 405.48 mo
(-)sh
378.12 405.48 mo
(-)sh
317.16 405.48 mo
(-)sh
269.76 405.48 mo
(-)sh
244.56 405.48 mo
(-)sh
139.56 405.48 mo
(-)sh
JDBYEY+Symbol*1 [11.9775 0 0 -11.984 0 0 ]msf
483.36 411.72 mo
(\327)sh
461.4 411.72 mo
(\327)sh
441.12 411.72 mo
(+)sh
414.96 411.72 mo
(=)sh
388.44 411.72 mo
(\327)sh
363.6 411.72 mo
(\327)sh
348.24 411.72 mo
(\327)sh
327.96 411.72 mo
(+)sh
302.28 411.72 mo
(\327)sh
281.4 411.72 mo
(=)sh
254.88 411.72 mo
(\327)sh
230.04 411.72 mo
(\327)sh
211.56 411.72 mo
(\327)sh
191.28 411.72 mo
(+)sh
175.32 411.72 mo
(\327)sh
151.32 411.72 mo
(=)sh
124.2 411.72 mo
(\327)sh
102.72 411.72 mo
(=)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [11.9775 0 0 -11.984 0 0 ]msf
488.88 411.72 mo
(E)sh
466.92 411.72 mo
(L)sh
451.08 411.72 mo
(E)sh
425.52 411.72 mo
(L)sh
393.96 411.72 mo
(E)sh
369.12 411.72 mo
(P)sh
353.76 411.72 mo
(P)sh
338.04 411.72 mo
(E)sh
307.8 411.72 mo
(E)sh
292.08 411.72 mo
(E)sh
260.4 411.72 mo
(E)sh
235.56 411.72 mo
(P)sh
217.08 411.72 mo
(P)sh
201.36 411.72 mo
(E)sh
180.84 411.72 mo
(P)sh
165.12 411.72 mo
(E)sh
129.72 411.72 mo
(F)sh
113.4 411.72 mo
(F)sh
92.2803 411.72 mo
(L)sh
JDBYEV+TimesNewRomanPS-ItalicMT*1 [6.98676 0 0 -6.99096 0 0 ]msf
475.92 405.48 mo
(p)sh
433.56 405.48 mo
(e)sh
JDBYEZ+MTExtra*1 [11.9929 0 0 -11.9995 0 0 ]msf
356.52 408.48 mo
(\001)sh
294.96 408.48 mo
(\001)sh
219.72 408.48 mo
(\001)sh
168 408.48 mo
(\001)sh
116.52 408.48 mo
(\001)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize A4
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
