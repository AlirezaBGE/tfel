/*!
 * \file   mazars.mfront
 * \brief  
 *   resolution analytique
 * \author jmp,th
 * \date   25 03 2013
 */

@Behaviour Mazars;

@MaterialProperty real young; /* mandatory for castem */
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;    /* mandatory for castem */
nu.setGlossaryName("PoissonRatio");
@MaterialProperty real rho;   /* mandatory for castem */
rho.setGlossaryName("MassDensity");
@MaterialProperty real alpha; /* mandatory for castem */
alpha.setGlossaryName("ThermalExpansion");

@MaterialProperty real Ac;
@MaterialProperty real At;
@MaterialProperty real Bc;
@MaterialProperty real Bt;
@MaterialProperty real k;
@MaterialProperty real ed0;

@ProvidesSymmetricTangentOperator;

@Includes{
#include"TFEL/Material/Lame.hxx"
}

@StateVariable real d;
@StateVariable real Y;
@StateVariable real eeqcor;

@LocalVariable real    lambda;
@LocalVariable real    mu;

/* Initialize Lame coefficients */
@InitLocalVars{
  using namespace tfel::material::lame;
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
} 

@Integrator{
  using namespace tfel::material::lame;
  real e1,e2,e3;
  real s1,s2,s3;
  real ppe1,ppe2,ppe3;
  real pns1,pns2,pns3;
  real pps1,pps2,pps3;
  const Stensor e  = eto+deto;
  const real    tr = trace(e);
  const Stensor s0 = lambda*tr*Stensor::Id()+2*mu*e;
  const real dmax=0.99999;
  e.computeEigenValues(e1,e2,e3);
  // eigen values of s0
  s1 = 2*mu*e1+lambda*tr;
  s2 = 2*mu*e2+lambda*tr;
  s3 = 2*mu*e2+lambda*tr;
  const real sn = max(abs(s1),max(abs(s2),abs(s3)));
  if((abs(s1)<1e-6*sn)||(abs(s1)<1.e-6*young)){
    s1 = 0;
  }
  if((abs(s2)<1e-6*sn)||(abs(s2)<1.e-6*young)){
    s2 = 0;
  }
  if((abs(s3)<1e-6*sn)||(abs(s3)<1.e-6*young)){
    s3 = 0;
  }
  real gam=1. ;
  if (min(s1,min(s2,s3))<0){
     pns1=min(0.,s1);
     pns2=min(0.,s2);
     pns3=min(0.,s3);
     gam=-sqrt(pns1*pns1+pns2*pns2+pns3*pns3)/(pns1+pns2+pns3);
  }
  ppe1=max(0.,e1);
  ppe2=max(0.,e2);
  ppe3=max(0.,e3);
  pps1=max(0.,s1);
  pps2=max(0.,s2);
  pps3=max(0.,s3);
  real eeqc= gam*sqrt(ppe1*ppe1+ppe2*ppe2+ppe3*ppe3);
  eeqcor=max(eeqc,eeqcor);
  real r=0.;
  if (sn>1.e-6*young){
     r=(pps1+pps2+pps3)/(abs(s1)+abs(s2)+abs(s3));
  }
  real A=At*(2*r*r*(1.-2*k)-r*(1-4*k))+Ac*(2*r*r-3*r+1);
  real B=r*r*Bt+(1-r*r)*Bc;    
  real Y1=max(ed0,eeqcor);
  Y=max(Y1,Y);
  d=max(d,1-(1-A)*ed0/Y-A*exp(-B*(Y-ed0)));
  d=min(dmax,d);
  sig = (1.-d)*s0;
  if(computeTangentOperator_){
    if(smt==ELASTIC){
      computeElasticStiffness<N,Type>::exe(Dt,lambda,mu);
    } else if(smt==SECANTOPERATOR){
      StiffnessTensor Hooke;
      computeElasticStiffness<N,Type>::exe(Hooke,lambda,mu);
      Dt = (1.-d)*Hooke;
    } else {
      string msg("Mazars : unsupported stiffness matrix type");
      throw(runtime_error(msg));
    }
  }
}
