@ModellingHypothesis Tridimensional;
@Theta 1.0;
@Epsilon 1.e-8 ;
@IterMax 100 ;

@OrthotropicBehaviour;
@RequireStiffnessTensor;

@MaterialProperty real m;
@MaterialProperty real K;
@MaterialProperty real C;
@MaterialProperty real R0;
@MaterialProperty real Q;
@MaterialProperty real b;
@MaterialProperty real d1;

@TangentOperator{
  if((smt==ELASTIC)||
     (smt==SECANTOPERATOR)){
    Dt = D;
  } else if (smt==CONSISTANTTANGENTOPERATOR){
    Stensor4 Je;
    getPartialJacobianInvert(Je);
    Dt = D*Je;
  } else {
    return false;
  }
}

@ComputeStress{
  sig = D*eel;
}

@Integrator{
  const SlidingSystems& ss = SlidingSystems::getSlidingSystems();
  StrainStensor vepsp(real(0));
  real vp[Nss];
  real ag[Nss];
  real pe[Nss];
  for(unsigned short i=0;i!=Nss;++i){
    ag[i] = abs(dg[i]);
    pe[i] = Q*(1.-exp(-b*(p[i]+theta*ag[i]))) ;
  }
  for(unsigned short i=0;i!=Nss;++i){
    real Rp = R0;
    for(unsigned short j=0;j!=Nss;++j){
      Rp += mh(i,j)*pe[j] ;
    }     
    const real tau = ss.mus[i] | sig ;
    const real va  = (dg[i]-d1*a[i]*ag[i])/(1.+d1*theta*ag[i]);
    const real tma = tau-C*(a[i]+theta*va) ;
    const real tmR = abs(tma)-Rp;
    if (tmR>0.){
      real sgn=tma/abs(tma);
      vp[i]  = dt*sgn*pow((tmR/K),m);
    } else{
      vp[i]=0.;
    }
    vepsp+=vp[i]*ss.mus[i] ;
  }
  feel += vepsp-deto;
  for(unsigned short i=0;i!=Nss;++i){
    fg[i]  -= vp[i];
  }  
} 

@UpdateAuxiliaryStateVars{
  for(unsigned short i=0;i!=Nss;++i){
    p[i]+=abs(dg[i]);
    a[i]+=(dg[i]-d1*a[i]*abs(dg[i]))/(1.+d1*abs(dg[i]));
  }
}
