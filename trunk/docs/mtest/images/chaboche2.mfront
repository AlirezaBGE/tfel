@Author jmp;
@Date   13 02 2013;

@Parser    Implicit;
@Behaviour Chaboche2;

@Algorithm NewtonRaphson_NumericalJacobian;
@Theta 1.0 ;
@Epsilon 1.e-12 ;
@IterMax 200 ;

@MaterialProperty real young; /* mandatory for castem */
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;    /* mandatory for castem */
nu.setGlossaryName("PoissonRatio");
@MaterialProperty real rho;   /* mandatory for castem */
rho.setGlossaryName("MassDensity");
@MaterialProperty real alpha; /* mandatory for castem */
alpha.setGlossaryName("ThermalExpansion");
@MaterialProperty real Rinf,R0,b,k,w;
@MaterialProperty real C1inf,g1;
@MaterialProperty real C2inf,g2,E,NsurK;

@Includes{
#include"TFEL/Material/Lame.hxx"
}

@StateVariable real    p;
@StateVariable Stensor a1,a2; 
@LocalVariable real    lambda,mu;

/* Initialize Lame coefficients */
@InitLocalVars{
  using namespace tfel::material::lame;
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
} 

@TangentOperator{
  using namespace tfel::material::lame;
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
    computeElasticStiffness<N,Type>::exe(Dt,lambda,mu);
  } else if (smt==CONSISTANTTANGENTOPERATOR){
    StiffnessTensor De;
    Stensor4 Je;
    computeElasticStiffness<N,Type>::exe(De,lambda,mu);
    getPartialJacobianInvert(Je);
    Dt = De*Je;
  } else {
    return false;
  }
}

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} 

@Integrator{
  Stensor n = Stensor(0.);
  const Stensor a1_ = (a1+theta*da1) ; 
  const Stensor a2_ = (a2+theta*da2) ; 
  const Stensor X1_ = C1inf*(a1_)/1.5 ; 
  const Stensor X2_ = C2inf*(a2_)/1.5 ; 
  const real p_ = (p +theta*dp) ;
  const Stensor scin = sig - X1_ - X2_ ;
  const real seq = sigmaeq(scin);
  const real Rp = Rinf + (R0-Rinf)*exp(-b*p_) ;
  const real F = seq - Rp ;
  real vp=0.;  
  if(F > 0){  
     vp  = pow(F*UNsurK,E) ;
     const real inv_seq = 1/seq;
     n       = 1.5*deviator(scin)*inv_seq;     
     feel += vp*dt*n-deto;
     fp   -= vp*dt;
     fa1  = da1 -vp*dt*n + g1*vp*dt*a1_;
     fa2  = da2 -vp*dt*n + g2*vp*dt*a2_;
  } else {
    feel -= deto;    
  }
} 
