%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: Presentation 18022013 GT-RIA.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: th202608
%%CreationDate: 27/02/2014, 20:27:17
%%BoundingBox: 84 207 511 635
%%HiResBoundingBox: 84.6393 207.8253 510.3608 634.1747
%%CropBox: 84.6393 207.8253 510.3608 634.1747
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (iR-ADV C5235/5240) (3017.104)1
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A4
<</PageSize [595 842 ] >> setpagedevice
%% FoomaticRIPOptionSetting: PageSize=A4
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1216 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/"
   pdf:Producer="Microsoft® PowerPoint® 2010"
   xmp:CreatorTool="Microsoft® PowerPoint® 2010"
   xmp:CreateDate="2014-02-18T09:00:12+01:00"
   xmp:ModifyDate="2014-02-18T09:00:12+01:00"
   xmpMM:DocumentID="uuid:96DD5032-87D1-444B-82E1-0F471E4953EA"
   xmpMM:InstanceID="uuid:96DD5032-87D1-444B-82E1-0F471E4953EA"
   pdfaid:part="1"
   pdfaid:conformance="A">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Caractérisation Expérimentale ET Modélisation DU COMPORTEMENT Mécanique DE L’UO2 EN COMPRESSION A HAUTE VITESSE DE SOLLICITATION</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Salvo</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 39 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (39)]
[/TrimBox [84.639221191406 207.82525634766 510.36074829102 634.17468261719]]
[/BleedBox [84.639221191406 207.82525634766 510.36074829102 634.17468261719]]
[/ArtBox [0 119.29 512.034 659.29 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
84.6392 207.825 mo
84.6392 634.175 li
510.361 634.175 li
510.361 207.825 li
cp
clp
[1 0 0 1 -207.966 119.29 ]ct
0 540 mo
720 540 li
720 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
0 75.24 mo
720 75.24 li
720 0 li
0 0 li
cp
gsave
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 207.966 722.71 ]ct
[720 0 0 75.24 -207.966 647.47 ]ct
snap_to_device
<<
/T 1
/W 2000 
/H 209 
/M[2000 0 0 -209 0 209 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb"-VBs;,\IGaQ4NF\hN+N-%:@M;:?Z%uCH)\NdQ2=(P,JF-5a8QCp4][;W_Q(>!Kip<Ye;NR`<8l[b\
JKT-B#0Lp`ARgq0@u&]_iMm#"PmKp4:@<0\B@ONXjd\N\oDJU2\#[6^0Y7!RGMhi;\,(1Gs7?$E3u:#N
Lkpj8Gu#9ko-8='ip]$0HID<;eN,Scp7pdDjPd^NHHI9lFnkBYo=M2O:E/`6BPpW'g@*>T)8l2Df'9R"
H]OcQ1Um)Vffa-Grl+/o4oF4m21*Vfs'@j4\GrhA]6sD4-'`g^m@Le"cQ@m7>BIh<4MFZgfV^6TiJF[_
_(\!N75#X8;c`eC@<ch9Xr<%mFQf\sHI4E/X[b#cL8T7\)*N>g0O328QO^nh/,(S`<tE3Te\,c9Sn"_^
>4(FhE-]c90auD"hZM3NeglL\Xrr5-C3\Z/lC7Ws:A^qQc>$7lSh@(qcS"MWWelOfLm2Ino3,adS(fgl
qJP`MbcSB8Aff[Mp[[m@B&:\R/Xnb,hT*f$>'X1&GAcLT-b!LF#&N)%PN1\j3"Fdu[G;H9:&UU'OSZJI
ZaVl:om>7X6psG#E-![MhVQKNEH>a:mCTn41N277%EuJrRq(TcbZsPp.Po,gj3Es#jZ#7iT#J_"k(&.i
8o9ta&Q:ot4f3],^tIoH])'*U+sJ5*T&Ji1h)r`Zq0Y,6ef6K,AENd#3G+;>>Oh8ZAr`4%p2[7iQ^&NZ
EH=U0O2n_L[H1Lbm=IaU2t\oGC?jELbf5[8'+kgRQ>gp#4Q;BEB$K_Q3G,F<F%^-5c-*G^3F:Reb<sR@
Hae$c>]8X>H!D:iH]'qm_\#bkeAjaqlIWb+`iabDRtulVW+EJ!DN:2BCS#q)*&GXZnT)9)UmGTQp9!,#
Odg?2I,)JrX'Gi1VmF'e6DT&Md?2r!>ccbYZ)cd2-6aWXC/G*mT53RHh4/PUZ_JO"a368ZbT&FZbOKVS
gkh<>ICto1lhro:O/i]l#BuNg?&=lEIL_'(I>l5"gD[^#]knr;,,1Obk.!FXk4*W%A*+[ga368Z]GrS+
Gr\ocP?W5$gd\Gq59(VD>EP]17S/h!p%.$/lIQW<ICcV_hr?%-+sO$!DN:4Hk-<.C[[XUq*Ac#Nk%Yk(
D<?hkgq9%FYk"AlNg4,9<h*F`i4aVEm0%ZYZde\=6oIpbMp.uGNQQ&'pc/ou&buqra3Cs&3O@isB?a0;
B?/55Ge$g1B>toEa34E`H"JGMBB8@PUN?4?g0960c&IOXUcoPd;SVoo1j8P=hF'b"7/MY,pN?*'Ao?)B
Xe+9P]q\kMjq27NU[Dd8bVA^>1ZipB<fWI*jM@?ks*f#W)csXBa40OB[T<tM]TB(fIOlgAI15P,qDHf]
YH-RX-6aWXRN$.)RqJ9LO1(gS=`YZshSRMlo,))2EQ/tO&*N&JpTS;;Ef=7qqRq#V*"/s8g/*WPV1,QN
8:@S[fc0auqYb=V+sNb\iT@X1DN:26R5N%/0ltRoLmPS/F1aW<QRB%YS33L-X5=jlDW>IV17Qu>M<Not
NsWg)^QtZQG5RkdLkqdZS*+s9c>=V47m"'>52=r8IWiptLm^3oo#roP+hYINQ$;h?X;iUKAE<%M[ZfCS
g2Q,PNK8m3V`mQf8c;hX`n9g&+sJ6%&oMU?c0`cEf5u(Gc#N>KB's3\*&GXZR5#MG\K`a<3EqN/7rWL^
M0h%!p&"Y%;HjM5:0"l;Gi2(JUqWJ#:$Q5`..un5-t?>n02=o'7!(9@*&kp_EH=cbDV`P>S,$B.m`!E#
4s%M_c-D^:jfuH\\<Z+86(M9ZIWJ=-=.9I**[J-.POI"^h[HKF`LToAVRl8>p&!c;6psFQ\2eG5a38Pp
#\Itjbq5EqQ2U&Mbe/Y!A*,,_4R7qd?67J:Z#Z?sZB;3FA)AN=@pn7";S+?>Q.4,KO/\39NDdMLbC*[p
4uj2e&J8o@RqHhac>@IJbT"(&gru>!\Ht'1iT=l"cYV`g\SEi/A`WtHGOOU=/(a[.ALCQo7m8`:5N(L[
;B$hm9hTo9YaG8EV/kkQq.@@DI_VD/LktWah9G]!F54E^S'Nm3]5I%Pei]Cj1M`#=7s8stgq8t4206Dm
r+roj/'#adncc#;!#+6G[HA-aYLLTDX?F;&j6&fu6t@V4G)i'TG&qi6leJ"5F8':l3R':"(LGCG\UQ8F
[N$g,k2^7fGNe)Pp\JlL$p7-`;7"d0>FLZM=GaH_ol]qSk<q^+PUkN/2oj0_F(WZq\iFBjeBAkW\OeTt
bOKVS4G&d_X^(8QNf76A?9Kp$KssbC\s+l@@m4/_j"eo_pN?.UkX7g,PU"s'2oj0'[lJ>dR4I&41WR]a
RQ4[qd`\n9S337&X5@\glf)Z#Eg59>M7fX5Y.@/Plq_Ncpc/ou&\/9.a3AUFgmfDP\2e/]R9T4P`b(6t
488<EZfP:L:>R\tqrMO.>jXk4;EJ@?XrSR.&NuNXHP&C50uQcNf9KmdNh6ss&WrK#F/s38hTdpgq.;GW
jlXdU1McF3bZhTfg;u'jo3Uk9bjk86ZfV1g4L^N4/K>kQ`:<<9WEknhVg]$n8::oag#Er3ISN:!7,:bn
3GtG?c"i_-DN:2VT/F)cjrS-ZeP;-mRl>DT?=(IlnT'7gNg8Ycd>_E0Sj+j!bJD^]3kp7$UjfCQo[b@n
GP19/1ga>!^J70b6uc\ugo?q*k5F(_SseX$n_IGek#U9m\sZcCF%9iVQ^;4Eba8Y-Ed+kO=F!LdQbNbG
_8k(YdP/(C3B(labn=kcrS.Zen`o.UH=P"AM26u/F1=5JNgo(k!R*ZjRp.Rf%rSPYEm3=?QT$^A]GrSc
DrpebgjkAojOgtH&')5;4GL[j8U^M4BC,CR&J5UX$oc5OEHBntJ=B2UZnlKXR:GAkbWOpE\SEkeAEA%r
<c6=-jX0E?a41Ys+ghOm0Q=E9]'RDc/bSklC$FGZrRqn@f^X#,+sKq'3R2VcgcV3uZ_Q@=XEan,a368Z
bWMbh2`:1L?B19iZL['O/pD;27]nY&"f^mdUP5b>Y'Xp0V0o6ao:8NcmcrE(ON*<Q'+kgRm6&^bj6")2
]V_64FE>`E*oG512:(UNQHYk?R@?-V[pIq5bh[MhoKDP#\N]]`fYMB/D(Q2[>]"(42j#6Uo<_u#]j:Tj
(WP(sF!;ePRZhACT53W"3GuR\bp1H$X52R2R0VNpNgVs`o1!VXR2[u(X'QiX`nZ958"VA/C?9IXa2m;N
3$']]6mC><os&#Q_Kici[FC2>X5Ag_+sJ6.AT;dVS]>koh6(qVS9(/UCS&_oeQ.]uRko+e?>eH?na_LB
jmfH8]9B;QCNf()5tkPN9Gf`$2+`5?l>#_Of-CI%aX1h0rI-j@&J<]UF.>%-md2"W\2eGeS*)MI.rOdn
bY>W.Ar`5<j]Hd./'#d1)7a5n=*kJgDQVM!_b8'PlGlTXeAoY-euj=91[pji`R`T.b7bI"OhEmGC<+S=
F5.`oB1I;b2ck?O.lYMm1%U35NgIfZEi_C$PH3ROhiU8F=5+0"?6cl$&oC8>gi/e[=BsD0'sE\M(cQX9
S;;uWp;sA)F,k=s*&g[Zk008qEc]E9DT0jTF3HauR6.#qa3,,u3DPTsDoe'#X/uO9hiuhNM7fa8%NA,j
XC(>\]jG9Q1$\*"3=ui8Xc$KP\2eGeS)`WSgmhMgj(9A2SE=/%4Hl*fA)>e[R4ZJ%4Z^.MrTOc"j-]Vm
e8@fFF]';S`*r"mCgI!G4V88<Bk(5V2*8k'/\8L@c;eI_e'4ZSBZJAc293oqF"_-cQfI103DOJAac60W
0&AXsgC]S:eAneR\MNr8^92q2Sqr2YFEr"MG.$Am\2eH`e'0UgB$CdQq-Is!R:GC!boAAIB]UEk:[-pE
9YA!"47mO#_dMFe]:)WoI_:A0ICsA5^>@5feaM6+&J7n?f[ZS6buJqiEq9RKg2V2hgq&t2C[P]`*&BNb
k'/mm*o>)FnoRWEeAuY"I8emdZdd8mZu>6mNgnP=jN?HIHeQ(-rHf_4,3kZLR<&nNg2Z^$1Zu8n/2q33
]1k4cH[/RHDrKiG3G*0bbjk9'?Co!UEUrfmNfR]0*E/FR;:O+AD%in0op%<"lRGt;^P>TQ6puIG13;kn
=$(;[S)`Y@Grmrt7sdHZa3<S3H)A:AGe%`G%m4'f`l\bcG]k<5>6Q@6IhQBhI;HaR"8I2cT4?C>jV&4<
;>Z_@\)QP?iuC"ubp0h\ZfX9lgkqR_g!>\HA*-A,4H>b<j^G:HOHJS`lVa3IVpna;1V.H@?C!&5rCsUs
+4"nLM6HZ]FnPY-6psGm0!@(oltUHSkI<NiDTL'_[lJ?o`m$*&\W^0;bT&:VbOKV`Q/gpB\Y[dcdjVVp
Kh-(#A3]`s1g'&'AnGOsC$Y'YoneK\W.&(/S6bNmB$PDfIWga@a)c<FZnlK8bfm-"3G+;>j5mGG]W7AH
[IPkDY(",MPDuVKbA:oX-#/_A\`Ft,EB/r^S$I27S;;tLDX;,Iio]TBY@Zn,3GskH1M`S%ef6K4RlPiK
nT)8^/'#adEpl2p[O5d(Rj?.@qY>"Op$k5GYtJA.r>n08&J<QMR<*PZ7rrb<*&eDpk3Qb?B]]cZSGhdu
2oj-ZR^qgVm!(Ns0":E8:9K'G4d(f*N<oP2U8k2R24[[\L.(V*k-hFAYFkabW"7^'m,U)iE(k[CLkt8W
0lq5Dk1kudDmj`B*&kp_EHBp*=n?lMDU$GrEb<P#EicpOQ"/l`N*Pa23-adr:/t5B5LZMo[P^bW=qng)
X8He/I_VNQFO=1HJ#llr45=mDI9hYbkeXpWSB#\lG.$Am\2eGeRsQo3B$K#TNgXN:F1g:kQRB%YS/`U]
C#`qaF.Cs2.8K0KZJ3mLccW4of>?:RqL/AZ(#M0"mg"o?0#$elkH4XYU]524r7sCU*^BC=_`,nKpMXsG
]&h8=s)%]3o(=WJqt@pQma]&k5I^RHlGp)WNRGDmF7aVqSJPYHD<'f^r`e.FQdq/OjQESqs60Jip[=*N
D=r4WhI!>`:AOc]pW_uO\aK>LI]]C>fD,0Rmd!U)F!;fN).q//]@oEoS6L#Tc>el6HZaDk\]np$Gn`&I
ef6KdbjCl[?LHOj6dCufY]9h@Y't<DRus`\"V7f/g.-u6WLnC3;BMAYUjd1Qk3FJo]X[Lsjat+I5.9nJ
:RjWALgB*'n&iZkrVPW!>^#m&AHmM;^NoVI/jFV`\VuhY^>A-d[+s].Sq$0<a6QV%h=8hQj2R-%^]*M0
r:n15F8"KNpULP/p3;#.A\:1,[r&c2<r]:=pIhL@O/r$<])-pKF'&DA\ppp=VamrBdJI^l^WYN<]5Q!N
Qe,R7Yj6K-nHZOQ]RS)U)6^rgqs30]VVKcnIlDq780'ML<nuKJbdi-\Y@Zn,3H"9<c'^H0c(g\P$TH,M
0lsajj5jBg$S+/TIWG+.eR"2>D'6@`o[Nk2PWe[o!,E*Sm-:398nnHAdAkre\`@c[cFRc#S(crdUIUC-
]C*G+1Z3nH>A)Nff<;^P3;:(#g=uQ'W8hddl#Ie7)_Q$@C=(`5I+S<X)KiT=]C,F2YPZQT*'80'Q!:r9
r;!:`O'e[;NcI?)rVP.Bk3/F=B@,7UrcfI'?1aWSlZJ6h+sICLF5Fp^j1.1^g2Z_%DI1T5EHBntif81o
bq\f<Ar`5<jVGMaZ]c>q.@7dSD;<4_IY!Dei'aA*p>G9IHlYFYeg?/93e+m3F4Y^336tk]Ie;EjNNPA^
o=Fbhn`q7mp6llfUXsG59_A+(X7PN7s),CW8$C,$I;j<-I,40?^OIro#NP7tCqJTFcP\rbSY$^&0DF'F
5@8R39n$Dt#N=H#q8*$EqE"nNr;>@K2.?J(7jfK20lq5Dk+#`Eg"j<,S`AkB3H!-D3G+;>>P<*]*%tAt
\\QC`=?/k=fZ2OFdjVWEAa'q?0(i]u9Bp"lAn+oW[Pt[<[0O'PQ_1HC?hi87HQMpIT<n&FT0'XNTa.34
g%"AC-XJs.pZTWYcc(CSo4oFSmt8A.+$2OVWp(Rrj*Tm8gkQtYbl6PdXdXG/2oe)DX68nW]e8@.*5.Ck
h(Rg$p1W"<\no"9fDW1Rs5(84IFY;uSU>QLI$:1`\+/rG*Sbk>^Yc9;cc>M;pcAuOr;>dQN/1"B1ZuuP
\$0pX]@ukdGn<'XblbL:45+P?3GskFA*3d(]T\b=nT(g6Sp@2<r>td'e;fX0`mn,P-+2Q,^=83h0<(#+
R>bGMF2;<e=.;I57TUWoHJCGCqJ#c_d^jLfO%qcc9_$S!UH\R!jj38<s#khed<nHB4o4iohiAjX%!pI<
GO9<%+1lj4<^2%To^_0crJDgAmS@3#rO_d4O'd7_q;9BI)Xl-tHgFi&p[L;IrjS[&hU1f6\bk^Zf3"TC
+(tVoSa`D<QhtgZhk.ME)tpb%F71(:lQ_GkojaGHo#An!m$Vp<[<%@Lg`/8nc#IgK>jpgB\MZ$YBBFG!
?LH=cEH2:RY-sRKWBJEkCAT9^QMNUU+n`*#ZEL<YSsX'SC):P\1"F[RMt:8&hhTN>qY.$Hg8gLR>Q'rZ
r7n>7e(9"Sq3]RibJ-&`nBnEuI`uK\`Grr5/,q\[m;ec@a,ei#okTM9^\[JU(4YiJj#h\!%cbe2pbg47
Y5VY#+-6HQC>3X`lK<&rhcI#YVLPfIH+^;\pWL+NET`V-`qfH#j2Ut4ofVF#m`WdL54!J;<puZUfAY*2
&,ogMI*-l>IS:DP^,#%jBBC0m[r1B=3GskHV_RerDJjjQ*&GXZ*LaOb)0<G1/!"6&lM%J`;ST+OaiDs*
KRXZs9mo^NgAMr%qWEr]Y-.I!+sJ4WGgY?;R<*PZ>Bb/6EK6MmEHBEBcE'$DDLXl4Ao>r=S^3\`jehdV
j5^qR^GkW;a43q<K+h+_eAi\jh6*l(s*7%M"@PXGoO,n51NUjcGmlX(CZi2fDN:4Hk#U7W1QQ,0REfB(
QfI103DMaa[7<nam5nF[dB4RG=&Fq+O/7B+O*0]G?2])`-N'BiLaZrah40o)*&HdEC3Mm`mb5o9gGs/3
S$SmG\XP\6c^qqrrU"07m,cL:*%T?JjVYNY+'6&_-Jg/Y`tBCerL>R5qD]DIf[W1oe9#i@(D%/jAM:Wc
1NT.5jr?=(io][r*&kp_R5N%/1%Y0PcAXbiNg7ei>l>_R#:!<>$77qm[;ch)8GtXcVEQnno6'`P&9D,_
D$EBr6s4#,4#?'3mG+b3kLnCGS)`Y@Gs+)fcC,\rF0i48H^_Kj2tsPK*AbaZnac*ST#o.*mqH!LEj^b^
iqPHpX451G:8s<I+adSoF2p=C=5*`f&Q-QB]=Gf(1XDStX53d!3GskHj6!j3Zf[W8Ar`9,p2[5S/,*N6
C=>`@ibIYOXh?c'lMHgSUcohW9)[K&dasaKVl9QELkmHXba^J1cHLPd2m6fU\2eGE`QaD1BU>=F4Nib.
$a]!^B9-ch:A;'Sj`id\maoS2/s4#keb8,f[4;ofmk48fY@?eK+#gWgT+_eK`@8Bf1NUjcH#u,l^8i85
a3AUFgMS'L7sh[IF3NEqR58>*1\2)_Ng4sqEqOeD/#dq?UlDF'b[>1$-(:;!\RI&]Z#jF>f.cg)Nh6ss
&c!ofSMP>YFlkfAS$T/D^7F<H\2eHpHe-u(Rq(TJ\H+M,bPcd5oH!;OSQtOb@=2<s=b>.h8`Vc%Eu/K`
lg*i.)>8)n[3lLt&Oh_.mED(VF7.f.g"!6n3VVt(2=2ABkM54DR`BSmbT&Fbi8ku'Z")lT3Bj%X`RU8F
7+5'V05u*(^97GQA#lZ2?%Iff-u./cgqK?6E-#X:EH?<2kH]0a4I2IL0QRV>NgXD>&^;:KO5o>(GtKGc
qaO$o=5.&iY+aOJ^LnE_+.'8N]DAqePca!/6psF[MJhVDCM2clWgg>q*B2$`EUt`!Xu>n*DJn:SpN?)O
B(!peSX[.p098.uT$>C-n&;mmEjbL<9'pM&;O]An:]2.'P5:O^h:U8]fb.@fqZ7?A;7*S!R/>U*3KJ+A
ltXScEH@aicAm'TDU,=DAff(<nT+Y9Ng5BDEj[hoo5V1!=\*D/6o@k,O4:.iV9sZrrEA+&e^_Z)6pq`c
hWHq4?TU(,ba^J1mWhkqDN:4Hk.!E`hV-4/F3M:pRH*C23DMc82O6L(>8Hp,j=BnE)/&^(lft)Q(:h$1
)Mj3*,/h\cqq<XT3A]jBS6L1.MKY#Lj5qN@*&Gq&k*UF31WR\V=F!t$?h-DM_US%(WsukFOfSEe#:H6#
os#aDZ`@Fhf;/D6!^A%V,3f__cHNiNII3G8c4t6bH03nLRnN)f2oj122%Sa0!R89kRqF[$V_dI[3E@3?
b15tFHSTWL)<'OD]3uPZV7rqDkCHPRT>LK:qR-#fVHdDD%R`]Q?L,;.]nW)aYFV)&B$O].S?o8eR<,?u
j6!j345+35B6RnKba;HcF1`JG^CDX#DWGR$_8@4f2I;9'qJg=2os$0?Z)_6,=-EK_U:(:N+sN(nF7WKi
kO%W+R<.0=W11,o*B2$`EV%n%DUQas235#7*A^JQ@iiV4Z1<E?Y4dW&WP&KPT9.c!M-?a)D@'5`91/Kc
qR-:5%^)u.#9k?9DdhhQSB%'Ya3NAgDVE?Jff<r1S)`Wph4.Vhs0LjT\P4mS5%>YUb9tq#<Z]`3e_Yn9
j538L;EqWPUcp]KZuu&f!nUFoFgXM;m,In+I,;tl5C!+C]5Kq-W"7^g[YqljraY&"b/^Ncn!"kPI.R8V
I8>=`"!MR2pcU+YH.2.0hnS_:NudXKTt\6/'IW5e483FO2;DGFkKKInS2p>VWuX.>brrQs45-)[[pnKZ
gt[mWqqTATQO!2(S/`bLA)h;W,bekLO!+s1+6-Z&](kFnr-W+qQ&EJM\F[jQ-a(/DfY3^C\]=0Km$ub/
DccJjEa;G15'?5eV<@;qS'(\-^5g@c&)I8eq3TiVipr:[h3N('N8G^>SV[!aS"3c,F";FZ^35u`cHNgp
2eQ2RDN:4Hk2+o61QOD/m``nWcC!YR=Llr(eaN+5Upc>g5-D=VkIlW*UjfDT9mqu#PkoO>]WE]6f"fTR
=Y]O-W@]d:]sdi#LX*Q11%2]<YC")k=#[V\o(r[Rhc]OI$p/CNku3B/p?K[A&c$+#S(FlcB$Tes\]:-0
c$%CV\`&tJm(;!-]",u/EHAa00&Fu^c-6]e3H!,kG0Jb#N-POVn*K.MXBb_<rUmUY>jX_Bpp/Ce9CYqF
`m(;Cp+8i63eOJO0Qjcpo^6\L]TFjcp"G/o>hm!9M0HWrVb^<`ZS+,sjYlHe/&1iG3;C5GkX;d0D_pR]
m$rLkba^J1DLLZ;?1#@=c;eage';rSB$Gb93G+;>a.>#Hi8ku]]XO5?F`Ol[\FspMN<rLp-rJ=?cSq@7
>;p3[C7"-aZ!N-RYIg%0l8"^?oJVujk.TUK&\$loWP*d/TX]LISV#^1^@l^i4>nbWh'XCN@H[1IS:0c_
m@9ScB$PC;B$PC;gmhO=cu,H.bgYrjpMT+qGo/&5gO_L3=*muce0[a$4nWkY]<SDDha4rdg*V,FN7R!"
a_`O!g(rIh]^.Gl?$=Is]9L?.q7Qq(A!VrCH*d*&DI16+g"1,fc.U^ob^&9;F%a.!EHBnT2oj/tF3NFu
??Wt$0?;0Jqmb@R.].AU3p=Rl\DD#dqi8su5*f_6G4fXGgstrdboP)BT0B(ufo;>HDjPe4I++osY;s)0
U7[cFfaiV,'BP6qS]@0ZcX>oWB?n3E\J7&9jugu63GskHHZ4&M]T8OD0_=RINg\WXF1`JC(SuTLhmATJ
%;B6ca)dBsSI*UYV`mjEoQBimWQ`o_o<WUhm3R,TBpn9>mTsLfMt*t9p`5\AIa!rmn@`_gbhiXRf<8H2
Eh1C&nnl"ibC;#a;a.WlpceTCkNo$PZ56pH*gQ'%om=((1!nobogE=Tll8*JZ*0^do>l+CGifu)a3AUF
gcUF_1M`#=9D5Z<SMA1.Z#XV\Xu;7F5-D=PBkij.]W!"M##ZQ?,5AbG2-Al'RJ_FS4!2d?^5n\Jo6?UM
lA+di_meg!DgUnh.X#("e'e-!g`OMGk?.T1qf(hKFnBkXp6c@CT/ZLfP^g/iDq0n],3kB$II5[t]lT`k
gt0iq\M#mCbac#?h=%Lig`/7c8%W[ua36:0^bb+t\NqlM]N8t.rHYeJGkH'aO($p6%9#Ir4/G-$HLu@Q
CUV12eR$Xt3W%&3SU#s":T=,,Z0QEn[`t_rq0/anVXe`/bdX,&I*0*MEUcW0BoAT"k:YWI@KsL#NiBdO
^b0i**+A%'gt\ZqZ`cNhRn'f+B$Qf)[r1B=3H"9,c.UJcf?O8]H+L]UGWAfrhT=:X1GQ:O@GsUL;a9.Y
Ucoi0lNUU"D&0N01ZVJ?['lHBC6PJirV*5FVW,i`DU6fmpaLrIeB_?fq54%3b3oFshm$!BY)0)_hX#WM
S+jA_H#AY5A*5:QcF_iA+ZF&r4GfP;kIA(Fbp1K%f625Z*&BN]k2'ap_g$ImpQ[\%f#cI6Z6QbG@H"Z,
JKBsMHP/C40r75%A%Hee%q4a<\#<FagI_"aG?u_d.5(Y_lKiTfo<-CgQFuh_S3GKrp)G"IN]lT)DVOqD
C@.JIpG"JcpAsEHf:@`q'\UbfmVDQAY&j<ELUM89cC$\*=$(;[Ri@_P\*W7sB?a/?Gp>6YDs#92j5lQD
a_dl_,YYjWC,[K`hGicMeXiaI'6*UOVQR@cRS>f7p(Z-G;4//k1,$B-2O3/':gF$@5An)tF-Z4,D%1^6
c`-h+5V`1RQh#J@lu=D1'm:YAcD.#tS=+HbgkhLVF7+87*&kp_EHA$qcE'$<*c]1>0?;4:_T3bo\D#Y)
WSNj'B^4a`cL/d*Q*7[KlWcT4T,3FZ@cp\EA^k:/g?SW"`QtYtolh.,W.$nsgtTBbUY@g+g1/i^<];sL
k:UDmEHBEFNgn(1o*f6&D:[LbIeH6Cc<g3.B("Nu'6lN4m_m2s51V^$G7n%NrHuh*m-<1H/$:K`FgYZ-
.\_?/gQAY1LG&>a[YnlBqi[hHBAUM<4:s.Q43,YFg\GqMa3N`!\KNp#5',#PG/(ZCEHBnT2`G=1);Vsr
X>smQQ\Y,%'NV@pLm?IBPJtPlp.1E&p%(A"Z)_6Le?7[$B,7mbe>Sbs<]_,CC%#9rkH-p2@J>,LVOWk+
e#r;[F40M:TDQ1>P/H1p+JOY.cKhu#G0[YD/\!faDSj\e3VPOTmWhkqDN:4Hk*W^BrTmk7S/HC!RI=S@
=Li9!=8PTX+'6&s&_0U(9Sr!!lIS4bX5iAI]&9`l\!gt"?M/H2gU?]nQiEqo?H'n,mit4Sk41S>]5Ge:
mX*63:?4>"4O2/r*BX!RF,lgOk'l^QMOSt$F2cA60fQ:FkMG%-VOcc0\2e/]R58?5QT#0ta2]oS)S8k.
qDM9aeAj'-^5f0?p@Da^RkD\2e^n_W`FlXtY&]<m2V5EWrMEPCT46Eds)")XYHGSK6o6R`4H>uYEHCId
4-*q8*o5V7S`Al!CA2W/;;HW&RFcTQ'P<ApA*0/(/hb8f'0*PVKk@.S[L=UDRdbaKWK2D_Cd"8gVt9Ls
]>VD.$5]>jGajAmkI]#b?7qOn?_P"/PhWG.UAQ&DdJS=$3Hf;`c7SBuk?R1YpU)eum`<WfG0[76G.$Am
\@DW!2nPj@JsgP$F3NF,RH*Be]KDCCX"D5IOfOJc@qrWPGc;e6?;hq14kMfm*lQAHoq<<_3iA<-i^_`]
j'BrgY..5*gpuc<\+oh-jZ8[IagO>9F"\;I-P8MSShoOem(B6cA*<CKgmachEurrX/_N-?kAK+G?1#-^
DJm87NR+%tg!>\HA*/"r:*.g(e[B$H[?VBT:Ap]gRedk;g"%sHH72#8[YNVtH-]-QS@AEEn*;ajI-9O4
ZZptd=oNj)]KE@*4gn>)a$<&A_ToE-V4GqPF6jl.O(@E2gt\s$B:h3)c#Ig[*&k>fCQ=hCj`iddY4`(-
\ZAA>;\i9C-'@B?cX1h[A%4s3%r:HFj&k#)s1J%<QbHUGN,Q@'S`f78g:9XJ5'cT%O&*IW&%dluT/p":
[sX0PHh8oYW@,h0G)i,?Z#e35T#].0f,iPgR5p>;WuX.>c!.c)"uE_QCMmWH4(aM@j5mP9>\tj(;Yq(J
*i,9[iMI$_n)qKcNt&(**E1;OkM+:1?M8NBYMVMYLULU?jh@9H[p>M,ID:a^Rf=Gl3'VEYa[b.$j_J`2
psZ.bgh%aV.-qp8pV!an[[m.Vf=;&DcS0F3g!6!GBBC0mYA<=2\SjE>ef6I^RQ4\l^rs!'N4_GkpG8)g
QO1"eOSY?.`n.PaH?MO12BP',&:83Iq:s/0HE[4rURbb:p[,;2[?ls3FrN@,E*)DS-_g!:kL_e<DUZk:
cCAOOo;lhICuu]rGO";pm2S&t8%Sp`[kMUc@6ZhcNgEDP4H#K*IH/?"7]pnqbaUqqI]R`gIJgt4':HGc
4-m7uRap#,h_r_SQhb=fI<tNp`Qn52eR&0cgt"5j^@2$*lZ7o]?e@A^mb?$b]/b%pSR^j,SF9tNltXSc
/adAoc#If:bsRr1.kg@!k3f?Vi8kiI>jXH%3!N-7;a8;@V*5BDZ1[=X*neju>-l\!T-)pe%J.lIpOsCk
5(:O`PPs0dSX8YIc9jei;B@bqBDIJ1Du)M$G8q/_$TlDSZe2gtII0es*&kp`R5npB*&kp_6b0a91U$0-
+jI[2Rq(UKB?[,rGr@0S)[nWbLD*ZZrB.6EqH/WU4#(lcHRrm+2;`\UgidJjVW,Orrlnoo;s1X5gpRAF
0'=^V];rX#[r\bM[WA*G\0$N?\t<KqfK"*rf?TdEBBC0qBBJ"?bW0R$Rknj*X>sl6g<<jKR.ktm3g#].
9dQ'cWu]T5YGK@?^K5;O+!^JQI4TR+l4H`rm2epSABe]K[edT&gErt<Fdn6h:NbmlE>RO,iU`<.ceLPV
E[eWhQd!Wk\plh,cA83JSbKR6X)?eGcKD]_7Q[7&k1D\;DV`T$\iDS0G20`rS`AkB3GskF)f]rC*%s6b
j[(Io)bF]f=.>h5e6Yfc4jG+leh`[SI_J],5B!e[rPH0bT5N$-?6VVkpHCCr;pKBSnSq#4+maTeS]@*X
[qk0mh&JL8[]b+aS^2<I)KtOg?b8fepM/m=B$T)[?Hpc8F55Q1Rp2IAa38CiGsa6/]osHi:M]',?cm9H
C58XuW?;#jNEpu!GN%hY9O7$-9A6aoh"+k>9b(G"2U.fO<q!r`CZbQeWQF<_ht]7Lc\]lro:5!r3HgFR
A*;(+kH].rDVj3pXgkq)R<)kU?H(4']6R+4O6l#QReq7!#%l`7brqIT?CockeW/VFaOS"*3OOPRoh,0f
b@']%f*k?$%o67GaHCjOF0s\$p9.7Tf6Ook)0P'>EHlmb5<8Q9QB*V=l8>aIISOE(ll8+-c>C,&;`eW!
4*GMtcFrX]2rWnjB?i*>Gm$4Lc#IgK*&EXnk)m;]n:&()-X8^Cg;Xo*2G0\lWLqA]HsQ\3A'WT+Ge2Tp
QIOWWUYVeViL\>;?@7(EV8f\3FlDLOG/DNbh`5k?SR^hCm$rLkq:qL.F*=tOk.!Eh*bIVuB't/g4JJ1C
h#Sb@`0K.P9iHOkXf"?PGd_bfCK!]$&*)iB//UU$GdI.PT0=PafD4e!HgN+RXWKbTZ4V8?SR^inmG,Rm
G,KNOb0?>7cY;RP\Xf.0g`/7sFDc0C45)E1]4T?I\]DrU^W3MN";b+AG,gCuh62$;#:;O3+,`+jD-pAZ
NgVTo*^@E<4_.-R>k=\n]\fi,DDL4"rOdO7SGhVc':uO;^ARsuO6_^r'C!E[Z#f7O43qO%)/%7"o6bF.
Z?(2sj5t77]U"u?F`V0>0ltrYNgJMiEjZRJG&juJm7;):pbtW:rEMnTlfr!YNL5#J:KO%,Os7JLc.b'f
s*:k_p"Y!VDu%o]o#96'45=nog\6AWk3'k3kP2Sn4)a0BfK"-Cg!1V`S7Ca7\Tp8Lk1k]\lg,TMG;sNd
Nco$Z0lt*ANgBuoEjZj'8Sr<H375Cgcaf.WY'u?an/CQFeC?1WUeS";_-L-SFj1i6C!I-2\WgCab'iZR
Z85nRV70Z5\K4-V_p5OYk]Yh3c"ktB_fMAYk76hu2oj433G7Io2oj0!]/aJpe'.?&XF+o#"'UoBaY7^)
]lk61Bp&78,u=JeG4"V<f+S7iV/AD$D'M^-FH5]sd-Br*D^XtcEm\a8nF#$YcZ#53.j(t/bu=#Bm%J?C
T(>Zn\j#mL;;7i!Gn!!YcEVHW4PmgGhWHr'@HYk)1NW!"c'^R&k2s)<*&fhFk2FQIURPcU^<O=>qqC?0
mS-fog2p@n3u9N`8$/;ME;]s>Nt8C0?1lo]i&+SFlB2$mdsglI_WpGfq_j__[a-J9bW!eLYI3S009KB/
d3dWDSQAEqjNC<q:"K\9-Yc^Y483pDF6q\fS_MrONh'\C(2(ptF6oEbF*=rIF,l`&FE>[]XI8,1rOlJ7
T"Nk$eOHm.g8n2a\Cu5MId4seVpra*o<tfHSMK]g/GF7oOY!KU:2d`93]D6LauR6r>rJ7G]K#?/RIbI(
ZJU,2SX5DDGTH<qU39u.rp>)nT?"0Wk0C5Qp9dE!F51$djpF1/jQ;J8c>dp\*&i*$jrX6&A*/"r<Z]`2
eRjSh;s;`WMor#[=6<annTng*28#EVHh[,KZb]7T>uG\BWU;qH4Qi'&^X:uOJ+'iDT"sXa<R8a)g8A:1
pc23@4RI"+cEVHW*';3dA%OaEY.&JUqqA0^q-6"j[&Y3+\*<%EboA\2i9&^)bqX:Pgng?q4[j3Z+adO3
Sj]U.cb0L]O*.=9^%^iaJ_0^0T!!7"-'`o8)t!<YbM:h6VHNJ1rpTB#(JCBA.JJU,s7s6`M=6n"0>A<2
@>@+YcSo/!F/&M>kIKr,Z_(ajfK",8SR^j83A]jBSE&bAGulr6C?DC+bqX9(B&;N1jWgb^1[f5C8fKMC
68![kD3G!H?(f^AV>JcgkF&<1Q#]spq>+d_B7XfhY-sLiD=^IP?9G]+h:p.sgMK-#3Li,0jp+R?n#i)S
o%u$Hmu$^T]:SdX;;JHtll8+-cEVG[G+N\\HR1bGm,g1l4L(AGZZBa(mFXF:DUcq!293soRCUoeF7jn>
=hJ#,4>)Rtm>0cO%S_3H`mi%`M5cQ@R(?^%=*r';[dD]?]#/sNH/7Xg:7OLZ@YT6;@a82]ZOo9kEaA3V
U3^82bP`DB[qk0?r>[o>cEVH$Rko,WD!'N9SU6nf2s07&m+f4B><KY\DN:.ZG&q9>c'`if.p(Jb=XR;J
?c1Bb9E%gRAht@;qR@NueC?c^9_*;5R4N40H*kV?kMFoMpUofiB$Q=NX)H&+MMlE-gMY-Y9=s?anT1Ec
H*[$%IZBt/kLd=n47DFrQ0`n(RqK*L,;\N8GqqJ%c#)+D,r^lmkI<NiNgXD>2^\*9JPT\7nU+U/W^PT>
5<g@gH5]`Noic1iB9&(&^?lp(jl1CeIEmlHLDdJ8RId\#F7mN&bO5n=YN&`1h!DW1k<sIXA`qo^ceIf'
a3Lr2lo]ok06M@&4I)IaFE?f=?1$una3A15T#&XA\9[Aqls%+A0=U-+l()'rDgSAT:*N^'kFQm)a4,`e
]%Tkn[-`8"?>%WomA9RB\_GDVDJ`^/f/_PJgttL@nhb^]hp1!O\L0J2j6,&TG)i-jE-"Bi52"1rfJtbN
\2cA.[V!g)F5.`oa37bVq+LnbAEI!>&1:QVfo4E=Bt[a8>jCd3LXaX_:UV=ue9ej"X+")HgI[C5m;Vg^
S;02O\,8G*\kB;79=*AoDj.TdEL8M.md5!_A23Ej4.kQr4mdX'T4@':3HgFRLR:*BcBHq,[$bu.DI1N3
EHBo?l/pZ2bqX:P]Me!q>jYo\;EJ@6e?2KtHjF4`+&bV3,C"N$5;2EXGCK,>%j"eZa'BF@h0+6dO+pm$
b'2[=$gtU[b\c!TNcn4m4d"j1F6q]>hKJ6*43,XAfm*`[:MJu5pU*M3F,caFE:\mtg2V2h4HQ%Bk*W]t
b^3KC^c6<(fKS0BCMt8KgSeDk^Rk]O^S-']H2P?Ij6Cl8!^GR"1MlIVg./@D53G!\F6CMhe^o<8D6i6L
jo"XI0:&b"Ogi!Uq&DWFAES%3*';3dZ#f7O4#^[4ba^c(F0GJp%Cpc&?1#.I%QCk3k-a"b1QPu,&\K)2
a2d9WXu9\qkO@d"M0iT2*j7Z?/k).)a3WAEbA3"p5BaR"K_g"TQ'qD-?G#G[=YfVtDNg@am;pT6O.R*Q
(UN;Jr7mL,><(e+G.ubXZ#f7O43,XOF'j)3aj$562eV<`3O@icB?e,W3F7`4>Bb+q_b!O,D6fD$MN:p5
F3gDZ.urpS"Z,i&5>0qt&%:ddkiH8^%Xm5[o1^#/L;*:<Ps+TYlTa"Hb6:*XRNH_0F7pS8a3Lr2ll8+]
DW_f/[:cmgO)?#`cD/XS4*Pb(G)i'hG&tkI1XG"@)4b%"C!BpgmA*-CX78;+n6@kilb-X-DX)$&Sio6=
T9kSqES4+]/;E$9CWkL[n^a.H^3V58\+_o>bAA`l/t[L9p.^l_n@]nsjYi@\5M5.NT+fHW486M!4dV^8
p[b>,?Gk+>G!<smZ#eZC^=:E4F.JkKF*"O.DT0k[fsqDJB3.04Ngo3So0?pUfupYk4ALopl["3BeG"sg
(-\qO`rpIlhYX^Tj(i%):KMm8mE-FB<6m.C``nmQ\LtjSVjRJ'lZi6I6W]k,S*mqpl&PW2[EJ"[ltanY
0'0h4[:?uHpCdADc\^e<SS,G'l$g@rcKFuu;EOX8kL_e<Nh+pKF";F*ETS6&a3>jQSE&aWh;#6&=*8T.
*&HJL3%l(OO4q+Dppf$"7B+NmHg:(7(LpMg;bX]Ice"AMqO+or:ClpWV6Z_ANe8*;Y;Q2^rp<'[??ffJ
ik!*Aa1^j$qTZTGG@#Qrm'Em8S'(1:*6uhg1@s)KJ$lh6!4M\aISM`5LpQ8;m6'Yoc^3@2ce3C+*':@c
kL_e<Nh'\Clt_YlkKKIVk.%rb1N246*qlpq1%WubUN^YWXPC%BX6m,WCAT<*lGk$]/p?oZY<*b26^rCJ
CJ.`u8uq*#o4Xt3rjhfJ1#m+ld,i$-O"(*(fjVVEb?$?dB#p=oVII7#qJMe30D8cPHb'*WDU[D4N$&"i
bWX:!q=oC:^O1D`r(S"*S7l(<mG.-r3TiNfSEJNbG)i+@[r_AZG)pglbW0QYE9>sCY'/S?2`GR8*bNYO
o0cof0Gss&2;?4&p9u``_c!YeO8#6[Y!.k72KcKpIT$>E=1_)Jp@2bVA]jF`GIM;2Nr0eJ?Ym?%SS]tW
qP1`BqAB.#BQr)hHeYfHm(Bg"A*;K)G+Qb"NQdo&k5jr)OINSW*B2$`NR+$u0QXlhO-aA;QoNKjeBamj
[[tXl42$*RolU+ZG@dXtaZ6MN>iqWa]Z`cj^J/e4d!K*A]_a\ONh6t:bDVqcgtRj[A*;K)G)i,'k7R+:
gW[2C4867g]nW"dk@S>O/\-.;4-/aj<m;UCa3:AdhUt_134[c%-D^?/X1^5RlMK4KlK;\P>>J\m4^R"a
^HOUJFSpN-`BnA.,-Pu(cYl"fbu[!^Kl668Q#hi/\P6W_];=Be.+b;#Vq(*hT+gT6ZfdkM]U,2`4Qj7&
4.kQr9C:NOhKJ6*43,XOo>p)U\)?DmS255HS%ElcB$E&Ob@Zd$g\,[V:9Jb2N&ttCa$r+"T6%XX*Da;8
HB6[m`in9?93;!_ccY$d0j`t<bVke.lqqY!1$:;b?EV=4f70E6U,TV'#N(kjmU,s2e*#ZP7%;*>3Tmrl
g%2%`m`j(Kc(8RRo>uHASR^j83TiHDcGSC^p6g!W*&fh>k0D5aM4:u#s17`ImSUV:-dUi5C?HmiW?7=t
I!s<19lTI<duA[bg/o%(^[>g]UR@0)_408X:@m[Bc$WflU\C?M5J/",cHgsH9qR?9'5\4@B5bC>4(iIn
G)i,'kEbJIJt"F%F)U5&a3K+fGpG=MfJtbN\2eGeRg1Zh]\K3GX3GE+[0,FIA3KTqhPI>e2YGY)SW."N
]3)Yu=Ho(lUL.ule^Z8M`3kpO.pod\E_A2q=)mH0K=kHE>*hT05CMg9[s>O1>2P'T^E%c1.c,p1bBR6g
IW*Bt5HOb<"T4d'I1^,<Z#f7O43,X[m;9nhZ#f9eSt5U?f=Bb_UY32KR<..'2tuFr<mA:.Rq(UZbT&9s
C#s*U_o4&tlK=:T>;p6\Ge1]=e]qX#im,M[Mi!I#\nr4oR!\Xr;Ych<s1N3.\Tc#JbB5;dYKU,k?Jd?L
.kohWEr4&CPl"tJo<[&_%E5piDo^Q.I*1n?SGO?Jh"JY?;rRUppc(9\IB7k3M(B@gc8k'uc#]I0\+?!M
4O7R$F8R">a3Lr2^NOMU>j#D[4Nbl.G&CdOS6bNl3GomRef6Kdb9L-"g?#PYU1pU!O617AS#NlEh/2qn
6Ih]BeCHrS6ug)h3Tmq15PK9Fo;-Uoa3P4I\Z=D)m+eb9A*;Ki#<QR*]?\]#]"'+KBBHk/S`Al#h;%D!
H0t?lDfTOR=F!Ld='K4XDAe0fogjKmPGWe(RrEL[VN.QU[WJpb&.qcu,0le7ZubrLZaZLYF6jl.a3Lr2
m(A=K)fbJVG&G:DR5n&'F,laEF7ZJFmWHP)N0fG28aU+,q2Tb]G.,oX=6$9@#;TB,i9=Aq?0s437-)+=
G0\t<W-d:(F6jl.\)?G;m(ALRA*;K)G)i+LF,laMk*S/@DTBqIR(5X9=$'MV,?Gg=iU74R+%NDXH7r4k
kiku<=.9R0&bur!B5bC>5NeR"fXV#ETBt`6mG-I_3HgFRA*:8e4NtP5`HL[sbr=DQ/2t%Kk>pBNQC['u
\2eGeR:l25N#W?UA#UQ^*Q$>'Grh6T_:$lr6:=5UM`?'$e'?Y$*c^m9ff@@pg%cUP?Y\aeB@!i(ll8+-
cEVG&c@a?2Z`>**B1G$q*mMp*?Ja@UE,o3RJu*o[<%bh_j68HR?0s747-(snG0\rfp9lc(DUZq&c(;Q#
gRcX7-i5oINh*Y&o-ed"@HK\<SMP>)`6KsZSE&bA\T^",jQ3MggkqHYjLG!5hX!5pI:k&&F/qW99g,MS
Ha@h%]+>R:hj?Q>p=u+/ZaUr:a3Lr2$a]$KH!`Y:i9">4gqpVIZ#a\umWRaJP+>*ao3-<Tc-7j.Bm7%]
*AbaZB82]7ol7B>B1r4%`n,@9*o5;o>.WEoLks,b&a_^0m!1u\pG@5WSR^j8H/-+#fK"+mh9M#HCL:o@
EG!MPg3Fr&B3.04DViSV\@MG6m$Ke6?8JuV/kBirKY'bEFZ^[;a3TTuW(YcgYM"!j[R[[qSpkRmcF`n_
!B]ancL[lUm`j(_o=f[6SR^j83Hh"<c7R;2RrS&BG)i'H0lurmjpoWuPF&?;/!?$q]p=&DIf)ZUoam]I
[.G]:DTU;Vr^'"@re`[^DUZn!4_J[pZfdAHSCquM*';3dZ#^0Ig+1kPA2g]6Y&iCRW1=ls3QKBaF-gLq
d*91lH#"YhBK^+ZnnR6#=!\b`58Uud3hDA.j6&fu[&@Y]cJEa%G4')<*';3dZ#f9elJ?\[G$`;:Z#f9%
R<,!DDSjYXc(*hV\@G6kG@]jY)=t49Xu=!OWBHKEG3\7T(KZ[cku]uq:..L8@eQ>*mF\st5KD'SF6jl.
a3Lr2m$rLkfX^77F#1G^EHBnT1H.1$T$kg4DRYe_1PmZZIQgpmFk<3+_:!Zk]%USKLr`ZFm$uaMhm;M4
D9qV49C9BiT<%@lVk5WMo:CEFeBTZ4D9'r,F6jl.a3@o#H,Q+lgcV0r=*8T.>]/\=CU.R6C6LL'l\=AA
R\'BQALq*"YGl$r,"l!!$kX*IM:lr^cRmh\VqH.XSCqtkT/1h3G4ln;a3Ls]'R%dG3Hi]l3H"9%c)o<\
7ksTl?7tk-[4UCqPh"VFp%Fsu`R:geDI!W?='H(F&c!lESMPU6EVA1ZS[5dG43,XOF,P3*e'Ai`Gn!!Y
cMQ=@"ZKe)k=3a>Nh'\CQL$_uRldrtg`/,ZD!#I[;HgWb$Lr(MP5;H9TZj;$DDp=_V:YXU7VskJ7-#RG
Zf`+k>WmETdEXoN3O@oBp9n&,F#SI#Z1F?+So+1+D<H!<*'4[BkH=Nd>Hr8)4T*D`DN:35Fn=I%*nnd@
%]6[!Cn+1rIU#q[:WLnQ=ZV",6q"`Z@-9]O]T&KZp2fSjflLcOoD5uu47@@<o*TXnT0:6?Z#f7O4(m^2
NLa9no5)%m,J,sJNgX,GEjb(=j83uQ@-[VWT)-"&B6ZJ'DIt5$m4h!sA3X\PR6A%?kNhM_\t;L"F74R<
Sboj:,CZ4rp)H0'C$0X:SF`:]k<<P(%G?"P2n*>\Q=eFK\Trp4F3HbUQ`HZ0UQMTO4$r6$@7FVM@d7(,
Z'f^AaUf&HrB/^mZffO0I(c(,H]FXQHd:Jkll8*2CZj!gH&eG*kGdj=R<+j8Sn[=,2\539/^0l]Daa>?
[D,-dEj[&hE-GAJ+")`>kHjgK1[/Y<+X/,b0mgXLT6mhaB$Yo&3Hf;dc858VG4*DrBDT0gc7R83A*;K)
G4&u)*'6)?F,laMjrN6ikH$[M*lQ7P-FkA/muj6kO%$7TNhm+8]q_?HRn6\n9T/?6qPXAG]g$uG/\h+a
+5Zo7n,2.(s823$CVKbuiDmYlf&7@Yrg)O.?b:`2nZVrEn=j98o5N7[GiS:FDnUUEr\*.e>lIC")kQYZ
[g^UZKq!j1rqDn:VuO4FLSt+&l\DD9gi^N6Dd54`l0GMjT(o]p%o;ucX+j9^r6!u<?TRC`?Tq`cKr^!L
I/[]p@m5,0E:IRI1-GD3<t,u%o:k4)-a+F`If+o;Kc`D?mK\*g8$3\Xj?GbV\DZ7O0jO5:%fZ4[?9VW`
Dk8bTs0&&Ad'JN!s4+H1'E@X/iOjY[cp'bYT,mR_V[qs=kb*G%[,JZI;L7VIhEO4!hgb9_iOj[8jPfku
3&M]UqZm/upRX2]s1;&HNrPZ&s8C[WrN.FUa+*7A#@716J+MUEJ)bOdn\9O]]+4[QQOLq7lIl0Z-,["&
r0ZHq?Wu\I*q[:TrIp.Om*@om_>`6Crp7a^qD2@Pdhb1"T/sNs5C(X$q\._qnDX?97Qp3aIdh%DA"#rV
#<QSlSCqt!Ia7;*I6YctmFf#t5<!!5E^0#(k=0(0Z#f7O43,WdF8pE$ITLkb2`Gr0F2MVHF4NI4R:G>*
;L9t69Dt7Oi9F0&*D>k^k\?Gu&Uob4j6&gQ@eQ>FF%^u-m!2o!pZ1Mi\NN#5ioaY7>X!LpSbMeull8*2
D!0$41NUjcGqM&M4DQ"cbge%Pe]H@59!k&`q-_V",C6q69/l>'C7AoLIZC&\k<sI`@->b*1OF#ac^?rB
CZh,`*';3d,MMr55KD'So0)GfOdfFXEsq.la3Lr2g`/9!0Pc]8a0]lpLD&,E;fD$eMV!C`Y@Zr=?#;AL
_U%anr1%GGbb"S"F(Wad4_OK$V4V8\\c"Y&SU3E\Gm-:u2LE0ncLlP=eTP9:c`qPXFtV\(?HLK4o7Sp_
\9UV(GJBb5\sWqc:MlT,DB0dC$U*tpp%LaSG#QH04';=p7lP)FC7f2PIZC&\k=!Mb@->b*1OF#acP+Qp
]<HAM[cb)?r1)I3W-d:(F*DeF@:qZFNh'C_F45#5dEZ`Q4$2.NF1aWBPH4(2F6`4B__R[,PhC/bNde<e
R<5j_Zj8n:cgc(NAU0\,TB#+YShk_2h9R+pGrIt^@cs0W*';3dZ1IU20&PEDSR^h,2ihM4<nuKCSK"%Y
:ZplJhkRCA#8,0".sI63KaDPP&>"oYLN[dIdBr+liR_E4e)0rU+8r1BJ)QIdjO_0=LO\m0I,tmPmq^hU
KCA]kci&FPs4*bAl(@b)ci;LA^\S?,J+$HfnU9m%atN_3]>+3c^[KucrmlFFr6*uDpUe0;/+5O_SaZL)
YJ0t+?i6O7HcHs&fBIL,n_:OfrJTS4Z+'c"DnPo5TE!.p^$Q4%^@A=ts/jnfoaANWlW_*mIr9PT(]NmJ
V:2(:c>-4*m^kEDDZB'Of,o+jRm6e^f,jXRmp5O^ci1[\^ZdQ3J)ru"GgiS)s,&aaqY+=qL/7j+bMMaQ
+'ec!H[bJ4f73&j07!LZpV5dt:Yl'1gHKo04nl_Tekb+OeR>(4F4KS?H00hD]'%9FDY_UkY.4:kB:aV*
-dFjS[@]GM]UM*)k45!*I]hkjoUd2i`fHa;cA`omYT#cLs0L&Fbd$IuG5l,4gjS=hlgI%/N7G*.fKj^G
XJ`8qRZF%cg<m)%kaA>4XH,Kn2'4jMPR%*EemA=&/cE^R'i.^lVMTU8c-C\43O@nmSm1r106Zd*ca297
-U5YsZ#f9ek3P*ONh'\Cbad_U\9V^GG<9R]c-1MqRfQI+`i2Sqa6&t)n8p3EM5.,2L5:Y%`U#UkkEc%9
flLcOXkS+J5PJXMpj'VqSnIV8c?UJJc6rKLG)i+p[W;g4kL_f,g2V2X4K=aKXUl`7hHN(;^5_p!!E5%i
kriBt._f;EF*+h=&.t&,HMKS-kKKMRHd:u'"@(4AkFVSk4(n8WflQMmc0RH6Nh,@@F5/nVbW0R$R9MCe
[/i`SnfGg<2>-\jWi\eaF=b,2V5kVBm5.4!A1M9<R6A%=kKKMRHZ%Zb1\nQt44!?XfK"*rdEZUqD9'r,
F16><bdjpFF5.`kG@fnW$qtMc?B&3,cIl-Gs#mqSQ>Xmo1HIRG:..KSo<Q!!flN^V1OIF63O@oEm!Pe)
A*;(-HhMOI>jpk.H!`eVc>B*;*'8B+k%<s"2c&]#dEGj4Gh0!%mD9Reg""EV"J1XK4*>YQeIW=TSNPPM
:HrbRHZ!hI41")kr1)G]>B[1CF"_^^hKJ8@Z^p.>fK",8SLa'^_S5_9G0\=B^R9/u*&CCVj_DQC'd'>D
VLCX2Ecip=C[#OR?#;Ge6tE3/Ia7A)>COla\a/)=baocZF8!'&k6q5.43,XOo1=*hbKh!X\V7`afK",8
Sboec8o@tYc>iFuDB@WWKc[5e=Gg%#;od=+oIc0,[Mg>6Z;Ig]m9XDN,OTGVDs-Y6[kiBVloDE8q>;3o
BD.k/mBQ#jVk7%pEso>;fK"+]`Qg!DH%pb7-JU`:b^!eZa38s8\_:(5D](]$Ju*+O8N6&#C9Jd)+r`7`
cKr(V5A0]FS=_TaDTL+k4ibm:4_OINK:hIBca!)eIZBt/kL_e4hV-7<R<^_MO(d[Hm8.Yr?+Olti,)=i
hmXWDdh>nGNkX;qeQtU27/D5SSk&Eo0=0h7rS5T_Gsjl0p=tt)X8SRAF6m-hH]FY,kL_e<Nh'\CfJtbN
\2gnXM7m0]T/a?SeDJGAAMA8QQL;lB4W+$%Nik8Z+sPIUme6F)mX+XihX5PWZfd8ESCqsqc^?qW@HX'V
*';JakP`\OY-rBrHe[(o?Gk*oF2N0=`6D6)SE&c*h)pR_GOdr*CLZ<i;Elf-#YW4cEHM,KLko)@p70t+
/cD3mF.JqMR6=pBk?2ECnafk+cJE_kG)i3XnT3!$Nh'\CfK"+mDWVota3='oHot^"a48*PHFcU>a3b'F
Xu74C,1=L!p8kU`nTMBgR6>2,41",$m<kn*1OF#bcLGuB*'7eOHRLtZjQG0@:cFGGkD%dI_ot,Y*luSF
H_&k71%L*Ga3<&b(L(hEl/"#*PG;3cF<#_<UT<4*LkrFC]033eZb,&)SK%'>(UN9>r1)G]B$Zl.a3O3r
ll8+UBBL%Bc`qQXh#+_.%G?$lRIfKW*lZ@Rf'(f/kPDXMeG$@`=-)A*BkPkb34d&TeS[`B7,""kB6QGL
gMQdIZfec/c^4L=(HZ:'SD!M8I\,??e+gKMSEKZ-G$`;:Z1E-^/tY/5DWd;?4PS)j-St5Vk0_FYmAt)$
)g.t+hb1#INhte"Tk;^&DF6f[g@4]mZfg[m=8BD%g%.X]mV)<ah<iFX1OG.QbP`DBBD*<,a3Lr2m(B'`
B:(^"boP-!8+go1TAG<`>7=I)Ds?L+^%H0B2a^ZY%1s3:noF/>G.2,?h4AiaI&W`bR6=pBk?_cHQhn7Z
g%,Q"SmqD@WLktn*m;k!o/sABfX]e_jaJ8dc<L*)G&D]i4H#cjk*W[]03<KS3OeZpQB%^rMr)P&nT,lu
$9*=GeBch(cL,j+IdVLT4Q>dPB$Y>=ShKbXcZ\0ocTU$.?U)TV4kMd$kP.&\Nh'\CdXCMmGsXHNAEEsV
<80#OEHNg<BB_CeO'-S4h%10\Y%W:0\^0U<3P4&!h/7N3]RlcfQp&L9R6>2,46JbflK?e[G)i-fZ#dg0
gTbf]G0\<W%QF,CCED<TeQtm4MX9Re\oC6dD!5WG+X/+)lu(.\]A9'NYIAS"Ia7A)>CQ!OGInYQ?g?f\
B$W"&\JI>?p70fWdrs$nG3g21G;X_bnsnmqGmZXBmcI72gln4;k4u+Votpn#oTo>;CCleL_pWPs+HDJS
'+rVo00a)n]?f/O]q;XC4h@8l]A8dF1OC1gc^?q/p>!$I1OG.Sj6,&TFtS"1Q?LQt3Gr`kc!/qt!F%GH
iBsI2p,,;1F;u;gQd;D,rJ$,a1jPHOB6QGLg[T>lIa7A)r&jc@q'&&t14-abcb7uAg<VS03O@o$3HgFR
A*5c;]Z,<DQL2>JRq(XSh)pR_X6m9fNRoq(MhO(_.$gIMd2O%9F[nB%k\@jU+sKbV3P4#tpplaIm>9,:
cL,k!\!rpO?g?guShk_2`Qkge3O@mdr#@fED<E7lH&eG*k@-NnboOB@-83EYD)o6)n^,J.4^,E%6grss
Q4:N^UK90l[GMN-;?&WMGud.BG<<.o2Z.rZSbMbtB$Y>i\`_Z;V1.iDp:Q!LVjKVSlK=c+SCqsBG)i3T
k7R*oL7_u=mHhL=HgjVngl%Y3k1uS5mESjTl0=il*CnH7k]0$l)\*GlooF0dZb*oIT<l-M5KD+?F)/,F
C-VHu]:IVrqf_D`c^?rbj6,&TG&G[P/bh>LT$5K"F5/m0QXf+5F(=Jp\oC6\co$id2B3nbl<cA4kM55\
c[F+,p7/bL/,6Z5F.]eNS_`]"DTC'Bq)PeE_<i4,fD7LNNh&,7o,<(<SR^h+h)pjg#IEuF#u][CC8R#f
LNIY(Zfi5eISN:!"6Vk/mcU,;gl@s"oQ+WjD>?2ukNm)!GIpR2?gd*[mG,=G1OG.QS$mD9*'6)AH[[Jg
DSsc%]6Qh,a3CZ0\_;>*(7rb*c$DF2DU?ccoR;Ot2B3nbl5tJHn_E=&\TL,LGIoFkB6QFdcL,jfcgc'T
G2C]oh:al<Nh&\Ho*Bf*SR^hhm(AWG3HK8S>jp8c_UB/ZH=B6Km-'Q??#;Ph7+A\P]A&\KH*;:]kOJ.-
k<<8@kFDG)US"m)*C"IVk6CjSh<i5\]\i(df$BQ+ShJmTSn%K,JtICuF8S.nT4@'WmC\US8%%r#(1GnA
EH@tEj5eKAiTXZ#h1MCKGP%hgNh6ssdDhoOqg>B88))k&p@DVR50)">o>lC+\^*;1GsX`.GC+9nG;OZ\
aNpF3\T^9YcEVHW*'6)lkEar:U7HXNo1Wc!G3/)4/A8BfVf?ee4g1Q[*J]H,qM(X&k8%[UQhkt\4(%:9
^!;%4_9]a[DI;\lSGV*%S[5r!F.Z[)4_JuNI66',T!Q$lJXtiap?Wb`2sBGW3He`^c(!Ft2`DPA\_;q_
W2J\>XrJHL2eqPk`uuY$^3SAeDXlNFpc7M$\*W:Jqj_`"j6&?!S9(=_kNm)qi9,!$[kiB6oCL1LcKmQ7
hTO36pc3L=Ds#i=Ru>KqD8Aqm__Ab#B^4p5Yca#CdF(0;3eiZgcSBUMit)f"hsg5rk<?r4Xo#Zlh<jtt
IbrMu%JVrqgPu*@QZJe*]A:Hop<9l+;EngfSD!MVIZBuRoQ,q6hSdaFF1IhLh)q<rYB+W?WUH`*FgH00
]oJjH2"\bIT$5Psr,*U*:..M5_Tt%7H(T/M0DBP5II>M/3VPPs5.BnASp.XknoN*)DVWQdc^s1[f'V8)
T0'N'B$Z\9Gsj`tjQG/UDJn"LeXl*P`rl-`(J!q)l(JR"Z(kgm7V:#tN^H3&rT\Ono;-omleL[uH!NZ'
Fma>K*'^q!kKKO(]:F#8g[oR5]A#@?3P4#jc^n5-F(Wa8ft#h_Z#f7O43,X[\iEN'YW.q$F*-`SkSSV9
5PJjTC<IbEU42(aSGO9jn)rlIc@'$8cb&O]?g?e^m2S@2cT1a1c.R19h"^6H!C-%\]7#g64.eZClK;ko
cR\cNZffQ(fC\Z)fQgF\[qOrir&g78j5rB]=.?S[,$VX$7o*g^<mQP=dEe:"]%V1\Lo=[or4LYLG5T"U
TD.'q^=:JUff=N,\^0g;oR>*RG2n%s\^0[?3TiSMiTHeFc^4KRk1T?^I\,6<e'+CnkLb%j47D+iG^5s0
3]`"e_9cE"jr$$ur1&S!(58C@kP2U$h<dl6>e.He5KD)Sg,XVR_Tt7:\T'k.]t6F_T8R@.eUHq3p3`!p
A*<VIZfcN0*'93kk>C#>mE(d6dG$`DL@3sG)u4am6W[J%&J=]Z_s[4YIbsDGkP0=.5@8?lpc3e`T6p,"
?F/ffrS7"Tcgc("[r^tYc@);#cc*6RC-QA)gm4RZ[W?',Z1CY4mWIY31JaB^8&s!$ppjBl:GIL)[N$J8
l5+o`T:\ogF02(<[r_K&\t=n)[qG7&0'>E*lK>kI*'^q$kIo/h^=:IhpGqD#kM57gGIMY]F,.*b&cJ6Q
F8R"Ba3O)*3H!]QpIn8/4VKf$pK;SHh7'#S0Qa_a&.qdSn8nN_Y+JLrF8XgZT22k9r7mU1F7+,IgrShB
IZC%)nT21OgH##=gY$YUT:<--ms^:fA*90Ego?uN[<'YMk@t[5i8H7dhZkW(a3ZP_B$g'h+sP_sr&gaH
:U>-?*'_KiQhu&_h<k!J\_ZZJ\T'k.I.$U&IbnjaHY,JYc^q39h"0rWc@'TRc^?r:cboN<G&G1BZadR"
aBcEh7n6?ekSF+:6gnOKpc/p`ddV>U*'_Ki4o4shbNp35a3X;IJ:9]4cLGtbZf__BI?'q(pN,lk\_>B_
h-S^Z1[f42KUl36F6jl.&+A[&m9K%l#4+FAVdnp-3dttpcQ?c_C<IbEU42(apj"AST5*Qa\N)nCEpe#H
*'_KiS,'V]guit\>dq<c5>U8$T$MhFTB#+)qg>rH1OG.SL\>fUgqB2XI63.\A*@P'I$(*]o(,;)hT4"Z
)*34A6pt)Hi9+&+*'_KinT4VU7cr$FNh;g4F4n+M'DZp?h<ju_<^33mkP2U6h<e*)GCJuO(4P[sG<=tO
O728a3HdU&ca!),e:qf`%"4&+-SojVcu[L*j6&fu$,b*fq>!uOa3SVuq,BGrcggU[IQkm!nT4UJ5Hj)0
Z?)XNnT3g[G5U._m((ir:!K9ikMc?oR[rL%pc3MXS%EZ^:POn%j6+8Wr1'I]/Vf.<qD?aJnae&UY+%Sp
cgc)"I_NbGnT4UJ5KD+?o9=\faj0Etr#@rAcW,.KTB#*cr&h6Tg[t*oDVNR6hcm@INc*=mR6cmEkkOs9
5QC`c!;C`&E<~>

%%EndBinary
grestore
np
620.64 65.88 mo
691.514 65.88 li
691.514 9.18103 li
620.64 9.18103 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 207.966 722.71 ]ct
[70.874 0 0 56.699 412.674 656.83 ]ct
snap_to_device
<<
/T 1
/W 217 
/H 173 
/M[217 0 0 -173 0 173 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS cf /ASCII85Decode fl /FlateDecode filter
/O 3
>>
%%BeginBinary: 1
img
Gb",k#CKKNp;bLl2Nu6VHLI9o6379VkUiKP6*Z!8THX`!"i[nDm^h'EDkj75Y[FYB=fgp)?!VfT.8jCi
OS=7f:%$5RFl#A1+`Mq'chU9"b^K6Amlfj*>93bX',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m
',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m',)#m;f";2h[m(dTr>;U_o-X^kX=m%E.iQP
*%?kF?:Vk(raBb_8T2,JDGXs^NJXW-lY(a+_UTJ_66$G)`JoDs;?js3jh9T'IMK)!BJDWP(_[Q]F?2"Q
0-#[N#msb*OYAl2)(s(t$S-O'_de<l<45-EP2Fs3ARaq&C)!_B=m-$!`?n]K4:%6Ron5g>Q"mk(m"o?:
a-`6ab2mZCL6?c^DX!:%aVM/%#8_Q(WL9-bQ3_!!)nP-"AF,037@dL^-DiCDR^#L8Z5r]p(+V-p73e8+
`PkuB)&lc+M5=cml?]0BS"#r\Og-d]).Q?6d>2E$aKuWdN0UWT*_]7)Lh:I$8oeI^L6fWD@Jr6l`(Wj1
9/L.2'7C?-6d+c5&i27b/^]M7`-^Ij+d!XH4b,9,`8jni4EOSn#9F`sLc@Wmm&5e:/i=;@f+H80^0?8G
#8Ta=m'2+m:+eC;;qDW+=J?qT!tcAK3?,sT@q'I.RPBrb@9*=/#OA?+@n]Qk75K\0VfuQ;`Z?)9el+:X
73e8+S%;$pH]Q1b`8k/[@i(HnYZR$E.>Bmc0_1Z$A;mXg@Ua@1g5d8HSa(a1,$7igGUJfEM5b9IB'dl$
B589T+7AU9&i27b/^]M7-hn_D4J$;fm_f`.elgEr3%a/,8:oF</d`8UG0Qa?h@X7u8,>9O`9*LmYg'Sk
[hT\T[_lhLgL-^VGu\ZhiqCYM>"B%MIoXW,/Dk0uD/`7e:Rtc:V@F0^=L$WJLp8<t'm3i6gOqb*T"#G/
p[3]'fOgDW]?n17@#O#sXI\G;q"BYX4O(QFjaEh@>L9=S"^0Rd00fBmpDmR"V@F9a=GeLf@]VB310qaG
m56N?<R>BHgM(NlG`f2Sau4;];+C2W=M@3>ghSq)%L_:)G!rU&p&i9j4?PUMIdK;\4J!BjeDXuV^;/"j
TnYcE7Z4anWLciXD3t$S2T%G&\o.g)akbp5r+UMU>2^khg9Y,]r1>P=Wjuu%lNB4K`G0TgGs?mBok2g.
_#HI-3;^C&5N_)3\?!*pR`1GOF`\McE[os4!`oY+Kf-(WI]J<Dd'=DYA)#tdGU9fjmt@J5Iiu\(I%6)s
NY<Rm.u!N1ElC9Ak_LrEk?7d)m9-6.QRD<Q+Q`M0;Wc<Af5/TM_QRDa@nn]%\mV+blYETQ;[(jk3TqiZ
4)V0UShF7Kmt'HWN>g(Nri;#3oO2A^HnG'l:MJ-:@pV?jF2K^%HIG'nPd@mu-T;^eYqihQG6YTU(_Um6
S'"s,no`>5SR)*j8u.Gc*![:HR@UZTnYJ"lET8c(^5.#/Jl0t`QLQ-Wl\pK>@qR+SKX6kkL@aI"]a`Wa
NtV4IQnH)1d$H21<r-6sbL@TM=HN5R:=q=@f&lRkN9t.aI\o88WYKYiq2!2RX5NO,T4C)GoY2:BPD4a>
L]2+YpnVVO8GlPFYCrP,*$t#UP4Zp]a,G,n30&d^$,'_7g3=q+p4Rmd`A]dIASTm[3VVKQ`ITEi!7?34
Ln8BInD"GHD_6cZh^UA=Np'V]itVIN_(N=$*0Zd/JZk+*A"#=B&n#:c\,C6*Qb/s)3c\;0Gj79d/+rX#
4qE\Fr6$o\1ummt8\`*)[(RPCBZ>hMf/%I`_"r%kofH+5T%E[@WJ'(1?Pa\+4R+KliTm"YOn>uG5$=k3
Sf\&dmhs)'D2k,Cj]*`+ULPrl58.>3'9c>\q*H$$!gh3)T@T.d.Z^WboqUVhg7B=t1TNX@-M04tDPZ8J
2OVU@'OU#MrrVA[r!F79rT<s?0D]o_h]<`M6f=fWX]\c'[jK5Qd>"HU$N7\l)s]%]<:'7Q/ULW)H`'F)
Y#[Z(@QtD;hUj?.`n&rKe_fPrkGujgFi:g3oY!I<k<+!k=YA4YnqOo+4bC01ml;4;?"_HLTD5TsK7'Nn
%MtuAiOV!iQYT=X#06=IqDObW-c:h1:S`+8j\.5O)e7s/[jT?^QM"JF-bdgB,q2%Oh[paDq6]tsNf=jG
o0nLWKAaHt.\CmgF%4c&Fe%'TY;TT@4Kh,qF^+5`i[]ZC*&F(NG8^(D-U5h8Hf$#27)"+cj6Lp@,mn"G
.<\/J0#nDq)o$DI48Dd!^-VJ-e5oDaZFo$<#;DJBg\>&3Q+gGm?SGBjg"CbEIp;eLSqH>_j3&2+"/0lD
LuXeO2"hQDL7Jc?a`)40]nX;`KosM[m;(mTAHm49#:!l'?/t`[Ws@DNKt7(.L6TZi9VbqWV]P<7h7%QX
S7-$U2#W`ao4$p5bII)"+8aG24q.")Tu,F#l"th0lul[*fBQNFCSN?m.UOTZeQ'@VcZYZ8TC4?Z^>*'j
Is%][]7,uLp=;XBY#!Jrd,1-=A[9I,d.pN1ATpLXEs/@f.Gp$m,="B[AT2#N2+X'_#L`F*/`$Kqdl2m.
E2r1&EC(\%8KUHfF*)%7I/-7ChU2N5<\tQF0NOp.a.=+`gN+.p1)5W\n8tj>rYPIQ.98pqJ"-b8/?K2s
LS=5S`Rgr'HsN#Ha)t\8*ptZ^3F]Y"DdQ/#<l'ubZLi5t3UXF!ZL>b%3>n67Fa.]<qD!#E."o-,i:>hP
l#TA\;.@5I;L]]>Slbj@al'_g;fH*m`n,LnX*fb^2M*o<'>PYLoY1UUpgSr`s$i@0:N+!.b,updDdJ!M
gNo;C7bB0sqQ]22%OhpgDqkVCY*Y[J]Tjp07/oJ#Xtj+Hpm!Hqr$*1'UAl]V<Va4'iToWHRD1!9)fJe!
qYdJi-?uo-<EN0HMbdBqmUtfq0:!2q?\^A2ilgQc_6Mu3m^9KN&N_fAfClCEMsF1Z&P1qX"j]nM\r\T8
dVgT7[0bjTD_]1Rk5MFf`0ATCif(("h0&.(U?bM23VAf/B">i6?NGCl7-nDPU<1+_i*"#p=;grHrH4b;
M<AR3_b6s'OSCKilS#(iG?\XZnCPf`d4.o?c@lRDU&QQdUo7:</0G=9.V/(KC>&1e`f(7;CR(:7m/Mfs
f1"a.m>Q_Njm_qZ@!q1PdG04Co/B%Vn`KE^<cOn!^<*o=bPiAa_[hd4RD-D\0?Z9J@;UCc%sp'dIS=+?
'9]KuoFmOfZu,YhM'P8+(++HE(k8N4'o)Oq[62O^?+$uFX@ed&Q)?nb!V^7*cE5CL_lK;ma9%29Oa50#
R$FS,Ri[\F[*q1Caa<6TK29bmnVVP-j"DE['#o`)]H9c(%fnD#>?'oS%MmH7F`LfC7=5s5$gjqPAanm!
*E/OoV((FG`D9Uhdu)QQ8,mLe3#O>L(dl$?bRMUJIoc>J=t9,sY<-N(h95-G\GI1JI2C4k9<H>\nSYk\
]+uI1g<DdF]1:sV+#D?Z:c$[Fe\HdH+"Z)K'\XYUrdN),K/*XpB&![?2;`*,6^=iRPSirOc&U[_pCe+V
o+d"MXU@G7E4teX+M+]c92@:%%gcV,_k(TlKf*@Mo*cF0r^%LC>a)GDon3s==W+Ybo"Ts@*3G19H-JCN
it@sf1B+l!c$q;sdJ>N5f0`8Q_P@(j'XN*Ooi(_Oq_J0/*m!-U4d<XLHT5pS^UdfK0P2k;b+nQ\)Sa*[
E2mQ'4_)4aCO>4[p".$Ho`==J:P*uAr_)3CR]")Na)?q%]f#9IEeE:s.]Tc,_3!!@lY)+3D]0]1^7H<A
!`+k.O4etq:#;K9_U?YX]$O5TRM)[[h_p^#5Z)\_jJJaUS^T))#/DNF5HB21=Vi.ms)i6IC]&gEZ@@"H
3G$H#3W8s!43A#;'dpl+naF;o[,%lb)7s0??P_]2A&_#3A5RP"L:2Mpk;@V#I,!0HoCd!A"pU='OcI1P
@8,k!Ph=?2P%#de1#hb,qt(aY?F^:i?T=)ao+$.T7b:G,2\$lJ>\;(oju]/L.>Ofj`F_e5Qc78u_&ZZc
E#=X=fgCICnAn[B5lm52k,O`4P,cXg*L:Xpgo-,AC&`m74jq@%F$o'EkF5]Inc.gY%-M6>]d^R!pS[G"
+_M=]LH/S0ho`.ELn+Je-/E#K+,9K(.rjPd^7>h[g6648'?(1p6+Z+r6[Yj'2.n^i:5XK`QY?pt*"pfS
baj,hF%4bWJQm_]#=dWEZ"KM8F$:=EQ;kqZ'j4bO7g`E'/%[k2'j$++=)!+iLbU`i-bTFAOir;+$\&TH
&!=%1<.%73H<0"j`>6#JM8;80',80;HsAH)g&$WK=GScPQ`2]LefL)4-eHgO=D5koXoh%\T@eU.Wq:.8
3dRVG5"*,\3JnidBs2r`OY[IMcRk.p'D)6J:rJ;@^Cj2p5G6)^0>cAjc'@ejYc=(W-&4"%<OopcSs;0G
NXtZ6YN5#$bY5,\nsojYr'nbW%?T&1*?o,@?a#KUb8-@MiPMiBd8XO/X@V(,\i5ITX=\%30Om%SkBH,F
"SgBAnKH-ng4K)AgSOoAm@Hs"!--+^VL5q8=+&XTp:3ShT,IK/l'oVes#=?6-l*f4HTO+VV2F*b=D[B>
7T9M-A8LDL[-Nu,!I]WlFjI,?0LkrF,[^>:3_AhV"bgm+QJ;2<=3&DD:Cc-@SLfNDmuYL'_em*sY*B?(
/!Gs_h4*89)qSfe`[bm((QQIdl^?KTDDM!k@HSR)R]X6Jg8+57`/$RkD3rSuE%Nn.NZ#gk"#p7RYEpai
o1f$Is$[dBkLRZ4m!H;`otmq@T%q1`AFAAjEm$=Fd8ld."-O?noi8O!_*.J+HE?mfA%^T6;V(KehrDGY
"i:UCq,2'RLpQsmcL+V;UUcsU/d^Ze^5p(]:0?l;GK(&:#`i'GBtYs&m[;5L1YQJKNTn)YgiDSl/H<L*
Qg*gI;*gL^Hl2E_,H=__St4[9@ktV8rIdam@id/44(F2lN\Rp-e5Z)\"Vg.ZiTRAd@<LJYA<j@,q!]#P
YOrRj]"@gQkS'of`H>EA/5,co[3EOkd$L`%+_(t%_uj<0lOc-1bjrD^)BTU+e3*oUqgO9[rgjJ9boeV5
:)b:`n`?@Q"iQhrGLh=JSl&,WhAKt95!T"]4PuF,P9Vm3,4bE^QqDU>i6[jW@lQCLE6Mg'9@H(F<TXKZ
fqQN!FT02&a2.H)?5JIu,(.'\H@&4T>^>Q%iq[,phX_>\8D*$%/]?9`.V#Nth,.MmY#h2A4^lOcR0g^9
IG2"KEF$77@VI5T:\#Gjs0Z#&@BSY)g#p\gr-Z:/K2\<'ndj*R5j17C8PCn!%n$>3<#%M[VA`d2eBmXH
("22'6oY;:=2m@'G#R\@?'RDrQ@':^3A\pK$S`Td21=O5I(_H;pSqZ$UI2fZ3<A8u[tOQl1M#i9`U8Ok
N`b2:O-XZ>N=X.&2e)YfLY=^B$)D)1@1jY3Hl]a$UncWka'r*SV%=ar]H(uSL8O)N&+Hp-C;&I0HrU@g
)r8lDT<#^[8+7;rjqb&bWhf;aO]uA]]BIl;]R7VDB1b1'6-ZOe*IXQ<VpF;;o,EJ$0sJn%>F7"mG.UeN
roVq(0ff3CrOG-]j9t_D*!7:l><VOG_[Z-ELp+_*J9uTYc8[N%bmC/Ho,kLW@sL$l47MsYB_#N)(m2!E
A+f4q#.bdqUnsbF.5SRmnRX,p/[-4Q<>QB95^Bb`J'?5ocaO4\)@"(G^)o5;i<(NYE)-+Hg0GLl/Us"!
Hq=#VHV=*EO,LG`]0I?XUG4qp.`ds0I*H]GFt23dki^1.p_RcBU4(_/XNSZ]Ss,HEFX8@!)Ber!f@kAE
Zt".u*Z7jn_cMh40930BH,mTK6[4$6$Vo_`Jsn4!YR;)9e1aAhY5F6;LnCC>3<usp+`M)lp/##hf61=V
W0uZ^L0=@+j=A=(0<c_h[s%R0i$FJFrbpG=+^8g_9:W^6gkWrDS/u/m^KC#;gMQ`nq6E-Gj"cQn$F@%f
>V`I]_lr=7"rY=d$Fg;]Wbo[Xg9l2GgtGS@ce%AumEV(`cDt(YI$V8\806+$(+2>>WCO%&X@MWdm*<o)
hffV";rY]_E3n_C=R"`)-smf_q"a,DZ#'(/aY^.=:5e"Gbnog*:A>"<:"m5LLga"VC(Jeg&H.smYTH+k
/G<_S)KY^)D#"E@rm0MgbW-Wjd%L4`d\d<'3$S;Q[KZW".JXo<7`Y8e882Q^(S"iuD]0_GI(_ANI2G<n
NdXQ4EcSYuS,a@PekpKe7QWEj5.*"7*Flck]8l$B1SGY_Eu2_gESn.Hr$O\o#g7bs-+VWanY%OPl<05?
]UrF!V4KuI0Qp4>hW=5!rJ+Lea>?)F%LY&S3?n1W*Wu.'.7fjk6t@jY`_+DkEe-C]/RU;&0["g2NS!Jg
@_:7E9QXRacH`_S%pp;\Vt0NO`7fB[5'1+WL3h[s#SF4\^XD_>/RrE>hB/aVXRj^QhLG0kUsC<7.Iosh
jqD-_pKo9;@@/_?@Ag#PXVjbmQ$t82NIK^q+!P(?Zlj!%-%3=Kn"#U>=;tnE\.._Q@6[GhrO-/_&pNuo
C80pUgS58BH5Mj9@M']jnMS#j?Cjsu090f$lhip>pU"9teqc`>%84BAX6Tnjm.04[C@$pigWgS?L#j]6
6Jl_ZGrQ#ji>D%LQMsN?k=;ef.=YF>(=C2Wp5-sjR/0bq+,9PgbWY&\84i<OpEA,NdMh6]`%o;uD0Ejb
2g9m8#,l4q.q%>6U+r+YBO[V-W!B&7hK[6=:uuJ%*NU:='@on1]/_XZ/o6Roefun)OiVh+2W&,5IZB;o
g\fs>n9m@p=d6=FJDm*cf-fV8;5.dme[Bka=[+:2X:OE1U</1)(s<r!n?pB&0=:(PQYFGpfMBF`7UL>"
UG5nVmUdll.Ge^?XCB::>7S4h7+X_j.)?SAe].Bgc%!DhTf]?H=:_T/kn,d_JMnUP^Ku4Kk2tY3F23*+
T(mZEc[eS2P,m%*NV]j+fCD7qZ-guoVX`WUe60d=VnW\;\\T6qqALa0O*eh5QPni$O:V3uMMnJkAOX?O
b<1;pNE$IE=[1X2KnfEB_OMk)NA(5n,(?elc^;a90$F-WRDt#8YB?&p?*?rd)-&c=\;oYMoJ(B4@X-4"
,*rn(Z'>gMjL2Pe5+lhnC!.A,5AV)'';KW,rOK6lI*qqOS6%X6m<tqYX&@gclcP%m3W%qT9`:;7FUKJ%
]Ek?Z7>>tY`tGY=@:%Z7[k1t*;R5.Wb*O1b4'(8)Iu!b0qnZD3EW,Rj3H0JN0/:D#1gfPqol.T&Xf(2B
]=?H\hq-?7e,=Ed.hIiJHP;pAUYT6#q08sMd)t-QGl<+NiCI1ec;46Vc:[s@C3(:MnOt3Bi^@]CLm("Y
jU3ZBl$>]Y6UP2rbI2$,0if^:Co]-p@fB-ljDItFfdOmd6mqr)hNr@S]XYJId):EV#A!.c.1NH3-MQY/
TA#3M@mZfDS-<r@j%QfYL#28u`\lI+QF+iC/H1\?A#uZ<>:;]LkrR&VA%X0A>ShbqS<L>/&0DP!n4^nL
Bj79$G5oqhg\EVsX3#h*G)eA"7$+UiN-q>\f,S4%<]XiRKadjTj&b"+74^%V;-UcuT92;^OtS'[96)Me
Q9JV=4?_.1+&[L"G"=:SDq"Q%Y>&i=AW5]VmHOh6Sk#f'%CKaUj2?<)pVa3i-t3$a`fq.FLuJ7m;&3LL
B-hFQoj@!PX/WkGn6F&Sm#da_1$`IDs%E)^.&$J=;u_R6T(j$7#F[4(WP+]ULdj?^ebECSDpXj(n0JeH
%%b+k:mBGLeo)//n/BA1RSuG*\Z(TiP<VA'A,>^sR'5,=p#=OEg;L[EA:l=@3-N-D=.5Yg@:h]A\?@!q
+)9+=^8CqeDJ..[M6(utf*k&'k,/0=p1$9tXFFj!(/qs:\S0&#SfL!?CPIRVN8s%p5Fa*Bgt;'.^Ig;@
B5EKY*])mcbr9B#PS=6/AL0&U4YDa`SRS3[p@P>)M'+.X@`oQ+r]DS*3l?B]HGMYY=+/;J?Xl5&E[-Xg
coPY'#Mm-/\ioQTLjJI`MrG+m(c(gIoR<ZS?%6.'m8G*&NT*`kaOn1oZ""4@!pL6[q$!\19CI?55mZ!m
5*Pr(`!mm(aI2!:?`??*n8..4=_DEfA#0'j1%1h0H\305N5`LbjU3YO^^A8ja)WaRc>es;N=<(o0N!ZA
[p/Dl)"VD#gjFCG4tu_1h.B].lH?D<4$)gB-h?crOBPq;fVjbF)S,MT?Z."BT@]\s5]QshfV3jk\!+r3
)%g>s?*4Fgm<dD3=U.AOjeVft@fjkU@9_+!iMZH81lW"P?hjPW6aLZd31_6^qZT0gV^5\`3SbL>[P@=k
MnWHRf4)FL,'>0-9C]]ps0:ZY[DJOZ47D%Q=di*=j%K#aG5XM5?QHDC6/NGqDQ!Ut51K/RV"430&HhiY
*BQ-MINR9.8+L$JGBA<2)#jAfN*Rg<04T5[bf3o8N4\;$52E^5lZG\pF/JINi<u:8FA1hFQL05U(VPh3
,o"V4j9t.i$7dHj?3f>jp@Mk9.d:aAYlL5A%*;-M,P$O8'h,TtPO:BsmNIEI@kE+Hp%1K]BZ=CrI(b)Y
*B&Fto>pq/gG9''mnE$hl:=L=i.Nc[rmH5bI"$c4A'+,-;m^9E:>)@_=P1CPn!0KL6Tk+1`eT4#4JRCD
k&X@b;dfHIF?0!R-_]LB9?'(-5(u7NQ0G[Z9\sQ'Kre_nJ^,_.bDn<IAmE>%J<[U\QEME@s&39q$@PjK
G^s$`hT(Wfh%n#,Uk;ZpW:G)\+TC2l#7H#GW^V%sAF(0_^7kF6]Jb`!l-DLoHH)8UHi;79e$'M:58b^4
X7*n`A%">@XBqBm92+A5Q*9Q1Y0.PA/*hU3cRlRW#9'-`;U=bJq%$-<r$0cr?;"ikjf[i1X?K,'J$p\*
KBoStDmnb#[A';0?0M41':a9_fJ6?ShcYn<GiF;J?`&4q(acsYUKMUUA*N;"Y7'N,l-I%4qH!ea[eKC>
A:5\C9ok)&YE@HE;!#alMDU?eYHPDh)bg'*%/Id'?sJf*d8c<E4Kh.koXMp&8HWtlf9VAl2>tKLmbAU#
L,if2YKZ:YY!2MkX`._iLq,b(ng,(=<+#HAB:RotJ;uGPg14hM-Ll])=CX<S%.Q1t`7I56*@AHUF1;o<
.C3"n-"!DX_0\Pi;Res_<prN42'+:A@3$*)8a5sk3UpBsT1<qb:<,&1]iL"(^lC'qQIAiZ]3NlHQ*t8@
5([)KaeoROC!%dgHq1XZ/FU]p#l>Gh+!7JCd,[S\!&81n"MPQXr!]0IZ[JprZ.$BuZ(?Fmd`4F"#B^:2
^G*Dgr7?9OLPl*kVHNcYYp8%R5IO"$Rbo6BrgRetjE'j=q7jpf[:S^=UqI_.iHd*0#=ZNGrB80<:4/C.
^#fS`_(7bqcQU5>_-`D`lKXQlbd;cYB;C#$&kYs/j9r(Ld*L4fm&^dClO3>FKkU<5]I0.`&>pt9mBGYE
#_XeX^07hVeF$YlnU<u"5<_<DX9?c,6c.HiB=GDNIJbM>i.,rTA&]=U-`'$`Rk''%Hp?AgnQ;A"4_+/]
AYFBA]haVuFF8nY,LUiA<qT)Gj"nNoIhBEaH(Q>PAf9lpDC[]m6q_?$DNjPa$;,G$'Z*>H+ur$%YG1@5
8R9dCKJrQ:#@ch^&c!&4P]9p(ICtC183[o#(L)%Cq#b_cR$<m?B(=hEB=1:OfDBVYH9O;s9\c/l*ffO;
CgSLeH0)1mR^:Vi(gH->Fj(]rA+X*8^#=mfo2p1chX"Co`8Es%>`c5.,X0usiX;BH2CnM36bcFk]:(`,
_#mTYS!K!ZZoel/G+H?jN-D&i@J%)IdH6;XmCKST#HM9,&b!?bQ7npWBMq:[0cAfN7Uj*<(b>-p"3-.c
plOu&HZ\$JF2l4JGg]^_/OK_2N!l^r?Ma9inrk<"\_lec2g:U`2'2TR+kjR5h%oa-%=iV/K*P.Ir<UX,
6Y,M;@Te-Ak7pE)3AQXi[hESI=HD1Dp'PjS5.>&R^$/!R4[cV7&bh/@f$p)`<2[Hg`0KDKN"q<KU]Us6
4)F^Z'?fag,Je^rk%`0/48jT/f4jNHh+K*21Lp9no^O+$YQ(+P>35(F\J'@+Vi;;3FSQmP5%%U"RcDke
F26+[\/mV-q8kW$qD($i$#0DSMg7lVQhuHS[9sal'#&8#kC*VecORnjO#^liPGC<qZV&]%foF$*ha(UV
9i4bem0[?6ZSaF3j$K1hZZDfKB/-9tD9J8B[R4VbYHja`*]mc&ko!K5D53lPK[JlV'L.%>miGjP*tl:O
5%ToWhm4]N%h"U@b"oa[CTDRU*lD?#H]CUl]KI,[=L$n>/UZ*@J\&&5o[Ct78,?;==aV(GX&S5!.?f%h
pX:fs2W&+pa!N2E%+MY.Vq6[;+K')hpd`"$M(R%=B&aVf?[WcU(>;"!K<@kQp(P3]^*6JRTEP!o>J=(;
<8tkpCL;h1T!X2Bq0O*bGI03i<94;!N3E9,)mAi*l%2K`T:L-ro%a'G6iTUO9WM8ghc:L#O4^$oKkCOX
]asgpH66\;H_bW_=aSo[Z%N$:a*KCoX!tc#5e`,mI,0b-eu`a'm+sDn%;2=%)#jU>MRmNiN>)>^hJ5%E
'Xldq2Lo#PXCqHDO>?##Q+)p.;F>q&f>!U>ZF_HMO:>[UpXX_W.t4R)M&.[cJfiR5^*!3"ZfeFTNQcBc
[-6iC)4q?+*BQU)nJ@#mOfqPUSWrX.r$b4Yf9_C*9tbc3(p6iY=JRr&]'\I%<*+A%[:d]/<l>sb4Vj*%
S3W.IYjKDElq>sp!7+n(M[u/?"SoX*]N)c1leYpTe*oJDrHfua5"NRuZXbVlq.V8%$*PA.'GmT&/-Xr+
%op()i_O%RUYgWm*Xa)e=JMisbW"J4&aM7Lo.jPn-9c=jQg2VUGVMBim`W[ReuC=KI^UKIV]ql(@Bsna
f1p5G8Uc<1LP2ia(*8e<eJUkfr-d^9^4r@k9g)"8USSjGF$+?#s2snK@'oed[#EDmKLiA+<U<91h;75R
UCge0e^@PRM[sO9DQddis0&.S,%E6L.S,c<1M:+L(.dnp?/K)BLI`(B!mfAUMVm.SLp-=2C^/eLpE6MF
M=MO8OKXVm?d\O`L_n#ZMBCSjaVUCJWI/&]*0Xfk`b[bNeeUgEZ(n-UIpTC,#5/5,q!cHqdo*qcFEmX@
MiZ*YB(=8/LK)l\@P0$T9BgcIkGqundP$o!ggcka-:8:)'Y=N@2!=<qPM;bFVK3'K'Rd*o69SRl(*C!T
L!Qt%^RA3tS^ji[ZhMl.'N=n^[!g`U&mX=FD96PmL:cPQ&.eRPgc#%=lkp2">@Gc>oc*CZH/J*/qRf&h
)(ZHSVd_d#.LCc[D_1\sWceNIAr#>J]@^JZSIK!bIcr=sa(/cNhg#kEnKI`^jQl[h8*+SIkLdX5S&`-3
hr&%9&cET\pbAF*#M-mIKSN:J[W7P_d/1&-NY1Jj:#QK<MLqH/n_rjMD>pTI<PiCehd%b%1.Fnb>A2^P
4d3X7_QpGTGn/n18?>cn'aeT)d'sKPKb:q>=]V.bc6,Rin[U?oI1j3L"M\Qm9BXdGZQO4)^i4/4b=q]b
&a$,TaI#f<eSneh@i8gi,L1`oP@ffFf+/rQ0k)OpV"jfSm%[Rp2Oo,AnOKJsRou(^k]dUYr>CC\kJI1s
pe5aM>FG>C$cf,>f(RkK/b-*:3@EfdqWRNl5'E@6LC.C4e-,SN<\Jgdh?PA#]$%CmHR=.J`C9I"cSs$/
@=;V^VU*OcT>W'&".qFh`2<F6j3S'jiRr9s^15TUIlP/Lp^D*.3oT$)5MIdcibQrM"';s+F'Xq%[*WlI
SM:m)dTijDp"uX-Q%J&"l(Rk`q>1*WR0C[``q/>WDSG>Qap07g[`jNkhk+3_I"l:!mIP&^fpR/9'[?P'
I<IkG5IZ8M09O%CE+[Z?Ya":N1<e?Uh%[TgAG>XU,@gRm&`W#(=giJ1fJh=GeNZD%gD0F7,laduB0q*8
!1^e*KSE\F^U>jX`nED9%c7DW"0R/0P<F6gqhTSo[HDrD+;THBN";rqA(uS'VHEe?9sMh:K1PeJ[#S;t
CaORXHr4/OR)Oj%f;8pfX*jkjakYUp(X9(%qYil(c3m8Y5B]2S[@8tY<LLJ/M/DFs36?1(kI`LW`4Q:<
;l?stYKscDO+LAZM#M18O&k_lT!J+M)0.2%+8pXhQTIY+1E4Qm\^J3U7_N3N,@V[TrV+5cP*4?O_sR05
E=#Vfp3fJ?bp;1[bEt%[4+&8`p:hNgo'Q1i@9MeWnL,Pl7G*)iC],(.9Ba)7oNXX:(,O-PRDh!B=5B:m
XE."T!42H^pb1^oLJ-d[rHS.[Fdk$KZX5P]PG*q2*mE?W4d<Y7eF(QWNiUL/O#jI1pQ(js4_'6n?4U*,
iUV:TDPb5&I1<<mjjeB"OGe1l[<'Zn6\=>F'>ErRIOQMmKZ;!p]?+2[,i7+mchMilCQ*U8o_q`'-N]o!
<U2^e0G]'0oG0u7?3YsIo=`f;?5_%oF,r5=%mt`p.6m:8*Mg\_%UX_BTO$;cYJ$q4,5Qc.$PL+!oMi"4
+"fRnPV:Q>5.,k*'m%VIoI\pH+?pS^cJ-6@fgT%>\tY/na`r,]G]j]3IEb-,F2/>/[dgc"B99;%HHX&"
qmWR5G;5ubH9Ae;/FuR2;LO>KVR)$6UAc09?Y6aD`QZF!*dI*!rCi0sFa2>#BY5^-`hXKA+CXWC:`S\5
g%Os-Bm_e1#XZX77_ZHfq;Q`LA$UjIR#LD!ZQ"gbTAs%\Zgo-1l_AOrb3NWpqh&%!(ugIZNMkSlbfTaV
:A*EINu#23B(edC*oZUYq2Y:u\mIq83b-rV-d<X!V]!j:)</OT@D3dtOqUkTapE;5f]OGg[)>/O9_lR!
m%1IJAII,@lfV`JSiMU]r_9#C#[WGi6GZ>,-[ZO1A"2$3%`TUe2ADGL[uB5:3>aLL@8$WSI.7Y3lVk=G
oJpJ`I]P?G%^bH2D+I?UDbcpiBBm5[_fuc#S\.0N2tNWRYIQN%Z=mjNMRNtQ\U>InIZfbqBNniJ^I^LW
<Wfg2r@48TLT>a/n^U]966gi!2#E"2[h?$\CW_u#;eaFqHtUOp3/P'-0e^5DLR]$WB8oQc!NBXY</fcl
FM12W#DG#[:"e)^YD2cm&V7-&^c1\3KKc"gT#6EY)/lbo?*AMP^tNLX]']8"EH^"aofnsfo2Mdb,V%d=
i:2[fiffY5A7jF/5KB%X4L[["pCP6VWO)Q<'?0Q7YdAGOTT9VGY6Q"Xs6:pk;;j&$i;p&0A.FIA#B7BW
Lm,P0[UnMmBuBpaY8M@":ACPj/)0cPOQW:![\2g-j[fpDq4h=kR_9$eApaR^h8U<r?iSn>QWU2Fa1enB
X4K6@'umo"^(0s*X)"O.Rf,ZWT6,HC,JOGk>Vrq0Nj"OM\=h^FrTJTMCr1Je9V(N-Z_nP-RX_DM?`P85
FQQh`'5=Z+"]q%>`0nW#$=AkdQW"qE+K%EYDg-5=@B"R$FM$S>`Z*r*KeM[MV%(c("GP[PRrT/kej^lo
)QPkd1X:MpK2?WO_V%E!N4Da:"J4X<L;LO,L9bL=3TWLWG[4lR_cJM`?e\QoRs%&E_tSmK3*'NQS/^h]
B111Bo=>u/K)_?_Cq:;"d$O]Qjb]E2Ztj^UHlUpAnK6`c#2*p,.r2n=Qff9Z$)hc$S[%$fDkq<@Vr^#L
(@bfgo!N)&SGpT[4_`aDlO<AE6FY-sn_l%[CGY`t^'c5UAWD-S?&sXhVe`%:X=5\+JWi?fqOM-9Uj7h^
S+Dcj-]HO0A,821lLcKpB+c;pnYJ"L*THp3KKrjtU[*s%g#IFS"E1qrD,kS"E9,'n`b+*]3_Q#"duU&H
`t*aaS)iXsqT>d`HVq$m!jbVs,(;)3Z_@(/dFUTGochc$LP.>"LEU##%[JoC)'W_f0-7'/F1_e,cmMN_
_D[lAnLhk0d4l?@(!W8MC$_d;`og(tEQV@C)3YgaS=T:j.-rZ@<:9,&<:)f%e6CmIX!U"=o<e\=IQKe5
n.QKN%^GY7oK'Y`9c/q,I@1B@S2Dh9.;)j;4LNqDacck]s7;`\=&hH.^G;TB=)[C=];GH-@V'G>Trh]c
<Q98*8h<E?RjS/'=Oe8Llf#;B(\77o!'-&.p$?WXDarhN9s.2R9C\)s1ug6':9_EhM`*n.s&kBQL*XNi
YING(De!Wom-"L7@u)mHr5:="iY`[YDZ0l;fJ"WdS'Yg&WHl_AD_1\sqC?RHTH0,$2CG6FmYq*R:5!n&
H<f$k=pQ(n4/q!aB:gcCS`f.QN)b5:_lGA9MV!oPb@pdB@^kuY.^#rAH*(\;F_,:4JJ65B/3[&/)CFW2
Vss@GMd13eO1TX2T:S&*jM-<,YK\6)4K!Z37@!Rl=IQMgM?Q[pNlesKJ+g-W`h^Qm^qKM1-tj$Lca;jg
.e.!)rJ(*/k"?Ps*AVAJ[N1:b20\3ZWCXn=(?(3R?E\&_%R42\Y?N9dE.-86q:1r.\u"re\@3g-FgShC
p@jG/ot$1LQ="&]<o;eU)GW]06]m_n^>=A7c/M*UY@b?'V%Ib<?i.L=)4UugcSNLpaHsEtHUp-lH)8dn
,N`FVceGe>R<"VE=7KoF3bD&Hs#]_ArLU'gG712n->M/W-HnCB?N[d<I#1475Z6W'brL"ECYp5o6s=p:
NIGU;O9mO$c8M5CEn-o,hC=^W,;R9VgQU_?mnAjjUA\rG+5LfQYUXN]l!Ppc/MOPcNd>kC7nC8CRYNDo
?K'/g6fdQEKs,VDjcU"On":K>JiN0E6[X];8XFl2R>7;FlaquQMWHYFol24Cg8)Zq+$4'CY9X$upKY7W
->;^<.Km#;$"&Q#6b^KIgVG]0CFI:XZLq`)qqM\D5;^^!;SKlDq`spsdI@AsCZrD01$dJVO_I8L\p^;>
:GFsrC.lt/$<o0Ch,\]!huAo:(A9Z1F^\S>cP&K=7(8XG\Q=>*5"*+Sb(3V`b@Rl:Pq,>"9b.3,-cHW=
,%'b2^&u^3T=YFL>>0,/o[g@N;tIN(*lLGGl^0F$F^IN6ec,\7Q.kQI\Uj5CJK[3&I#6+*[;:Ji_FE#?
mRhmbcM;8,PUVpen\^$]&idS1&PaqH#m4+I_(03ZkmVbOgct;1jHmpT-pOp*.__mdQg$OZOor!Na/H%s
DL_Tu-A"EF7/o^N=uUbO=fN203C;XX"(,f4]^[NATDt'PGLlXmnbaSI@ia*\)rnq%+<C;#a,IQqIKe`Y
=46OC@c7Y]Hq<iTNqs(Q.V>)([Qgm"FWrt]Od+tQL-,5plT;;reU4!`Su1OG19^'**2BYf]'X'$q=*U`
4_]"cpkf\+,%#g=0A#"8oVt][E^`mLE`9^-[seWDP>9N4/(/((FiN,tZ[=!aef2Ql+$!q,](C,-g`uG$
I+hgmHq<iTNW'5>\mK$ifopU0eKhQiJ[!mQj:T)P06JD]W]:)p$d('aO\%cY+QPC(8\712%82&LGO+9V
jQk'IErF5!H/\epVC4Xd6a]&i^-"?%j[-\o=2"b_AX0-&I/WoVNg*]%-tEcf`b(i)@a&o2LVW)-[a5$s
=/Ra\e\IM.C7EA42!u_^m^Ln(m]]p)ZG-e5%p?eT#gT.&/*7p.n!Y*^K5N]7:nud78*;YsCV)A>%od8h
9=Y&dplP"<lF>_%9B+)]Ij\2j<W(GQKE#uLquu/B_tj/u>2JtsbI<9!SFQD,b..$.LlC<cM>b?P;%QYl
D#D6$Ij&1YKWPgCnud^%18ijV7H+p7&#hd7_sEZT'u\l^=`\mC8TS31>Q_XcZF_6tf*&Voo<*<2I5.>V
gQ$/J?DT(])#7&\FmeWng9sM1N+^6g0_Q<NY.L^$%akYj7:o4L-K@@mHbkjuET3&;*rdONjHjZYnub0[
8uoO?>YWdsdsW^[P36%nQ2FCY7(52;kdK>`j,!_%^>>A*pDB>7mX+`Q=qK$V>SA3*Q@9$P-f+tP74![O
.Joma`b.X*nVT!sg6OJfP,H.X%e#r%!nVr^;B$]%>N2G#5amZ*%?qS$f8N93e2Rc<%JPmHo3"U*@t1,C
kU:/rDC,jDob6D(ADZgIrp0J+a`T"[^,5Q;@,&;"BmVdg$2t<>K"OrNX*I+=QNQ9(rI)mulHf;X;Ae.r
c.M^X".'eK$1d=N./n"_epe:GeFUO95XFMmO<6P$`qW6iU?D-Qh47D_W=/[V'>m#WcBZ8\LeBB'n\WW&
ps=BDqiEUV+U#rf%<ERrV6;drVQOpQfU=P6KUVn65Nhr-5oR:&'-@k$K!lQfl:qc,b`&fZ=6SE'4^iR>
?CEqbgcT_V!&&nFga_eurJ<T'$Ijg&T0ZrUcHI6qM_sSuMop1&]hr5)>>rP;E@6PA;+^kgjVroW+#X%U
[d7<:WV'51!9?2.p0JTjiON`mp#WP?5oJG'#N(rq6G^J-auE`)%#h?ZO%(#4hfa?4RXU;HA)`?Si^QE.
QQQcbhi]Y"[/P9LF`jpLq[[k4ZOS_!MKAX$Y[@.sScUpsZQN(BVO?a8Y-@;8om(lTEsqmQ:JVi+fS++W
7En8Z9ku<U6M$1=X2]r#A'UMl/92L9))krP.*giTIng_heII+mU/JmTQijI/`\Sk4l\2jE/<J/%6,OQ%
H+:BRfo'=q;VUfZ]b<Tt1?2<1fSVlE7_eAF?=/H$$hkDXM#B)h-hVqY9@$[ef;i?"']X8PB8Z:\Mes@'
9`Coa08!t'(&#&#D9mR)T4pX,,%l-qidiSlcE*70")!!V!8Q3(4Zk'l*u+RB&=?tL(I%TB1[/-Ba"SOP
_O(r0q@fJicR%WC+:e%2#Q#,"B5iiljub-/B3k7.3;[?MZ)2N7T6!#JR.H$XX-rNA5g@`;^'pkk+L:tM
RHhrj_S$P<NKH#L57>tmFRcCSp73&s)4*/4aOcZ9i#VPfaDIHudD]a-g@%Ik6WJW5H[Z?hPQiaYprEUk
:[?'6j$/3UVCU1O.pGN^`+0SYE;HY^4=aMU2pr=r:MLhqD1\"GO$R2^@$a$WN/=O/KQ/dGr!U`ZlHc=O
&fY]hc\0UeVru`0Q<+dC))3j#fh9*#'Y2%mU1qrgpOg6<1+4UkWW$17gR8p*-Dnl$3=:'S*5+i`kNMH+
ca<$G#io!?pqkpn0c1RfEtQ^]k7X9/bo^VG0:A1g>+!4#T:JHdesD]-4Y'3"m3%oL`&6"'(QWY1qsui%
9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R9MA,R
9MA,R9MA,R9MA,R9MA,R9MA,R9MA.IYQ#[ED/P]l~>

%%EndBinary
grestore
np
14.4 125.61 mo
28.44 125.61 li
28.44 121.53 li
14.4 121.53 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 207.966 722.71 ]ct
[14.04 0 0 4.08 -193.566 597.1 ]ct
snap_to_device
<<
/T 1
/W 39 
/H 11 
/M[39 0 0 -11 0 11 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4
J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEOb
Xeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]
H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gM
KnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEObXeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O
]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'b
H$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\Gl~>
<~<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP
$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%'
,9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=
#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\
%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%',9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[
/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@
#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#6~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!rr~>
<~5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!
!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF
"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!
!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#
!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"
$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!
!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 /0 /CSD get_res sepcs
.6 sep
true set_gvm
%ADOBeginSubsetFont: GFXAAA+Arial Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFXAAA+Arial def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 68 /D put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 224 /agrave put
dup 232 /egrave put
dup 233 /eacute put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
34 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/hyphen <1C60D8A8C9B81F2C3A78A5675B101A923F2D2A8AB56C> |-
/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D
0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-
/D <1C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD247
4EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EEDC4
D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF79767
633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A048906
8CBF65F37E7CD4C7284AEAF641D010DF> |-
/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F
7F6ED1937D1E8A10> |-
/G <1C60D8A8C9B6FF86FBC793890B55178BE49EEC5102DE4765B31919F6E98C
7D78C667A3BB4B4E624B689DA4C385DFD1B29DE65FB8AA7AB2EF69B5E095C4AF
9914BE00567D04850B7313AA11B0D0EAADB46E151A37395ABF4FDE5690DD208A
8203F33BC5AE42ABB3FA5CE6CC7C2FF1141A09489DA9290F5991FC3FADB6E800
8CAB5CAA6CE68D612C9A2AD14F1DB3B2ED2760EC1A22B5BECD6F37DA404DC434
0669554C25AFCF53AD025C5AA750C1F3F80E3A98BEF6E511E50C5B0BE2D927EF> |-
/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-
/L <1C60D8A8C9B7EF3224EC6E192BD0FEC2445DA87B99CF0E03A72A> |-
/M <1C60D8A8C9B6B41CBB4B6664BFFC865F56E6FEAFA79E7B90883C1C68AFB3
79AC174B0F8DCC9294E2C26BD06BBA9FD3867F8768651EF4BA798B4F538FCE8F
80AF5A83421F8F> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B964D5CE
C10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864B2D53
463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8307B2
879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E024D177
B5D88A> |-
/b <1C60D8A8C9B7EF322B32790B4C40581173F160A628925C2B3464303D1D06
742E51EAF8B24CA2240525B9E37D08039C077561F794D203DE8C21652F0F5A81
A2CE84BC5F560E6CA22CB86602E80E4BBDAC611F34E85189D165B97A2D648CF6
26A92F4026AFF0CA38E8E165B7E956CB11B132485900857B09AC55401998CADA
1EAAF79B76AA2B52CCF0307B360E6D> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28AE872907C56
63BFD2A0F535ED0EB011F2C2A875E053FAF73E8AA16B1F99510A6812F90D61CF
3F1DA5EF558899A9AE12AAF6AF4568E0F6003B0A2FF6F33293> |-
/g <1C60D8A8C9B7EF322851D9960AE993FFFAEAEBBA8EF734FCE7E65DE817A0
65D42CB79E2F25620DE08D5E215259551032CAAB8B674940F5B4BAAF40766D55
9B26E9A0C2464D0F504C4718579670D62707FEBC08A2CD71BF2528BA3A24A0C2
47BA70F9E817A1709BB6F7008D6C121249525DEE3A93F6DA16170F68BD3667DC
9FF533284D078DAE144C0DB42F376056761CFA5A80B4ED7D37E57EA658F3FBD8
8F779C828BF992A89F02F1397EF90BADA44FB7F676FF0295FF6F9748D66EBF57
5C72F67F4BEBB98F8AFA57505EC9> |-
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/j <1C60D8A8C9B88C08722B6B7B5CD1A2B04086BD4CA31C9A77963330C6888F
E34000E928F0E47CDB49ED0B914BCC4EA3CAB2F844F0D85575AAEE3259E5CA03
5CD978593D85E63B5FE715A5DFC126E8FF> |-
/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-
/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5
BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99
C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB
9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C
54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B964
70F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330D
C4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556
CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1
E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-
/q <1C60D8A8C9B7EF322408646A760FED70F2D8214740020E61993A1FFE8957
4C96FDDD947618591671EEE89936F7D0F90E6B11CE96BDCBF7B2C20479CB610D
934D0AFBB0721CA3EA49A2D6AB8F9A4A9273E60BD1ACDAB1F7447DBAAB4DD124
EC36ECC57CEC13712AB1CAC8625150F69DBA3C4F574D88196863F5C61CC51A61
AE68D44A27F86FFD139CDEF75DF80AB81E> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F51
7D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F
992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE3879399
0906DA8D7F8ACFF6D70790F06B02> |-
/v <1C60D8A8C9B7A73DB99D94C9412F55B03E92C174A4755E69F97C27D9162B
37724F74F272B140D258652D102C2EAC46833C73F9> |-
/agrave <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D
1EA7DC8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D
883CA6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A8
7DBBA48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2
405FD710F7ADB95B4F576668A6DB104942C88ED8D01E4E58188F5E32A24B5B96
4D5CEC10C08F76C0F472E84A0FB6EB5E37AAEE233DE54C212B0A012D3E20F864
B2D53463E221F81B784B6F7BE81FBFCAE6785C2430454DD81C436E0A516BF8C8
307B2879FF86378629C5EA7E586D83C83550D2E732930F7FE3BAD07B86C81E02
4D177B5D8A177B323FB6C0F8BDFF520B95577A03E> |-
/egrave <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2
449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2
F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58
B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7
C37295284C077711C162623860AACA404F650F8D5169702AC895C72F08EFD0A1
A4B8B093E15CE42> |-
/eacute <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2
449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2
F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58
B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7
C37295284C077711C162623860AACA404F650F8D5169702A9E5C5CF47792B5D6
AD65F4E910CC060DA> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OLNYDE+Arial /GFXAAA+Arial findfont ct_VMDictPut
/OLNYDE+Arial*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period 3{/.notdef}rp /two 17{/.notdef}rp 
/D /.notdef /F /G /.notdef /I 2{/.notdef}rp /L 
/M 19{/.notdef}rp /a /b /c /d /e /f 
/g /.notdef /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u /v 
105{/.notdef}rp /agrave 7{/.notdef}rp /egrave /eacute 22{/.notdef}rp]
OLNYDE+Arial nf
OLNYDE+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
35.04 125.52 mo
(La)
[8.88 0 ]xsh
52.8 125.52 mo
( )sh
62.16 125.52 mo
(version)
[8.02788 8.87376 5.31456 7.98 3.62292 8.87376 0 ]xsh
113.78 125.52 mo
( )sh
123.14 125.52 mo
(finale)
[4.43687 3.591 8.87376 8.76204 3.47928 0 ]xsh
161.18 125.52 mo
( )sh
170.54 125.52 mo
(de)
[8.87999 0 ]xsh
188.3 125.52 mo
( )sh
197.66 125.52 mo
(la)
[3.60002 0 ]xsh
210.14 125.52 mo
( )sh
219.53 125.52 mo
(loi)
[3.591 8.76204 0 ]xsh
235.49 125.52 mo
( )sh
244.85 125.52 mo
(utilise)
[8.87375 4.43689 3.49524 3.47928 3.47928 8.02789 0 ]xsh
285.41 125.52 mo
( )sh
35.04 145.56 mo
(\351galement)
[8.87376 8.87376 8.87376 3.60696 8.87375 13.2946 8.87376 8.87376 0 ]xsh
109.7 145.56 mo
( )sh
114.86 145.56 mo
(le)
[3.60002 0 ]xsh
127.34 145.56 mo
( )sh
132.5 145.56 mo
(crit\350re)
[8.02788 5.31456 3.54312 4.56456 8.87376 5.31456 0 ]xsh
177.02 145.56 mo
( )sh
182.18 145.56 mo
(de)
[8.87999 0 ]xsh
200.06 145.56 mo
( )sh
205.34 145.56 mo
(fracturation)
[4.5486 5.31456 8.87375 7.98001 4.43687 8.87376 5.31454 8.98547 4.43689 3.591 8.87375 0 
]xsh
285.41 145.56 mo
( )sh
OLNYDE+Arial*1 [15.984 0 0 -15.984 0 0 ]msf
35.04 165.5 mo
(macroscopique)
[13.3146 8.8871 7.992 5.32255 8.8871 7.992 8.07193 8.8871 8.8871 3.54845 8.8871 8.8871 
0 ]xsh
143.42 165.5 mo
( )sh
180.26 165.5 mo
(en)
[8.88 0 ]xsh
198.02 165.5 mo
( )sh
234.89 165.5 mo
(Double)
[11.5405 8.8871 8.8871 8.88708 3.54846 0 ]xsh
285.41 165.5 mo
( )sh
OLNYDE+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
35.04 185.54 mo
(D)sh
46.56 185.54 mo
(\351formation)
[8.87376 4.43688 8.87376 5.31456 13.2946 8.98547 4.43687 3.591 8.87376 0 ]xsh
122.18 185.54 mo
( )sh
140.78 185.54 mo
(I)sh
145.22 185.54 mo
(nelastique)
[8.98547 8.87376 3.59099 8.87376 8.02788 4.32516 3.591 8.87375 8.87375 0 ]xsh
218.21 185.54 mo
( )sh
236.81 185.54 mo
(Fluage)
[9.75143 3.54312 8.87375 8.87378 8.79395 0 ]xsh
285.41 185.54 mo
( )sh
35.04 205.58 mo
(Fissuration)
[9.75144 3.54313 8.04384 8.02788 8.87376 5.31457 8.87375 4.43687 3.54313 8.87376 0 ]xsh
113.3 205.58 mo
( )sh
118.34 205.58 mo
(DDIF)
[11.52 11.52 4.43375 0 ]xsh
155.54 205.58 mo
(2)sh
164.42 205.58 mo
( )sh
169.46 205.58 mo
(d\351j\340)
[8.87376 8.87375 3.591 0 ]xsh
199.7 205.58 mo
( )sh
204.86 205.58 mo
(utilis\351)
[8.87376 4.43687 3.591 3.47928 3.591 8.02788 0 ]xsh
245.81 205.58 mo
( )sh
250.97 205.58 mo
(dans)
[8.87375 8.87378 8.77798 0 ]xsh
285.41 205.58 mo
( )sh
35.04 225.5 mo
(la)
[3.60002 0 ]xsh
47.52 225.5 mo
( )sh
51.96 225.5 mo
(loi)
[3.591 8.87376 0 ]xsh
68.04 225.5 mo
( )sh
72.264 225.5 mo
(Gatt)
[12.353 8.87376 4.43687 0 ]xsh
102.38 225.5 mo
(-)sh
107.66 225.5 mo
(Monerie)
[13.2946 8.87376 8.87375 8.87376 5.31456 3.591 0 ]xsh
165.38 225.5 mo
(.)sh
169.82 225.5 mo
( )sh
35.04 245.54 mo
( )sh
14.4 265.65 mo
28.44 265.65 li
28.44 261.57 li
14.4 261.57 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 207.966 722.71 ]ct
[14.04 0 0 4.08 -193.566 457.06 ]ct
snap_to_device
<<
/T 1
/W 39 
/H 11 
/M[39 0 0 -11 0 11 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4
J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEOb
Xeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]
H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gM
KnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEObXeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O
]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'b
H$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\Gl~>
<~<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP
$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%'
,9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=
#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\
%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%',9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[
/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@
#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#6~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!rr~>
<~5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!
!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF
"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!
!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#
!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"
$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!
!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 /0 /CSD get_res sepcs
.6 sep
true set_gvm
%ADOBeginSubsetFont: GFXAAA+Arial AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDE+Arial dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C3A069EC278D0AA8AE7E32C29FB8AFD2B6368
260D302C905A973F0B3449ED9E18E81E16B7B273530E9BC14ED76D4376A01C0A
577DC235F833AFCC30669C812FBF097879E1> |-
/parenright <1C60D8A8C9B81F2C3A30D3A3F0A8D738E712823A2480470C32A
2885DCE4A77E926C520C7B7E1016BB28443D8E7B8AC0F7C4F3BD721C19F19D47
14AF52ABD0227B6CDD854C568D5A6F3817645C5> |-
/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E13
1450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41A
C970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DF
A8> |-
/x <1C60D8A8C9B7A73DB920A1A3B81DE7234ACAA5546B4C65820CF3C50E1629
C5A6423BAA34A2ECA8C7FE4B71726AC6704CC23AF1725AFB30D2892FC1BDDAFE
AD7BE7BD65F1051699CCF4B0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDE+Arial /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 104 /h put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDE+Arial*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
3{/.notdef}rp /two 17{/.notdef}rp /D /.notdef /F /G /.notdef 
/I 2{/.notdef}rp /L /M 19{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /.notdef 
/l /m /n /o /p /q /r /s 
/t /u /v /.notdef /x 103{/.notdef}rp /agrave 7{/.notdef}rp 
/egrave /eacute 22{/.notdef}rp]
OLNYDE+Arial nf
OLNYDE+Arial*1 [15.984 0 0 -15.984 0 0 ]msf
35.04 265.61 mo
(Les)
[8.88 8.88 0 ]xsh
60.84 265.61 mo
( )sh
69.72 265.61 mo
(surfaces)
[8.02397 8.8871 5.2746 4.44355 8.8871 7.992 8.8871 0 ]xsh
130.22 265.61 mo
( )sh
138.98 265.61 mo
(de)
[8.88 0 ]xsh
156.86 265.61 mo
( )sh
165.62 265.61 mo
(charge)
[8.02397 8.8871 8.8871 5.25861 8.8871 0 ]xsh
214.61 265.61 mo
( )sh
223.37 265.61 mo
(biaxiales)
[8.8871 3.54845 8.8871 7.992 3.54845 8.88712 3.59641 8.75922 0 ]xsh
285.41 265.61 mo
( )sh
OLNYDE+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
35.04 285.53 mo
(ci)
[8.04 0 ]xsh
46.68 285.53 mo
(-)sh
51.96 285.53 mo
(contre)
[8.02788 8.87375 8.87376 4.43688 5.31456 0 ]xsh
96.384 285.53 mo
( )sh
103.34 285.53 mo
(pr\351sentent)
[8.98547 5.31456 8.87376 7.98 8.87376 8.87375 4.58052 8.87375 8.87376 0 ]xsh
179.06 285.53 mo
( )sh
186.02 285.53 mo
(une)
[8.87999 8.88 0 ]xsh
212.81 285.53 mo
( )sh
219.77 285.53 mo
(borne)
[8.87376 8.87375 5.31456 8.87376 0 ]xsh
260.69 285.53 mo
( )sh
267.65 285.53 mo
(en)
[8.99976 0 ]xsh
285.41 285.53 mo
( )sh
35.04 305.57 mo
(traction)
[4.43688 5.31456 8.87376 7.98 4.43688 3.62292 8.87375 0 ]xsh
87.504 305.57 mo
( )sh
92.064 305.57 mo
(\(rupture)
[5.31456 5.25072 8.87376 8.87376 4.43687 8.87376 5.31456 0 ]xsh
147.86 305.57 mo
( )sh
152.66 305.57 mo
(macro)
[13.2946 8.87376 8.0598 5.31456 0 ]xsh
197.06 305.57 mo
( )sh
201.74 305.57 mo
(DDIF)
[11.52 11.52 4.43375 0 ]xsh
238.97 305.57 mo
(2)sh
247.85 305.57 mo
(\))sh
253.13 305.57 mo
(.)sh
257.57 305.57 mo
( )sh
35.04 325.61 mo
( )sh
14.4 345.57 mo
28.44 345.57 li
28.44 341.49 li
14.4 341.49 li
cp
gsave
/1 /CSA get_res setcolorspace
clp
[1 0 0 -1 207.966 722.71 ]ct
[14.04 0 0 4.08 -193.566 377.14 ]ct
snap_to_device
<<
/T 1
/W 39 
/H 11 
/M[39 0 0 -11 0 11 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4
J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEOb
Xeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]
H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'bH$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gM
KnFu-Isl]kH[:!`H$O[\H04,Cf[J-d_nEObXeqe_R['%rN/<=DK7\W'I=-BgH?sj^H$O[\k2P7Me'?"O
]sk;LVP0QLQ'./dM2-e;Jq/?!I!^3dH?jd]H$O\tini>:cH!i9\$E-5Tq.X;P)bKXLP:A4J:DupH[C'b
H$O[\H$SQ3hUp<&a2>U"ZE:!tSXPh,Nf8gMKnFu-Isl]kH[:!`H$O[\Gl~>
<~<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP
$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%'
,9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=
#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\
%13IM#m^hC#RCY?#6tJ=#?4Mm6pNjm1+k%',9IpF)&3et%h/sW$4@1I#RLbB#R:S>#6tJ=<)?4U5Wgq[
/h/1m*uu:<'b_2j%1NaR$OR1G#m^eB#6tJ=#6tK5:eO2A4>nrI.OHA^*?,k2'+tfb%1NXP$4-tE#RC\@
#6tJ=#7"4)912$-2DQm7-6jTQ)]9A(&e>E\%13IM#m^hC#RCY?#6tJ=#6~>
<~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!rr~>
<~5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!
!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF
"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!
!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#
!!!!!!!!!!!!!!!!!!!!!'rRr,T[d8%LNFF"Tnf,!<E3%!<<*"!!!!!!!!!!!!!!!!!!!!5r^GA*Z,M"
$3pb=!s/K(!<E3%!!!!!!!!!!!!!!!!!!!!!!!!b3%ZBs(_R;c#6k>6!W`<&!<E3$!!!!!!!!!!!!!!!
!!!!!!!#;E/L2AS&e56R"pG)1!<E3%!<E0#!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
1 /0 /CSD get_res sepcs
.6 sep
true set_gvm
%ADOBeginSubsetFont: GFXAAA+Arial AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDE+Arial dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B854D0F42C7AF5C4668C35A6B5F5176B9FC6F495643D40
00A6D27DE0DDA4D01F0D89D11ABC5445CF8C34A3A1CF> |-
/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3A
BC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A1
0425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E3
1D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC
60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A
5B546505C954A88> |-
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368A
FE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD1
0C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA76
98FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA
14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C0
2C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608
AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C
071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D
17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63
B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F6
03BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A
7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219
571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A
1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A
55977C35> |-
/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6
DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435
C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D
5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807
E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3
072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA
27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E
17188994F16> |-
/A <1C60D8A8C9B64EDFED26B9E21A4F64848088903AC9891CF791BDBC4AB29A
CC8B3E8D13924A7DDE35F09AC5F4A8229C87124C732743268600EF8D4582208B
D16D82> |-
/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD
6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C
69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDF
A8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32
261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D3148
51DE59> |-
/E <1C60D8A8C9B64EDFFB83C6241DB110BEE5AB2FAD9D94B39ED5E81E7411B6
6E9361DDE78FC667AB91EF9824> |-
/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117
C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47
CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EF
BF59B4862165C7DEA15B42BE3811C2CAA25C54> |-
/bar <1C60D8A8C9B8666CCB25BEB289081819C9BDF408FDEEDA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDE+Arial /Encoding get
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 52 /four put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 67 /C put
dup 69 /E put
dup 80 /P put
dup 124 /bar put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDE+Arial*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three /four 3{/.notdef}rp 
/eight /nine 7{/.notdef}rp /A /.notdef /C /D /E 
/F /G /.notdef /I 2{/.notdef}rp /L /M 2{/.notdef}rp 
/P 16{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /.notdef /l /m /n 
/o /p /q /r /s /t /u /v 
/.notdef /x 3{/.notdef}rp /bar 99{/.notdef}rp /agrave 7{/.notdef}rp /egrave 
/eacute 22{/.notdef}rp]
OLNYDE+Arial nf
OLNYDE+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
35.04 345.53 mo
(Dans)
[11.52 8.87064 8.87064 0 ]xsh
72.384 345.53 mo
( )sh
85.584 345.53 mo
(la)
[3.60002 0 ]xsh
98.064 345.53 mo
( )sh
111.26 345.53 mo
(partie)
[8.87376 8.87375 5.39436 4.43687 3.591 0 ]xsh
151.34 345.53 mo
( )sh
164.54 345.53 mo
(compression,)
[8.02788 8.87376 13.2946 9.0174 5.31456 8.87376 7.98 8.0598 3.591 8.87376 8.87375 0 
]xsh
259.85 345.53 mo
( )sh
273.17 345.53 mo
(le)
[3.48001 0 ]xsh
285.41 345.53 mo
( )sh
35.04 365.59 mo
(seuil)
[8.02788 8.87375 8.87376 3.49525 0 ]xsh
67.92 365.59 mo
( )sh
true set_gvm
%ADOBeginSubsetFont: WXJBAA+Arial Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WXJBAA+Arial def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 116 /t put
dup 117 /u put
dup 146 /quoteright put
dup 233 /eacute put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-
/m <1C60D8A8C9B6B41CBB5F87BE20C872DF59FABCB36542419CBFA3D5519AD5
BA8076F32ECFD724B055F72CAC37BC47239ACC8B0FB48B8ACFF099B97085BD99
C333951D0338D27FF6AB9B3F3C69320476BA0CD4F9573B79AD358A91B0176AFB
9AEF169308783E9C6287F18E6E658AF5AA6C9688B500806DA169A1B21069D55C
54A2FF607A6A38976171B08665C3ACCAA84DFB970D01180645CE5CBC48DFE37B> |-
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F51
7D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F
992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE3879399
0906DA8D7F8ACFF6D70790F06B02> |-
/quoteright <1C60D8A8C9B88C08720644BC73CE468220344FD317805901631
1E9310607E4EA5223E3BA870F42573331006E51DA658155F66859> |-
/eacute <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2
449B0D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2
F0C8B6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58
B0EEA03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7
C37295284C077711C162623860AACA404F650F8D5169702A9E5C5CF47792B5D6
AD65F4E910CC060DA> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OLNYDF+Arial /WXJBAA+Arial findfont ct_VMDictPut
/OLNYDF+Arial*1 
[99{/.notdef}rp /c /d /e 6{/.notdef}rp /l /m /n 
/o 4{/.notdef}rp /t /u 28{/.notdef}rp /quoteright 86{/.notdef}rp /eacute 
22{/.notdef}rp]
OLNYDF+Arial nf
OLNYDF+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
73.224 365.59 mo
(d\222\351coulement)
[8.76198 3.59109 8.87376 8.02798 8.87375 8.76198 3.59109 8.87376 13.2946 8.87376 8.87375 0 
]xsh
OLNYDE+Arial*1 [15.96 0 0 -15.96 0 0 ]msf
168.14 365.59 mo
( )sh
173.42 365.59 mo
(est)
[8.87376 8.02788 0 ]xsh
194.78 365.59 mo
( )sh
200.18 365.59 mo
(r\351gi)
[5.31456 8.87376 8.87375 0 ]xsh
226.85 365.59 mo
( )sh
232.13 365.59 mo
(soit)
[8.02788 8.87376 3.591 0 ]xsh
257.09 365.59 mo
( )sh
262.37 365.59 mo
(par)
[8.88 8.87997 0 ]xsh
285.41 365.59 mo
( )sh
35.04 385.63 mo
(la)
[3.60002 0 ]xsh
47.52 385.63 mo
( )sh
67.2 385.63 mo
(viscoplasticit\351)
[8.02788 3.591 7.91616 8.02789 8.87375 8.76204 3.591 8.87376 8.02789 4.43687 3.47928 7.91615 
3.591 4.43687 0 ]xsh
165.74 385.63 mo
( )sh
185.42 385.63 mo
(soit)
[8.02788 8.87376 3.591 0 ]xsh
210.38 385.63 mo
( )sh
230.09 385.63 mo
(par)
[8.87375 8.98549 0 ]xsh
253.37 385.63 mo
( )sh
273.05 385.63 mo
(la)
[3.60004 0 ]xsh
285.41 385.63 mo
( )sh
35.04 405.55 mo
(plasticit\351)
[8.87376 3.591 8.87376 8.02788 4.32516 3.591 7.91616 3.591 4.43688 0 ]xsh
97.224 405.55 mo
( )sh
103.58 405.55 mo
(de)
[8.88 0 ]xsh
121.46 405.55 mo
( )sh
127.82 405.55 mo
(d\351coh\351sion)
[8.87376 8.87375 8.04385 8.87375 8.87375 8.87376 8.04384 3.591 8.87375 0 ]xsh
209.66 405.55 mo
( )sh
216.05 405.55 mo
(des)
[8.87999 8.88 0 ]xsh
241.85 405.55 mo
( )sh
248.21 405.55 mo
(joints)
[3.591 8.76204 3.591 8.76202 4.43689 0 ]xsh
285.41 405.55 mo
( )sh
35.04 425.59 mo
(de)
[8.88 0 ]xsh
52.8 425.59 mo
( )sh
57.24 425.59 mo
(grain)
[8.87375 5.31457 8.87376 3.54312 0 ]xsh
92.784 425.59 mo
(.)sh
97.224 425.59 mo
( )sh
OLNYDE+Arial*1 [9.96 0 0 -9.96 0 0 ]msf
632.02 514.56 mo
(|  PAGE )
[2.40033 2.98798 2.76886 6.59363 6.60352 7.78876 6.60352 0 ]xsh
670.56 514.56 mo
(39)
[5.51996 0 ]xsh
681.6 514.56 mo
( )sh
OLNYDE+Arial*1 [9.984 0 0 -9.984 0 0 ]msf
534.36 514.704 mo
(CEA | )
[7.20844 6.58954 6.59949 2.86542 2.39612 0 ]xsh
563.04 514.704 mo
(18 f\351vrier 2014)
[5.52118 5.52112 2.6358 2.86536 5.52118 4.92212 3.35455 2.15656 5.52112 3.35455 2.77557 5.50116 
5.52112 5.52118 0 ]xsh
629.3 514.704 mo
( )sh
1 /0 /CSD get_res sepcs
0 sep
true set_gvm
%ADOBeginSubsetFont: CIIAAA+Arial,Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /CIIAAA+Arial,Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 51 /three put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 84 /T put
def
/FontBBox {-628 -376 2000 1018} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
15 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/three <1C60D8A8C9B7EF322B11AFD403834AA517B3BBED643191F55B27328F
EB63F451B0BE1F10D9D06479DDD68A3F11CA764AA5C6CBF0B5C7F1C301A6A591
5C8FAEA13725EF990CAE8647E21075E73CDED65FE63CABC49E17A0A9B1472FC5
FEA356BED7487BBD0F11BE9FC7F02BAC4CE5305FC3A8F1C2CD653A5CD19861BE
7E9E1ACF93076B65DD47275F1EE66A142E3CAEAC4BF0ACC3175BC0B6E6C74B14
074CF18266AE35F9C580DC1CFAF9059882B070FDC40AC7466F256163FC8A2FCD
990A19F67EEB3B7512CC0EEACA> |-
/C <1C60D8A8C9B6079F6DE2AEDD76F722AB1905C7EE1983D1040F12090A2B6B
B93FD7976832C00E38F0C4C79BDBC9D981E45F6BB26E1DD13A0FA297509E8F73
D8E4A29558A673AA886D0B1CE2BDB03B1E58D12F23798709409D59C03EBEE5D9
CA02E1DEC19C7936D25A234D617C91BF02C16AA27F9D6F9EC37F9EB080F7BD6A
F1EE128160DD9B3DB18FE4> |-
/D <1C60D8A8C9B6079F41181AF4EB36AA0D0A9CB43D77E9AB20A6E8CC956A65
DB49EB6635E16A93399048C7FF414644050887228FE6A7D0206D976F49A17D26
1AA33D3EBB94BE961959DEF2B6629671CF61014D6F7BD7E457F47E2A8118C52D
305371EF3BCBDE1CFFB87BA758D818C2C45B8180F337D5F9BDA254CBE936AECD
BA1BA66E23577AFD9B2756741C424503> |-
/E <1C60D8A8C9B64EDFFB871F4BC81FBDF202F74A2A9990666F4653F156EEAF
D5D786BB69DEDB8B2E0A95C5AFB0A097> |-
/F <1C60D8A8C9B7D8BE164A384446DA6B7BAA798AC9D25A30491D373B778ABE
DC450E08B3A2A56A100F> |-
/I <1C60D8A8C9B854D0F45A9260868E9F30993A194AB723> |-
/L <1C60D8A8C9B7D8BE1956BCE10252E2B5E44265236D2FAF854B3B3BF8> |-
/M <1C60D8A8C9B6B41CBB10CBFB014CB2DAA60D1E6213C9A6221D8277F76E5B
198F877B8BD7F16B9ED33B8CC69F5CB1810DCABD4C90C49E0AA0E1EE> |-
/N <1C60D8A8C9B6079F62C9987F84E4134982EC7DC1D10493D0EA10EC91B706
6F22B9AE4CCA87C378409CD65C60> |-
/O <1C60D8A8C9B6FF86F5F3A19921C3FE187E6183EB941A461BFDF48896B01C
539BA03B9A71268054FD539295016B775957F73BDDB654AA6712BF7E0C40F4AC
922FE0B288CD70E18C4E1C889841E3AE3271A7D86FE908FD4A3BC0FE2CC8F051
210EDBAF3FCCF42B66137993282D8903C68179D39C68CF2DDA978A8EFE5F0928
4C45B6203BE9537D93C8C7D651EB9110B223AA11E17568> |-
/P <1C60D8A8C9B64EDFF4BBA9405C68CB1D32394A0B35B38FF15650A7F4CA98
0D304B0E82F2EE31DE1B207C9690A7D1CE7998A46A2671A721A2721266CDB3CB
7162FB8735F8901B59D497FC48B1C8BA82BBC82DEF38A7FA67F275089B99C047
F77478B3299CF33148E1E790C5C7235CAB593CF69659FDEE7364A65AC06E6296> |-
/R <1C60D8A8C9B6079F62C490F8C1A9447E753B366F00BE2E6D6A1AEC57FEFC
5F04FB7246489EDF70068115D0A2805C8D6EC79F6064E7969601096F448222EB
B1DD7F1F6323EF89F566062038A8AC4D6CAD80E8B896F19CFFFE99D83DBA0C0E
40A706B7FE43A7E0AA62F51DDB688D792B5246324FF62981CEA7E6D7B38DF1C5
C95D599B2DC4BC9304A423DA3839EE77DFF504E2ADB006C72F6FEA3F44E88D7A> |-
/T <1C60D8A8C9B7D8BE19809EC35BBBBC4A9DCDD5AC6ABFFD5901D001A83F8C
D3372E99> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OLNYDG+Arial,Bold /CIIAAA+Arial,Bold findfont ct_VMDictPut
/OLNYDG+Arial,Bold*1 
[32{/.notdef}rp /space 18{/.notdef}rp /three 15{/.notdef}rp /C /D /E 
/F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O 
/P /.notdef /R /.notdef /T 171{/.notdef}rp]
OLNYDG+Arial,Bold nf
OLNYDG+Arial,Bold*1 [21.96 0 0 -21.96 0 0 ]msf
119.09 48.1 mo
(LOI DE COMPORTEMENT L3F)
[13.4174 17.0849 6.10487 6.21468 15.8551 14.6475 6.10487 15.8551 17.019 18.2925 14.6475 16.975 
15.8552 13.4174 14.6475 18.2925 14.6475 15.8551 13.4613 6.69781 13.4174 12.2097 0 ]xsh
433.42 48.1 mo
( )sh
gsave
290.55 516.836 mo
720.003 516.836 li
720.003 87.3835 li
290.55 87.3835 li
cp
clp
290.87 516.512 mo
719.682 516.512 li
719.682 87.7003 li
290.87 87.7003 li
cp
ef
329.203 489.711 mo
707.51 489.711 li
707.51 93.1457 li
329.203 93.1457 li
cp
ef
.640655 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
329.203 440.167 mo
707.51 440.167 li
329.203 390.627 mo
707.51 390.627 li
329.203 340.976 mo
707.51 340.976 li
329.203 291.432 mo
707.51 291.432 li
329.203 241.888 mo
707.51 241.888 li
329.203 192.237 mo
707.51 192.237 li
329.203 142.693 mo
707.51 142.693 li
329.203 93.1493 mo
707.51 93.1493 li
1 /0 /CSD get_res sepcs
.475 sep
@
376.505 93.1493 mo
376.505 489.711 li
423.806 93.1493 mo
423.806 489.711 li
471.108 93.1493 mo
471.108 489.711 li
518.41 93.1493 mo
518.41 489.711 li
565.711 93.1493 mo
565.711 489.711 li
612.906 93.1493 mo
612.906 489.711 li
660.208 93.1493 mo
660.208 489.711 li
707.51 93.1493 mo
707.51 489.711 li
@
329.203 489.711 mo
329.203 93.1493 li
@
326.32 489.711 mo
329.203 489.711 li
326.32 440.167 mo
329.203 440.167 li
326.32 390.627 mo
329.203 390.627 li
326.32 340.976 mo
329.203 340.976 li
326.32 291.432 mo
329.203 291.432 li
326.32 241.888 mo
329.203 241.888 li
326.32 192.237 mo
329.203 192.237 li
326.32 142.693 mo
329.203 142.693 li
326.32 93.1493 mo
329.203 93.1493 li
@
329.203 489.711 mo
707.51 489.711 li
@
329.203 489.711 mo
329.203 492.594 li
376.505 489.711 mo
376.505 492.594 li
423.806 489.711 mo
423.806 492.594 li
471.108 489.711 mo
471.108 492.594 li
518.41 489.711 mo
518.41 492.594 li
565.711 489.711 mo
565.711 492.594 li
612.906 489.711 mo
612.906 492.594 li
660.208 489.711 mo
660.208 492.594 li
707.51 489.711 mo
707.51 492.594 li
@
1.70841 lw
1 lc
361.983 305.954 mo
360.168 312.574 li
358.566 319.194 li
357.178 325.707 li
356.004 332.114 li
355.043 338.52 li
354.188 344.82 li
353.655 350.906 li
353.334 356.992 li
353.121 362.865 li
353.227 368.738 li
353.548 374.397 li
353.975 379.949 li
354.722 385.288 li
355.576 390.627 li
356.644 395.752 li
358.032 400.664 li
359.527 405.469 li
361.236 410.167 li
363.158 414.651 li
365.293 418.923 li
367.535 423.087 li
370.098 427.037 li
372.767 430.878 li
375.65 434.401 li
378.747 437.818 li
381.95 441.022 li
385.367 444.011 li
388.997 446.894 li
392.734 449.564 li
396.685 451.913 li
400.849 454.155 li
405.12 456.184 li
409.498 457.999 li
414.09 459.494 li
418.895 460.882 li
423.806 462.056 li
428.825 463.017 li
433.95 463.765 li
439.289 464.299 li
444.628 464.512 li
450.18 464.619 li
455.839 464.405 li
461.605 464.085 li
467.478 463.444 li
473.457 462.697 li
479.543 461.629 li
485.63 460.348 li
491.929 458.96 li
498.229 457.251 li
504.529 455.33 li
510.935 453.194 li
517.449 450.952 li
523.962 448.389 li
530.582 445.613 li
537.202 442.73 li
543.822 439.633 li
550.442 436.217 li
557.169 432.693 li
563.789 429.063 li
570.516 425.116 li
577.136 421.058 li
583.863 416.787 li
590.483 412.409 li
597.104 407.818 li
603.724 403.013 li
610.237 398.101 li
616.75 393.083 li
623.264 387.851 li
629.563 382.512 li
635.97 376.96 li
642.27 371.3 li
648.463 365.535 li
650.812 360.836 li
650.812 356.779 li
650.812 352.508 li
650.812 348.13 li
650.812 343.646 li
650.812 338.947 li
650.812 334.249 li
650.812 329.338 li
650.812 324.319 li
650.812 319.194 li
650.812 314.069 li
650.812 308.73 li
650.812 303.284 li
650.812 297.839 li
650.812 292.286 li
650.812 286.627 li
650.812 280.968 li
650.812 275.095 li
650.812 269.329 li
650.812 263.457 li
650.812 257.477 li
650.812 251.498 li
650.812 245.518 li
650.812 239.432 li
650.812 233.346 li
650.812 227.26 li
650.812 221.174 li
650.812 215.087 li
650.812 209.001 li
650.812 202.915 li
650.812 196.829 li
650.812 190.742 li
650.812 184.656 li
650.812 178.677 li
650.812 172.697 li
650.812 166.718 li
650.812 160.845 li
650.812 155.079 li
650.812 152.623 li
648.463 152.623 li
642.91 152.623 li
637.358 152.623 li
631.592 152.623 li
625.933 152.623 li
620.167 152.623 li
614.401 152.623 li
608.635 152.623 li
602.869 152.623 li
596.997 152.623 li
591.231 152.623 li
585.358 152.623 li
579.592 152.623 li
573.72 152.623 li
567.954 152.623 li
562.188 152.623 li
556.422 152.623 li
550.763 152.623 li
545.104 152.623 li
539.445 152.623 li
533.892 152.623 li
528.447 152.623 li
522.894 152.623 li
517.555 152.623 li
512.217 152.623 li
506.985 152.623 li
501.859 152.623 li
496.841 152.623 li
491.823 152.623 li
487.018 152.623 li
482.213 152.623 li
477.515 152.623 li
473.03 152.623 li
468.545 152.623 li
464.274 152.623 li
460.11 152.623 li
456.053 152.623 li
452.102 152.623 li
447.617 155.079 li
442.172 161.593 li
436.726 168.213 li
431.494 174.833 li
426.369 181.56 li
421.457 188.287 li
416.546 195.12 li
411.847 201.954 li
407.363 208.894 li
402.985 215.835 li
398.714 222.775 li
394.656 229.822 li
390.813 236.763 li
387.075 243.81 li
383.552 250.857 li
380.242 257.798 li
377.038 264.738 li
374.049 271.785 li
371.273 278.619 li
368.603 285.559 li
366.254 292.393 li
364.012 299.227 li
361.983 305.954 li
1 /0 /CSD get_res sepcs
1 sep
@
399.248 301.362 mo
398.394 306.701 li
397.753 311.826 li
397.219 316.952 li
396.899 321.863 li
396.685 326.561 li
396.685 331.26 li
396.792 335.744 li
397.112 340.122 li
397.433 344.393 li
397.967 348.557 li
398.714 352.508 li
399.461 356.352 li
400.422 359.982 li
401.383 363.613 li
402.558 367.029 li
403.839 370.339 li
405.12 373.543 li
406.615 376.639 li
408.11 379.629 li
409.819 382.512 li
411.527 385.181 li
413.342 387.851 li
415.264 390.413 li
417.293 392.762 li
419.428 395.111 li
421.671 397.354 li
424.02 399.489 li
426.369 401.518 li
428.932 403.44 li
431.494 405.255 li
434.27 406.964 li
437.046 408.565 li
440.036 410.06 li
443.026 411.555 li
446.229 412.836 li
449.539 414.011 li
452.956 415.079 li
456.48 416.04 li
460.11 416.894 li
463.954 417.534 li
467.798 418.175 li
471.855 418.602 li
476.02 418.816 li
480.397 419.029 li
484.775 418.923 li
489.367 418.816 li
494.065 418.389 li
498.87 417.855 li
503.781 417.214 li
508.907 416.253 li
514.032 415.185 li
519.264 413.904 li
524.709 412.409 li
530.155 410.808 li
535.707 408.886 li
541.26 406.857 li
547.026 404.508 li
552.792 402.052 li
558.024 399.276 li
563.256 396.393 li
568.167 392.869 li
573.292 389.346 li
578.631 386.036 li
584.184 382.619 li
589.629 378.988 li
595.182 375.144 li
600.414 370.767 li
605.325 366.175 li
610.344 361.37 li
615.255 356.459 li
620.167 351.333 li
624.865 346.208 li
630.097 341.403 li
635.329 336.385 li
640.455 331.26 li
645.473 326.027 li
647.395 323.038 li
647.929 321.436 li
649.637 320.048 li
650.491 319.194 li
650.598 318.98 li
650.812 318.126 li
650.812 313.535 li
650.812 308.516 li
650.812 303.177 li
650.812 297.732 li
650.812 292.286 li
650.812 286.627 li
650.812 280.968 li
650.812 275.095 li
650.812 269.329 li
650.812 263.457 li
650.812 257.477 li
650.812 251.498 li
650.812 245.518 li
650.812 239.432 li
650.812 233.346 li
650.812 227.26 li
650.812 221.174 li
650.812 215.087 li
650.812 209.001 li
650.812 202.915 li
650.812 196.829 li
650.812 190.742 li
650.812 184.656 li
650.812 178.677 li
650.812 172.697 li
650.812 166.718 li
650.812 160.845 li
650.812 155.079 li
650.812 152.623 li
648.463 152.623 li
642.91 152.623 li
637.358 152.623 li
631.592 152.623 li
625.933 152.623 li
620.167 152.623 li
614.401 152.623 li
608.635 152.623 li
602.869 152.623 li
596.997 152.623 li
591.231 152.623 li
585.358 152.623 li
579.592 152.623 li
573.72 152.623 li
567.954 152.623 li
562.188 152.623 li
556.422 152.623 li
550.763 152.623 li
545.104 152.623 li
539.445 152.623 li
533.892 152.623 li
528.447 152.623 li
523.001 152.623 li
517.555 152.623 li
512.323 152.623 li
507.091 152.623 li
502.073 152.623 li
497.375 152.623 li
492.89 152.623 li
492.036 152.837 li
491.823 152.944 li
491.075 153.798 li
489.687 155.613 li
488.299 156.147 li
485.309 158.176 li
480.291 163.515 li
475.486 168.853 li
470.681 174.299 li
466.09 179.745 li
461.178 184.763 li
456.373 189.888 li
451.675 195.013 li
447.083 200.246 li
442.706 205.478 li
438.541 210.923 li
434.804 216.689 li
431.387 222.455 li
428.077 228.221 li
424.981 233.88 li
421.564 239.219 li
418.254 244.451 li
415.478 249.896 li
412.808 255.342 li
410.459 261.428 li
408.324 267.408 li
406.295 273.28 li
404.48 279.153 li
402.878 284.812 li
401.49 290.471 li
400.316 296.023 li
399.248 301.362 li
.71722 .798611 .258183 .0968338 cmyk
@
460.324 288.336 mo
460.11 291.432 li
459.897 294.422 li
459.79 297.305 li
459.897 300.081 li
460.003 302.75 li
460.11 305.206 li
460.43 307.662 li
460.751 310.011 li
461.071 312.253 li
461.605 314.389 li
462.032 316.524 li
462.673 318.446 li
463.207 320.368 li
463.847 322.184 li
464.595 323.999 li
465.342 325.707 li
466.09 327.309 li
466.944 328.804 li
467.798 330.299 li
468.652 331.793 li
469.613 333.181 li
470.574 334.463 li
471.642 335.744 li
472.603 337.025 li
473.777 338.2 li
474.845 339.374 li
476.02 340.442 li
477.301 341.51 li
478.582 342.578 li
479.864 343.539 li
481.252 344.5 li
482.64 345.354 li
484.135 346.208 li
485.736 347.062 li
487.338 347.81 li
489.046 348.557 li
490.755 349.198 li
492.57 349.839 li
494.492 350.479 li
496.414 351.013 li
498.443 351.44 li
500.578 351.867 li
502.82 352.188 li
505.169 352.508 li
507.625 352.615 li
510.188 352.721 li
512.751 352.828 li
515.527 352.721 li
518.41 352.508 li
521.399 352.294 li
524.389 351.867 li
527.592 351.333 li
530.902 350.693 li
534.319 349.945 li
537.843 348.984 li
541.473 347.917 li
545.104 346.742 li
548.948 345.354 li
552.792 343.859 li
556.742 342.151 li
560.8 340.229 li
564.857 338.2 li
569.021 336.064 li
573.186 333.609 li
577.35 331.046 li
581.621 328.377 li
585.785 325.494 li
590.056 322.504 li
594.221 319.301 li
598.492 315.991 li
602.549 312.467 li
606.713 308.837 li
610.664 305.099 li
614.615 301.255 li
618.352 297.412 li
621.342 293.888 li
624.225 290.364 li
626.787 286.627 li
629.457 282.89 li
632.446 279.153 li
635.329 275.416 li
637.785 271.465 li
639.921 267.514 li
641.949 263.457 li
643.765 259.506 li
645.473 255.449 li
647.822 251.605 li
649.958 247.654 li
650.812 246.586 li
650.812 247.44 li
650.812 247.12 li
650.812 246.907 li
650.812 245.091 li
650.812 242.529 li
650.812 239.112 li
650.812 235.054 li
650.812 230.356 li
650.812 225.231 li
650.812 219.785 li
650.812 214.126 li
650.812 208.36 li
650.812 202.488 li
650.812 196.615 li
650.812 190.742 li
650.812 184.977 li
650.812 179.211 li
650.812 173.658 li
650.812 168.213 li
650.812 163.087 li
650.812 158.496 li
650.812 157.962 li
650.812 158.176 li
650.812 157.428 li
650.705 158.283 li
650.812 157.855 li
650.598 158.069 li
649.958 158.069 li
650.812 156.895 li
650.598 157.855 li
650.812 157.535 li
650.705 157.749 li
650.705 157.322 li
649.21 156.681 li
648.036 155.506 li
646.861 154.332 li
646.327 152.73 li
645.9 152.623 li
646.114 152.623 li
645.793 152.73 li
646.754 152.623 li
645.58 153.478 li
645.58 152.837 li
645.793 152.623 li
645.366 152.73 li
646.114 152.623 li
645.58 152.623 li
645.687 152.623 li
645.153 152.623 li
640.775 152.623 li
635.97 152.623 li
630.738 152.623 li
625.399 152.623 li
619.954 152.623 li
614.401 152.623 li
608.849 152.623 li
603.19 152.623 li
597.637 152.623 li
592.085 152.623 li
586.746 152.623 li
581.514 152.623 li
576.603 152.623 li
572.118 152.623 li
568.274 152.623 li
565.071 152.623 li
562.508 152.623 li
560.906 152.623 li
560.586 152.623 li
560.373 152.623 li
561.227 152.623 li
560.159 153.478 li
556.422 155.72 li
552.685 158.176 li
548.841 159.991 li
544.997 161.913 li
541.26 164.048 li
537.416 166.184 li
533.679 168.853 li
530.048 171.843 li
526.525 174.94 li
523.001 177.823 li
519.371 180.492 li
516.061 183.588 li
512.751 186.578 li
509.013 190.529 li
505.276 194.693 li
501.753 198.857 li
498.336 203.128 li
495.026 207.506 li
491.823 211.884 li
488.726 216.262 li
485.843 220.746 li
483.067 225.124 li
480.504 229.609 li
478.048 233.987 li
475.806 238.365 li
473.777 242.742 li
471.749 247.013 li
470.04 251.178 li
468.332 255.342 li
466.944 259.399 li
465.556 263.35 li
464.381 267.301 li
463.42 271.038 li
462.566 274.775 li
461.818 278.299 li
461.178 281.716 li
460.751 285.132 li
460.324 288.336 li
.580774 .259068 .991333 .0688182 cmyk
@
440.143 293.674 mo
439.716 297.518 li
439.396 301.149 li
439.182 304.779 li
439.182 308.196 li
439.182 311.506 li
439.396 314.816 li
439.609 317.806 li
439.929 320.795 li
440.357 323.678 li
440.89 326.455 li
441.424 329.017 li
442.065 331.58 li
442.812 334.036 li
443.667 336.385 li
444.521 338.627 li
445.375 340.763 li
446.336 342.898 li
447.404 344.82 li
448.471 346.742 li
449.539 348.664 li
450.714 350.372 li
451.995 352.081 li
453.276 353.789 li
454.558 355.284 li
455.946 356.886 li
457.441 358.274 li
458.936 359.662 li
460.537 361.05 li
462.139 362.331 li
463.847 363.613 li
465.556 364.787 li
467.371 365.855 li
469.293 366.923 li
471.322 367.99 li
473.35 368.845 li
475.486 369.806 li
477.728 370.66 li
480.077 371.407 li
482.426 372.048 li
484.989 372.689 li
487.551 373.222 li
490.328 373.65 li
493.211 373.97 li
496.094 374.29 li
499.19 374.397 li
502.393 374.504 li
505.703 374.397 li
509.12 374.183 li
512.644 373.863 li
516.274 373.436 li
520.011 372.902 li
523.962 372.155 li
527.913 371.3 li
531.97 370.233 li
536.241 368.951 li
540.512 367.563 li
544.89 366.068 li
549.375 364.36 li
553.966 362.438 li
558.557 360.303 li
563.256 358.06 li
567.954 355.604 li
572.759 352.935 li
577.564 350.052 li
582.368 347.062 li
587.173 343.966 li
591.978 340.549 li
596.783 337.025 li
601.588 333.395 li
606.286 329.551 li
610.771 325.707 li
614.401 321.97 li
618.245 318.34 li
621.875 314.496 li
625.186 310.225 li
628.389 306.06 li
631.912 301.789 li
635.65 297.625 li
639.28 293.354 li
642.91 288.976 li
646.007 284.385 li
648.676 279.687 li
650.812 277.551 li
649.958 276.27 li
649.637 276.27 li
650.812 276.911 li
650.812 276.27 li
650.278 275.629 li
650.812 274.562 li
650.812 271.251 li
650.812 267.087 li
650.812 262.176 li
650.812 256.73 li
650.812 251.071 li
650.812 245.305 li
650.812 239.325 li
650.812 233.239 li
650.812 227.26 li
650.812 221.174 li
650.812 215.087 li
650.812 209.001 li
650.812 202.915 li
650.812 196.829 li
650.812 190.742 li
650.812 184.656 li
650.812 178.677 li
650.812 172.697 li
650.812 166.825 li
650.812 160.952 li
650.812 155.186 li
650.812 152.623 li
648.356 152.623 li
642.91 152.623 li
637.251 152.623 li
631.592 152.623 li
625.933 152.623 li
620.167 152.623 li
614.401 152.623 li
608.635 152.623 li
602.869 152.623 li
596.997 152.623 li
591.231 152.623 li
585.465 152.623 li
579.592 152.623 li
573.826 152.623 li
568.06 152.623 li
562.401 152.623 li
556.849 152.623 li
551.403 152.623 li
546.278 152.623 li
541.58 152.623 li
537.629 152.623 li
534.426 152.623 li
533.465 153.157 li
532.824 152.623 li
532.291 152.623 li
532.824 153.798 li
532.824 153.478 li
531.65 152.623 li
529.621 154.759 li
525.03 157.642 li
520.652 160.952 li
516.488 164.689 li
512.43 168.533 li
508.48 172.377 li
504.422 176.114 li
500.365 179.531 li
496.414 182.948 li
492.677 186.792 li
489.26 190.849 li
485.63 194.586 li
481.999 199.285 li
478.369 204.196 li
474.845 209.215 li
471.535 214.233 li
468.332 219.252 li
465.235 224.377 li
462.352 229.395 li
459.683 234.414 li
457.227 239.432 li
454.878 244.344 li
452.636 249.256 li
450.607 254.167 li
448.792 258.865 li
447.19 263.564 li
445.695 268.155 li
444.414 272.746 li
443.239 277.124 li
442.172 281.395 li
441.424 285.666 li
440.677 289.724 li
440.143 293.674 li
.282292 .876616 .794858 .24213 cmyk
@
476.874 282.997 mo
476.66 285.559 li
476.554 288.015 li
476.554 290.258 li
476.66 292.5 li
476.767 294.635 li
476.874 296.664 li
477.194 298.693 li
477.408 300.508 li
477.835 302.323 li
478.155 304.032 li
478.582 305.74 li
479.009 307.342 li
479.543 308.837 li
480.077 310.331 li
480.718 311.72 li
481.252 313.108 li
481.892 314.389 li
482.533 315.563 li
483.28 316.845 li
484.028 317.913 li
484.775 319.087 li
485.523 320.155 li
486.377 321.223 li
487.231 322.184 li
488.085 323.145 li
489.046 324.106 li
490.007 324.96 li
490.968 325.814 li
492.036 326.668 li
493.104 327.416 li
494.172 328.27 li
495.346 328.91 li
496.521 329.658 li
497.695 330.299 li
498.977 330.939 li
500.365 331.58 li
501.753 332.114 li
503.248 332.648 li
504.742 333.181 li
506.344 333.609 li
507.946 333.929 li
509.654 334.356 li
511.469 334.676 li
513.284 334.89 li
515.313 335.103 li
517.342 335.21 li
519.477 335.317 li
521.72 335.21 li
523.962 335.21 li
526.418 334.997 li
528.874 334.676 li
531.543 334.356 li
534.213 333.822 li
537.095 333.288 li
539.978 332.541 li
542.968 331.793 li
546.171 330.832 li
549.375 329.658 li
552.578 328.483 li
555.995 327.095 li
559.412 325.494 li
562.935 323.892 li
566.566 321.97 li
570.196 319.941 li
573.826 317.806 li
577.457 315.563 li
581.194 313.001 li
584.931 310.438 li
588.561 307.662 li
592.299 304.779 li
595.929 301.683 li
599.559 298.586 li
603.083 295.276 li
606.607 291.859 li
610.023 288.336 li
613.333 284.812 li
616.643 281.182 li
619.74 277.444 li
622.73 273.601 li
625.613 269.757 li
628.389 265.913 li
631.058 262.069 li
633.621 258.118 li
635.97 254.274 li
638.105 250.43 li
640.241 246.586 li
642.056 242.742 li
643.871 239.005 li
645.473 235.375 li
646.968 231.744 li
648.249 228.221 li
649.424 224.697 li
650.491 221.387 li
650.812 218.718 li
650.812 216.689 li
650.812 214.767 li
650.812 212.738 li
650.812 210.496 li
650.812 207.933 li
650.812 205.05 li
650.812 201.954 li
650.812 198.644 li
650.812 195.227 li
650.812 191.917 li
650.812 188.607 li
650.812 185.617 li
650.812 182.948 li
650.812 180.599 li
650.812 178.677 li
650.812 176.968 li
650.812 175.58 li
650.812 174.513 li
650.812 173.445 li
650.812 172.591 li
650.491 171.736 li
649.958 170.562 li
649.424 169.387 li
648.783 168.106 li
648.036 166.931 li
647.288 165.757 li
646.541 164.689 li
645.793 163.621 li
644.939 162.554 li
644.085 161.593 li
643.231 160.632 li
642.27 159.671 li
641.309 158.71 li
640.348 157.855 li
639.28 157.108 li
638.212 156.254 li
637.144 155.506 li
635.97 154.759 li
634.795 154.118 li
633.621 153.478 li
632.553 152.944 li
631.699 152.623 li
630.845 152.623 li
629.99 152.623 li
628.816 152.623 li
627.535 152.623 li
625.933 152.623 li
624.118 152.623 li
621.875 152.623 li
619.313 152.623 li
616.43 152.623 li
613.333 152.623 li
610.13 152.623 li
606.927 152.623 li
603.724 152.623 li
600.841 152.623 li
598.065 152.623 li
595.609 152.623 li
593.473 152.623 li
591.444 152.623 li
589.629 152.623 li
587.707 152.623 li
585.145 152.944 li
581.941 154.012 li
578.738 155.293 li
575.321 156.681 li
571.904 158.176 li
568.381 159.884 li
564.75 161.699 li
561.12 163.728 li
557.49 165.864 li
553.859 168.213 li
550.122 170.669 li
546.385 173.338 li
542.755 176.114 li
539.017 178.997 li
535.387 181.987 li
531.757 185.19 li
528.233 188.5 li
524.709 191.81 li
521.293 195.334 li
517.983 198.964 li
514.673 202.595 li
511.576 206.332 li
508.586 210.069 li
505.703 213.913 li
502.927 217.757 li
500.258 221.707 li
497.695 225.551 li
495.346 229.502 li
493.211 233.346 li
491.075 237.19 li
489.26 240.927 li
487.445 244.664 li
485.843 248.401 li
484.348 252.032 li
483.067 255.555 li
481.892 258.972 li
480.825 262.389 li
479.864 265.592 li
479.116 268.796 li
478.476 271.785 li
477.835 274.775 li
477.408 277.658 li
477.087 280.327 li
476.874 282.997 li
.865598 .642817 .189273 .0409857 cmyk
@
490.541 277.872 mo
490.434 280.007 li
490.328 281.929 li
490.328 283.851 li
490.434 285.666 li
490.541 287.375 li
490.755 289.083 li
490.862 290.685 li
491.182 292.18 li
491.395 293.674 li
491.716 295.062 li
492.143 296.451 li
492.463 297.732 li
492.89 299.013 li
493.317 300.188 li
493.851 301.362 li
494.385 302.43 li
494.812 303.498 li
495.453 304.459 li
495.987 305.527 li
496.627 306.488 li
497.268 307.342 li
497.909 308.196 li
498.549 309.05 li
499.297 309.904 li
499.937 310.759 li
500.685 311.506 li
501.539 312.253 li
502.287 312.894 li
503.141 313.641 li
504.102 314.282 li
504.956 314.923 li
505.917 315.457 li
506.878 316.097 li
507.839 316.631 li
508.907 317.165 li
510.081 317.592 li
511.149 318.126 li
512.323 318.553 li
513.605 318.98 li
514.886 319.301 li
516.274 319.621 li
517.662 319.941 li
519.05 320.262 li
520.652 320.475 li
522.254 320.582 li
523.855 320.689 li
525.564 320.795 li
527.379 320.795 li
529.301 320.795 li
531.33 320.582 li
533.358 320.475 li
535.494 320.155 li
537.736 319.835 li
540.085 319.301 li
542.541 318.767 li
544.997 318.126 li
547.666 317.379 li
550.336 316.524 li
553.112 315.457 li
555.995 314.389 li
558.878 313.108 li
561.867 311.72 li
564.964 310.118 li
568.06 308.409 li
571.264 306.594 li
574.467 304.672 li
577.67 302.537 li
580.98 300.294 li
584.184 297.839 li
587.387 295.383 li
590.59 292.713 li
593.793 289.937 li
596.89 287.054 li
599.986 284.065 li
602.976 280.968 li
605.966 277.872 li
608.742 274.668 li
611.518 271.358 li
614.188 268.048 li
616.643 264.631 li
619.099 261.321 li
621.342 257.904 li
623.477 254.488 li
625.506 251.071 li
627.428 247.761 li
629.136 244.451 li
630.738 241.141 li
632.233 237.937 li
633.621 234.841 li
634.795 231.744 li
635.863 228.755 li
636.824 225.765 li
637.678 222.989 li
638.426 220.213 li
639.066 217.543 li
639.6 215.087 li
640.027 212.632 li
640.348 210.282 li
640.561 208.04 li
640.775 205.798 li
640.882 203.769 li
640.988 201.74 li
640.988 199.925 li
640.882 198.003 li
640.775 196.295 li
640.561 194.693 li
640.455 193.092 li
640.134 191.49 li
639.921 190.102 li
639.6 188.607 li
639.173 187.326 li
638.853 186.044 li
638.426 184.763 li
637.999 183.588 li
637.465 182.414 li
636.931 181.346 li
636.504 180.278 li
635.863 179.211 li
635.329 178.25 li
634.689 177.289 li
634.048 176.328 li
633.407 175.473 li
632.767 174.619 li
632.019 173.765 li
631.379 173.018 li
630.631 172.27 li
629.777 171.523 li
629.029 170.775 li
628.175 170.135 li
627.214 169.494 li
626.36 168.853 li
625.399 168.213 li
624.438 167.679 li
623.477 167.145 li
622.409 166.611 li
621.235 166.077 li
620.167 165.65 li
618.993 165.223 li
617.711 164.796 li
616.43 164.369 li
615.042 164.048 li
613.654 163.728 li
612.266 163.515 li
610.664 163.301 li
609.062 163.087 li
607.461 162.981 li
605.752 162.981 li
603.937 162.981 li
602.015 162.981 li
599.986 163.087 li
597.958 163.301 li
595.822 163.621 li
593.58 163.942 li
591.231 164.369 li
588.775 164.903 li
586.319 165.543 li
583.65 166.398 li
580.98 167.252 li
578.204 168.213 li
575.321 169.387 li
572.438 170.669 li
569.449 172.057 li
566.352 173.552 li
563.256 175.26 li
560.052 177.075 li
556.849 179.104 li
553.646 181.239 li
550.336 183.482 li
547.132 185.831 li
543.929 188.393 li
540.726 191.063 li
537.523 193.839 li
534.426 196.615 li
531.33 199.605 li
528.34 202.701 li
525.35 205.905 li
522.574 209.108 li
519.798 212.418 li
517.128 215.728 li
514.673 219.038 li
512.217 222.455 li
509.974 225.872 li
507.839 229.289 li
505.81 232.599 li
503.888 236.015 li
502.18 239.325 li
500.578 242.529 li
499.083 245.839 li
497.695 248.935 li
496.521 252.032 li
495.453 255.022 li
494.492 257.904 li
493.638 260.787 li
492.89 263.457 li
492.25 266.126 li
491.716 268.689 li
491.289 271.145 li
490.968 273.494 li
490.755 275.736 li
490.541 277.872 li
.0636912 .698146 1 .00854505 cmyk
@
gsave
329.096 490.352 mo
708.15 490.352 li
708.15 93.1457 li
329.096 93.1457 li
cp
eclp
1.28131 lw
565.711 489.711 mo
565.711 93.1493 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
gsave
329.096 490.352 mo
708.15 490.352 li
708.15 93.1457 li
329.096 93.1457 li
cp
eclp
1.28131 lw
329.203 241.888 mo
707.51 241.888 li
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PEJBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 48 /zero put
dup 50 /two put
dup 53 /five put
def
/FontBBox {-503 -307 1240 964} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/hyphen <1C60D8A8C9B83844CBABF75256C23589A050D2F18EC6AAEA2DCAA87
9D629F0698E85A7558DC3794B984219238EC694626573D368F005AA7EB3DEDB5
5CE7021DF056336AEE3D77182F0055C3CB6954365C7523BFC42E70B7DCDE95A> |-
/zero <1C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D9
7848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F16
B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D3
8BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08AD
A9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F6
E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922B
3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B8657
13255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF8009
5A893636D91177B06233710432F07D42A84BDDC> |-
/two <1C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08F1
4E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0C2
CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE715
28F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93BE0
9822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F95
265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C543A
B1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE8C
81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D53D
FF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71B9
F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD67
9CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB80084F
99BE2DC9C90C6E2171BED79C2858C6> |-
/five <1C60D8A8C9B7A0860A2FEF2204D5F6595F7308551A6818CDF94E88E3B
51B4BFE590C6C493EDCD8FEAF219DF0A81427DD4448B9AA3D521907C381F007F
90EAA6BC6813C5ECBAAF3D43E8D7ECD68BE462C6609F3ACF35A15EAD8FA724A3
9F8FF3985AE57C3EE7F2468EE63E1FB60462E54FAAE1AC468FACAB6388343391
78434A5708D879091BB754334B9583D4A5B182F7341B7C5532CBD4850F827BD4
7C22464ADF744DC69CDD73CE1B847A119D178326C1D936B2671B4F66DB4C82AB
BF0998D204C6B2C54A8D1373452768F53CE9B8820F53D8324A8C20B1220EC9CC
36BAB88FC34DC3CEFE67B448F164F98C88B484017D4F4837C386AA9084C55574
5CF40FCBA2F2E48A2601177A6F7710FB1E609D9618B1B59141D82B990F422233
CFE27E6C13ACAEB970E79830DB3E2D7CCF772EC4469F50BF2745AF6F98962532
A3064E83D5AB1B0D7166D20C01E1963E937E8AD71B78DC8903FAA6A9997FA20C
8> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri /PEJBAA+Calibri findfont ct_VMDictPut
/OLNYDH+Calibri*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /.notdef /two 2{/.notdef}rp /five 
202{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
304.687 492.381 mo
(-250)
[2.76508 4.49326 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
304.687 442.794 mo
(-200)
[2.76508 4.49326 4.49326 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDH+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE75
1F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E87A
977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156ECF
4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761DD
9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410A0
AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10D0
2550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C57
63C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E60183316
61C475AA9DED7C59> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDH+Calibri /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 
202{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
304.687 393.207 mo
(-150)
[2.76508 4.49326 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
304.687 343.619 mo
(-100)
[2.76508 4.49326 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
309.214 294.03 mo
(-50)
[2.76508 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
316.432 244.451 mo
(0)sh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
311.927 194.862 mo
(50)
[4.48462 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
307.421 145.256 mo
(100)
[4.49326 4.57303 0 ]xsh
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
307.421 95.6674 mo
(150)
[4.49326 4.57303 0 ]xsh
grestore
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
321.088 503.955 mo
(-250)
[2.76508 4.49329 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
368.39 503.955 mo
(-200)
[2.76508 4.49326 4.49329 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
415.691 503.955 mo
(-150)
[2.76505 4.49329 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
463.011 503.955 mo
(-100)
[2.76505 4.49329 4.49326 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
512.581 503.955 mo
(-50)
[2.76508 4.49329 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
563.487 503.955 mo
(0)sh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
608.546 503.955 mo
(50)
[4.48462 0 ]xsh
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
653.606 503.955 mo
(100)
[4.49329 4.57306 0 ]xsh
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
700.907 503.955 mo
(150)
[4.49323 4.57306 0 ]xsh
grestore
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
true set_gvm
%ADOBeginSubsetFont: KZMBAA+Calibri,Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KZMBAA+Calibri,Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 67 /C put
dup 77 /M put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
def
/FontBBox {-519 -306 1240 971} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F1
19478AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D1904
2FB8B7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28A
EC2A0702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D
929B025DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF4
3A5FA51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D
8D270BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FF
E381E622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A
6E83C18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF1
9D085C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EA
E508CE290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF159
9689FA1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB39
8CE8AC4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787
220FBA75DA1E45C945> |-
/space <1C60D8A8C9B888C146> |-
/parenleft <1C60D8A8C9B8327E958805E8662F53A1A990B9CCB71FCB46624E
3EEF04274C3DAF061F941DA251D48831553D467B545C4CEDC51B9017028716C8
5AD098E09A3C35F11C8F03EE82A4054E32B8BBACDB036019F71B89204547FB39
A4A6D739D6463F68B1144275E15DB1745616C854C02B531B02A4741FE67C594B
E3CE1193E9FE580C9645D3BCBBF3A5276BD064CC24D7CE1543587B9258356EAD
47C591BCCA33BA7700308079D71FAFD9F7BBD1A301FDDF3F5650AF7217E5B885
A3A308ACA9B6BCF33F287BA0E1E22E89D4640A10962E72F3FD> |-
/parenright <1C60D8A8C9B8327E956EFD6F583E438937FAC87F33DC46A0452
6D6E80E2849DBBCC1F7712D20B9271A919C9D9B2E00B79700FC941867FA947C2
84C3802BE0E95A70EEBACCBEC96A56F44B9450C107D71F89C454E931437855A0
3DB86968B1EA8C1D4D47096F611255B03FF5004580609A8DE3BCA48EE46A18BE
9E1809A8482B751FED58945B4AC13F78D1A1E271D871C9EC72400D26E7F64C18
5FB83A2303F6ABF6E27422155572EA49271E93DEA6E7C814186652AE23345084
28505562B1C8AD2B0420417> |-
/C <1C60D8A8C9B78AC3254CB836613B50FEE731C2E5FF280A909853D6AAC757
04A475106F343DA61338D6EE17C81455E5E94E3F2741FBC5A7A55DD147D129E9
9F091EF153D9400A04C295AF15CFE8E5EF897CA1760331E3EC16FF6DDF59CBE4
B8B189FBC000E1020B39AD4C860C477A6DADD3B61FF9666F144B51FA295CD747
BE0B0975C46FB9A64CF31B5B38EC2E16C2393646605BF1D7CFFCC4A2898D2D56
C78772F400DB0DEED21E9AD336A75503A00BDBD615F8BA93E3CAB6C42A285B4A
EA5BF202EF5C37256592BD4040034E3A7EBDD1E055E2381646DDB411A05665A7
BE606403C9AFF5D744DFBFAE5AFB2DC42D9F6BC86ED0962C547BBABC78E279A5
3D52EEA95D4976CD7142776F2988E43A7BE44D2CDF85216C769CE74967C09EA4
8A353B8AE0C3F6529C709DBE56EBBF40E019180A2AC98F4F24B439D8B503726D
C1BB6799D23A36A5761BC46D9B39706FD587C314645EF07556EBA44DDF99582B
6E> |-
/M <1C60D8A8C9B69F2EDC57251C098CD494497F9B27194FB941BAEBBFCF67DA
468CE7126865CFA25F226DFD40C157E80D1E6900C376BA8BC9DC47B3111C3A2C
D936AC8EC362BD24ED74F642515609D1C548907C5A1CDCADA83FAA2E203936CD
43067EFBE431C5F6A9F1C54FA865F37B94E12BAE34D11E926760BF310C17B2CE
06E3D9CA51D2CDAE57290F2C0E51E689DD3CF7F162E13246FD68DE31ADED7654
844D6F16DD1C60B43CBAAE0BADB905E9902A259EA8BD8FB7086C09F8F0B477B0
A845988A188A5E96A72E7AD3EE7686FB5FCB80E70073858768D75997C754CB9C
9D55A01464323F19DDCED74648DEA355AF857FC34746DE585A82906FDE1212C1
9591617D74A65399EEA7419B90CC120A94EF1CB8C35CC45B7CB54CC43612522A
C61EB82DBCB150F072182572BD2E99E351C000C5A8C1DDE6C3EA6FE78C06CD77
A518> |-
/P <1C60D8A8C9B7876E7B6051918B0CB59DE076B64C8C49A5DA02FCDF071BDF
FAD7C92735E6137051509AC8CB684E8479BF8D6E587DBA864F50A4E9968B9001
01533A81B7315E5635E910F633B3C8F74196CCCC1B0507109F1B1BB9A29E7D81
2E4438818B1C7D155075E4CD25D535EFA79BAE24E64D32CD5F9BC09B4F74C278
A3C1BD035A40B815B3035706B0AD5FD304DCB7953E153A1AFAA729815057B9B9
18248D356F4E0C23746C525E6E30C1CDD3880B36A24277890D67A7BAA12BFDE8
5E896F0F4E0CFD215BEC86CD1A1AAEDF5027F5D656DD8EEF175D17890242268F
CE601EE1354322C31F441CD975> |-
/a <1C60D8A8C9B7AD0A34D5A33DA54D708C09070E3263DB3F8B204742934F45
464C864E5219DC64C17C21334728C70A28136E97F8B50DED54E9169E494DCFFB
E08054CD1ABEDFE9442047B18ABC511F07776D5525C7536F54A7020A4D066604
44EA4587557797F3D30E946423D7B549AB2AE4911FA9B4137E2A2722357A506A
6A05F91A214894E28FEC6B492CDF90F6872AAE0C40180F5DD11FF249C62B7437
E3A71BA232F3D2872FD555E1C9AC4E7F4B48457EB6186F604DC3EE6103F0F881
A966A4A53DB93C1C7AD28044A61CF0FCE7D40BA68015641BB746FB7DDE0D2F13
5B3E72C27DE147EB6127162600CEE2FE996BF71B8B39FDE57DFC392DDA09C4BF
60254D74CA373499967C5100501D06A31B9AF30F8F868E5E3B054E309214BEED
4F999B3B55712B0FD812D6575581ED3C4A080C3FC359594852C6FA23B784C4DB
4B1AC424E90B4505E356F1C575F8C57FE52642AA261D219ED5B82760638581CA
02> |-
/c <1C60D8A8C9B719BD263F1C66E176AB1A9B9A5A3A8367D7DDD55624575D83
30769E89EDE2B210CAC0C33466D934E07EE8C5D0A40F156D15CC57AF923B2505
73D6A3F9259B0A3431793F366C2A4E1951E4FEDD7CFAEAA854A72A9831B3A189
34A1E3BA67B1825DD68D168A926FEDC2EA7260DFA821668535829AE8FBDD7974
81380CC39C4AF2C6ECADB05FF3DA8E4A111EB4A3E3B59FFB126A3A37C4B5A113
868987F4611BA41E12178776F476582469050F58D9C2434F2F75015CEE522ED8
E12899B67502531E8AB98B42F667383D35B65B55576BE7A1323FDACE70DEAB60
FF6C739F5C1FBD6BC404A862F611E798DE5F7D20626F50E2F0A84DB6262D7AA2
98F592743052BB8FB5A0340AD9FF86B3B347A6731F17F7E35046670F71F40967
A7BFAB9BA0179B380201FC6F3EA37CFED86A9E1255880201A87ECC18F17716BB
9085A306CE> |-
/d <1C60D8A8C9B78256DD14A89B5C5761E51CC6D0784EB7F41BE6BDEA5F8255
D1FE24990FE1D15D28EF8F0C7762E519633FBA92FD296338DBAB81155F27C91D
1316EB09C02392CC558827E85C7882426438ED0C996E6AF5FBAE3E4865B83761
EF22FDB1EFE24248D3B29570D3BD8C05EE4D4D69B81EDAFB096EDC81F1562768
53B908EFB15EC41828B5226E127DAF4B807D256A2E4F1FA53CE3C1E83FC9F599
D0D693317C924E42F44A22D2B6AE0DB64F8C1AF35225ECB5B9AEAA2C23E515F9
5B653AF3AAC6CA0651281FD546D48B6A07C75CDB334548DE80447540B2538266
71E04C7BA03594D53214958E122B2F845054AC5F5E297C0C37736732726AA3C7
27298E5B49D9D588DF2AD7FFFA7F426D61B6C814687C386CB5C77EDDB4A48CD1
6C454E1C3DCC2832833F01D8523A139255C5F9D553BFD44D8DB07E9C0CCAE08F
8D58> |-
/e <1C60D8A8C9B7A4C86C545A4AC8A7D7F6C345E834CA1213E882E926387794
826A205EEEE689D37E8FC5A261291E47A8EB37515D6AFF3E8D4C2927EEA10BDE
E7B9C51B7C7E29EC21F969487478C80B6DD492C8CB06797735DBFAA0767835E1
6CF60557FF99669574049AC02AF815FE3A71EC95AE08115F25C3E55D5B1FD10C
A1E741534F0E60416081D7FA16D9DFEF57FF91FD82FC7BA4FB9689D718D9A71D
ED1EF9DCA51AF0BBC79B40093EF91CBC3D8C48A3FDFEA41B5047A65EAFDD5AF1
021F9C948AAB35D583226126C585E079DEB6D479075845CECA8ED7ED10944C11
C924501DD381B71E2F7690C30AF54ADDDF92DD4099EA219A54E3CF84E276FA78
71C8A6ED23473DBBAA6EDA7BEF929816C1760D14417F454980C243ACB7FEEE42
2DBAD62FF97870FD2250B1790169B64F76> |-
/i <1C60D8A8C9B874A685BEE7073E3D9BEB2350BB486AC62AB5FFB3F3055796
FFA7201F6E4CDF32059564C619C9CC449E2E13D3438C6F3A00A8C33DF67EED72
B4A703E19615397FBD65B8F41AB93A2D076C7948B4D6A7E1920548D052C7AB18
31CD8F1E6F01CDE398A3464141E18D2DB8A524CC3BE1885811A2FA4464E9BFA4
4F3B137A209AC07BC2D4DC8265BE2C3CDB96FC76B4E494C7989F89FD865B563D
37857FCA1A5FB165B3A362BB87A93EC69254C2AAA91985E82347B6547083A306
CE> |-
/l <1C60D8A8C9B874A685BEE6A5E28F9948AE1E7D147199A7FD5C3385C67EA3
BE0E4BDDEEBED94EEAEFFC708E6FBFBB110A4FD3B0B2C6A50B9DF51D26DA8F79
E50A98C439853420902774615E5C4AA802BC14286E49C6715A4394D046A1685B
7F2557950D872EDAE985E8B69D5B3A1679FE91E5F44DD94A755B4DC7CB2094A7
62633492> |-
/n <1C60D8A8C9B78256DD09855002C1F642102EC28B82F48E21B28CD8D11618
04F5A9A747AD2624D941564B1DAE90411653B58E89369C53390A39373C180E92
1901CFF6CB5B97D1E2F6881105A39AF049AF7BAB6A1217A5C2B8A9279563CA12
76FC02BACD1EEE8432C4000AF8AC8B81C2B3B82F6968BF9741308293C4341FD8
C1BF06F82527B4BB1BFEB05C7AAE16687F72280798047F2DE0F0B0C1A73D4FFE
FAEDFA40DAB27F9393250746B607E6DD1B8488942E5E65DC28EF4BF61000038A
490B102DA889E711AC446FA2AE5AF546DC759185DC2C75747BB2C76E9F900921
B79B64F414F07BA72B97757066640FBFE321B86C7EC04E0E0AD1B078011E4790
36E3D4D1746C4387436B0F75E38AB678D2BFE9BAAAF021F8> |-
/o <1C60D8A8C9B78181CF98F408291F4DD5CDCB6D065079E3C32B2DC7574F85
010122317EAC4CB787C5DCCAEA2DCDF59718E98AB798D0A7C1D0A4AFDAF28987
02DB340B4925E43E83E5146EC936D266F11A185F61F58114BA94B80C81D7D8DC
D3FC28BA75D8A38DA3AC10DA8DE7F6935CAB2D98F05D04B7C0D79A2CEACAB661
A11B789E89B6D4B148DC1A7CB3550A2956556AF6D6068A328964C77CAC19F987
75B69DBB8B2282422672CD9527E49182094C282B5043D56AD150402E5BC1D0FB
CC13812FC82AC63ACFCEEF5D77A3A595F46555D44C6632B4645C234C6CF48BE6
8F54878A59D4C863675CD2B4AF968FD7298C1FD09F77D9> |-
/r <1C60D8A8C9B8096E3702EF2E87B058AE842B207DEF574BB847CCD95112A7
D3AF2292BD58741562B9BCC6292F597F1D5EBCE0E807704FFEEE94A1C26C1217
A6936D01C623E2C5895684B5E303EB80975424515B84C7D69EC348651F11929D
BDB8CCFDA7B6F9C1B9009E28D94026AB5BD0038F56495AC64C32BF2B47869240
B887B12AEF109BCAC343F49ECBE16F183F080759D157DB3263D01310CAAE2C54
DDFFEC62D46A41ECF6143B8F31D2939D6A574F5434EA593BC099DA68B97E5EC7
884FCC239BC4456DDBC4F814CD1EB45CF26D8A7ABC526080AD2183CF51F78664
0C20279AD04AC16902E6B89034C7C376D1FE7A7CD7A590466C8F02B429577E18
2F4F0EAD1CF88B5E7E78E67C50CD4796431188A92962F05200A8DB3D5ACE7A4B
4F41560DE12E28A90ED4FC728B93C15758> |-
/s <1C60D8A8C9B70C3961F94CC53AE3C44F5C46AC95D939CE1FE52948C4EEE7
85E0FF2F5DF6799D25AA3A56FE93A6DDD98DB4188430DEDDFD51DDDD0EC4FB2D
10B9991F4B7C4CB67E794966F2D33D75FB1F2DDE6EFD4602642CFD9DACD32FA3
6EDA8C51397D987B567B7680BA36338AB94FBCABA34B92422BB4A6BB2CBE6206
F57AA0A2A8A2C374FA199F756B8C6892CB5299CACCD25A505726792E9EDF4479
2CB8DB652BC2C1E7DA21138C5E5015116A1741E17007ED6C22C23344D4AB6862
1949E14CE8A88829C82C8B15CED1FB4CCBFE9D40DE0799FB0EF64F8A219CA309
825B69AD031354812E61F884D22EE3AACEE031A6653B1519602284061900E2F8
27432CCC337FB59A551E141C30CC55CE4632D5C31E3FC4C5BA252294FEB6FD80
75BB079C3F24431E8D5C774D59E09AC7C64BB8C53AB6E9F8C7BB53DE483CF423
4705F7D8C8DAE52A381BB24528B826C29FDDB8CF4F5222BFD577514759571983
51D7133DAADA661E1D1810802FDA79930F2C9526AA05D8290ED2102740497D73
44C308314BA0C891CD0738B84DA16A83588E2CD4B55EB551DFD1259DA456FC99
12D108BF1E0B750B68510C7DC36D8861FED79A1710E9E95C8C80B37227AD97F0
B3CDDD> |-
/t <1C60D8A8C9B811DA5D4543EFE763FE07FB96B6C57E1041B720B12395755A
D170E1C95BCAF4A2E07F08B3527B85FB4B749D3F56190F68B968E525451C3AE3
228733358D3B0A4C671159FB2D66F4623773F95AB53B6E5F82C4D1162EF1F1D4
E57FDA1EEF70327DBE4F94D4CA953DA49B009A6CE451FDF5FD819F6892B657B7
073F3DB90026C98348CDA83213F5FE3803287637443B9875961ADEC93A662F36
7D30B1D64FEC94C3B7D13A776301EC9C6F446E01C4556C7599D35348744BB4C0
7BEDF72B7B19A9909847F0BA47C222B2E533F87C4B7AA516B5A1E0E7365242B5
879EFE81A74993AD272F8F9838C2A26DF98C12A45718CB59AC62E5107E8E34F2
7910F2367476C7C04E0E4233AFE86333074EFF0032ECDB6435F19DBFBCDB19D0
579CF4055335373B7C3C1BD559B22725F49EA0166722B1401585> |-
/y <1C60D8A8C9B741FC3342012EA60F1002BDD0438156B641629D59554CF7CB
9EAD9463221AEC8B8F5B253729623B7A2EF0D3CFCE8A0130ACFED15CC8931C57
6C134F7B0DC6BA69FCC1D3B142D638D30211D94FC190C6BA94FCE9E281D4266E
F1E1305A6F90C18351A8F4A9A33B5818F8EC054C92678D4BE0D61C5CE294403B
EE15CA5325E2AAAD3AEB808F7725DFC94D606CACC435FD59BA7C1EA17757FE45
E337025587E49E7B457DFA96B9D8F7AF852A0E6D6A474CF9C7627B8F6CD7158A
8A50DC613ABA1515C2> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OLNYDI+Calibri,Bold /KZMBAA+Calibri,Bold findfont ct_VMDictPut
/OLNYDI+Calibri,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 25{/.notdef}rp /C 9{/.notdef}rp 
/M 2{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c /d 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
OLNYDI+Calibri,Bold nf
OLNYDI+Calibri,Bold*1 [-3.54496e-08 -8.8624 -8.8624 3.54496e-08 0 0 ]msf
300.672 358.185 mo
(Contrainte dans la direction y \(MPa\))
[-4.68826 -4.80338 -4.79459 -3.07523 -3.21704 -4.37805 -2.13583 -4.79459 -3.07526 -4.49329 -1.92313 -4.79459 
-4.37805 -4.79459 -3.5361 -2.0029 -2.14471 -4.37805 -2.00287 -4.82117 -2.13586 -3.19046 -4.47556 -3.73105 
-3.07526 -2.18018 -4.76791 -4.81229 -1.92311 -4.16534 -2.12695 -2.76505 -7.79883 -4.71478 -4.37807 0 
]ysh
grestore
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
true set_gvm
%ADOBeginSubsetFont: KZMBAA+Calibri,Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDI+Calibri,Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B770DA4D624E05372750B744AE13FADEAC31A4CBEC91AF7A07
1AFDBBEF63CE40D7A2927E485DAD195BE61E05DD728FBA731EDE7A382AC7A92C
DC7C43EE15066D9395252E1F027E9AD377009E5C6FCCFA45CA9286F66E3ACB45
EC609F2D7E179F6EB0CFE6354BB27D07DC5DB3BF03EB732910370E02073E2DDA
35A9A6E0487FC55255BD7C9E80B3132F0F8E82F280FABA2486CC06D4C384219D
A858B4A92322AE47185A48505403A3C251DFD22F4BDB26E7361669DEC7D13E0C
D6D3AD03567D59082948576E3AAE26CBD88E851F09AC9E0FFB609A5EBC92AD30
676362984D1D4057843CD1737A0767638D1C5BAC2AC938FAC5D24FE2D2D29645
D4DF293BDE0631ECC2074D1E18217116> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDI+Calibri,Bold /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDI+Calibri,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 25{/.notdef}rp /C 9{/.notdef}rp 
/M 2{/.notdef}rp /P 16{/.notdef}rp /a /.notdef /c /d 
/e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 
2{/.notdef}rp /r /s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
OLNYDI+Calibri,Bold nf
OLNYDI+Calibri,Bold*1 [8.8624 0 0 -8.8624 0 0 ]msf
458.936 512.861 mo
(Contrainte dans la direction x \(MPa\))
[4.68826 4.80338 4.79459 3.07523 3.21704 4.37805 2.13583 4.79459 3.07526 4.49329 1.92313 4.79459 
4.37805 4.79456 3.53613 2.00287 2.14471 4.37805 2.00287 4.82117 2.13586 3.19049 4.47552 3.73108 
3.0752 2.18024 4.76788 4.81232 1.9231 4.06787 2.11804 2.76508 7.79883 4.71478 4.37805 0 
]xsh
grestore
400.209 109.913 mo
610.344 109.913 li
610.344 87.7037 li
400.209 87.7037 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
gsave
290.87 516.405 mo
719.575 516.405 li
719.575 87.7002 li
290.87 87.7002 li
cp
eclp
.640655 lw
0 lc
400.209 109.913 mo
610.344 109.913 li
610.344 87.7037 li
400.209 87.7037 li
cp
1 /0 /CSD get_res sepcs
.502 sep
@
grestore
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: KZMBAA+Calibri,Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDI+Calibri,Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B714A578A8068F50E5B4EDB2372212B01CAB615DB07C103904
450BB5A8997C47AEC5DB24EF14BA90F3927F72C67B88B43920C02E453732113C
7AE410216CD5FC3658BB4C98F6B562D30FF248875FAB34B29D29E23CEEA2E8B3
B0EA7C8373FDB3F234B4B4B3B9E0E79270793676089616B54592E9AC3C2CD064
6989D88E0723A4348B40E2DC928EDC31D0F94BB479449D0B6C60> |-
/S <1C60D8A8C9B742B2428B22C58173B85783D75A797DBCB372A0CB32648247
4FAB61F063E0140601EC7FF01420397E5BDA67D4F9EDAE8E10230A79EC92A883
0D2282FCE48C14D6255C2ED38A9227193C8E6C63D4DDC56C1677AD4EE7A081BF
7E8A0FF7039F31DB9E38AA3D9C2EB519583088084AA15E2BB9360A4E499CAC66
644008970F6456622973EBC19ABE9CB7A2E2E1E436FF7CFF17A456DD4F34C942
5E8B0FD7DE46D10D79C35ECAF346DB73750038187DFDA7C08FA4F48F7113F63A
FD0A79F7B60ED56D2ECBD0518AE5F6486AECEBC538DAAA88840DE9FD61A7C5CE
810708E5D83B5B7C944D9C1E933328832CB2C1C15FF59A769DC54012A003CD2D
939547D59BB8CA0EDD6EE29AE032391BAF39F38DA1EDFC771E0FCA4EC6DCF952
E839737B2539E516D209F792B48305C6FAB4D747AEC9E9C287FF4145435610A8
CE0D829239E17AD471B7D50F49EAEE2D4789B01FCDAE85BE94E4A248F072817A
DE20C93B792AF7C1262529AB3872BFC67D038B73B9815822C383A38940639918
361A4A73948EE1A93B0DB78FD9D96349705DBB9BAADC27C924FF385CADAA15DB
528408E800871EF0C31C6F3F452B977A4424498006B5AFF12D057DDA48B3582F
ED5A4C> |-
/f <1C60D8A8C9B82E34BA8345420AB5B56C87B3324072F79B333A2AD398ABD9
C1C2EA51C46F3AA79B9C5266C362128101000FF25B7A09C7921D6A60C7D0E230
2A477F9DC8532CE311A572FE415EAC33F5FC6FE7C4AC619462BA3766FA3CE7BE
5313F186A0229CA736603FEB693F616D863B5B4610A5D1DDE34F5BDDDB1A7B75
61887626CC89D1027D74B6A998B7626618615399077A821334F1F5A19E1F452D
28FFB1112D5B47580426B77C77FD9755334A2C539E1B1B16EDBD30BAAC896BDF
B62834EE3B21E483B720E8F54CFA44EF352AD3E1EF66415D18B0B1EDC21E170E
F0C474188E1941A2E77A77C7A324282126B693416515B1B7991E79AF0D9D9EAD
CFE7BA25EA1E03872AF7BBCDBEFEFF2D0DF2E3DB323ADEA69D5185321166F6E1
2C828675970E363E6F0FEA1326F0F80F9B9751A4A0339F653F69FA8ECC3338F9
0338A7FE0450C8F1D9> |-
/g <1C60D8A8C9B741FC33483764299A12FECF5B424B921F1638B418D49AD8CC
9963C63B3AA219A5D4BE1E61602E0A46D9B7EFE172316C6D5B892D6ADDE5D252
8F58404262014692776607ED9FEF376902580B8C02BD731773D6FB7F2B7E8EB8
5C23FCC5E1AF9DFBBC90E2E61912ECD90630A69F23FF0B8C4EE724E61487824F
0AD0E39D6070F4E4045884E75A2063D1947EBCB0E10D1BE681823C4CDB758BE7
63EF892DC6733924007429A4A2787F28FEA57B2FFB5ABDDFA7D9E9074D9F3756
D6F34C0CF43B19360B382394D183AF45B0B3B98FC3F1D24257EBFF530F2F277B
17FA1E0C87E667FD5F85997B524610195116A8FE72672B292B06D63E095A2E86
A919F48751EA4D1B00566804965EA47D6EEDA872F76C4297F60EB4DB86C215A3
ABBA39D53700A0373989904046CD6FF12E13667085134B6D432AC6DF8D6B8D4A
1E48A3CB9A9B89F04E1FA7F186F4239393424E4D2D80048B3B74D449F9056EFD
A684BFA5A5756929753C434B4ECBD6DA1C66BD87629F33C7FB19CC2BFD390673
2A4B9F90C757E2A2AD993D4CCBB93191D5606033A5FB35BDD63214D3B0478ED8
768EC2FD124C41DB78452CEBD65904535C9E7E425B9032F384103F708FC89C61
68EB599D175B46EF0FF68E2E1C705DCAA4668D7FE56C29AE86E26C1109490736
A57C4139D482B4A559434FC9EA8FE3D7CF06BDE7DB76036EF6D4AD6F172AEC1A
B158F9> |-
/h <1C60D8A8C9B78256DD098552A13EB08FA6FA0D6709438B3D102551767CA1
A9E996A468589FBA293078984D3CE935CE0231F88F2DC01EAD3D4D7C30F367B4
FF8590AB3DC282E07D2BBA78BF8F6BA1A9D28C699F2490709333B2A7C7AB58F9
879C4857A63288F65938A4C40EF9DE33C4B5617CFAAAA9D228423A38CF0BAF30
AE63C9A38E0A50BB8D2C76240754A3BB0D75EA5E0E60276B334DD25FF24277F3
E187BAF4700B1AD1BCB29E368AE110915D56F0FC3F4CD7DD4385E5BCA564DCE4
92FAE459FD4A2AF8DF2CF0ED2C290B57C2260C120EFB0A6113A9C2037BAB7076
D8E7A3A0B41FAD04D3C3848E3E5A113E98F22BCEA62166624A15F5EE45C801EA
EAC69B6F067944425A7B9C87F60A063958733EC34ABF5DA43D> |-
/u <1C60D8A8C9B78256DD14A9D4CFBED1BDC0F18C95C4082E386E4202EC316A
773D8A30F080ADEC91D0110972258C98F99D057AA4BEADF7377C0737CBC02B02
83A44BC0695ADE1B267F48E12CE2216B2E9CE1F46FA8F6A7E394206FAB10EC5A
9623D4E38E3233F4B79961F3FC497A2341DE4C19EF987B2BBD60C6954F7C2A66
BFAC441FC6EF5D70CAE4B9D18C6C234C845D9B5C1128E01D7EED3EBACBCEAA81
555CE1104ABBEE3361A0DA732C15BFA88A8DC8AC2892954D8120CDA8D9F901B3
8677E84A025079FEBC3F90CA210E453321C393CC904D5039FFAB58A79ABCF1EF
3103597A64D9EFE158B9CA965B63D2279CEC94C047DCAAE96F0583EF883AECBA
4354D2178D47E9266659EB4ED782FE0D3BB7E0DF2E8F26E4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDI+Calibri,Bold /Encoding get
dup 76 /L put
dup 83 /S put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDI+Calibri,Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 25{/.notdef}rp /C 8{/.notdef}rp 
/L /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a 
/.notdef /c /d /e /f /g /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]
OLNYDI+Calibri,Bold nf
OLNYDI+Calibri,Bold*1 [16.0164 0 0 -16.0164 0 0 ]msf
402.896 104.334 mo
(Surface de charge de la loi Lion)
[7.57587 8.63287 5.68573 4.7728 7.91214 6.69485 8.12039 3.52356 8.63287 8.1044 3.52356 6.69482 
8.66492 7.91214 5.4295 7.36749 8.10437 3.61969 8.64886 8.10443 3.52356 3.94006 7.91217 3.52356 
3.94006 8.6167 3.97211 3.61969 6.77502 3.94006 8.6167 0 ]xsh
grestore
gsave
290.87 516.405 mo
719.575 516.405 li
719.575 87.7003 li
290.87 87.7003 li
cp
eclp
668.323 296.13 mo
719.682 296.13 li
719.682 199.498 li
668.323 199.498 li
cp
ef
grestore
672.38 207.613 mo
689.465 207.613 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDH+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B888C146> |-
/three <1C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1
F3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED3
4FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C
62BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B22
4ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248
C394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E82
7BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA8
68484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B2
7907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596
B5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB6
2C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306
FF743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA26610
7C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB15
837CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B55
55DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4
DAA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D
5285DD> |-
/nine <1C60D8A8C9B7A0860A301EA0CDD1E6614C5B4820FB68F7520C96ACBDA
5F5BAFFB43C2A40F5694CD0DF6C758BC4B27D6CA50AE28575E858E493E8EE957
51B2967F5BE904EB042AA54C454E869DDE0E5ECB98D962A79A94218E6CC99EC9
4CA8492476CEFACC72947B34D71483EF4A3F9FBD6098F9E6D0F9802BC600368B
96C45A928854D685E5F703C8552927ADDA55A7F6845FF94EAA937AABC9BBC958
B4C081275431EC73E38483911A0885AD9592E2DC6E2A46F9C6114077BB266957
E6E28F6602B8DDCA0BEF1FC2E85630EED478837B476664D493FE7C9C39460D3A
452FBB2694BD1646270493EF025BCD287C17FAB57AADFEC6BBBB276DCBDEDD84
29C79E3F0B7AE72D2AF69E31859788B91D84A6A02C4F5ACED217B45DF2B39CE3
6418F76E74AA7A90E0A131831180D8D1C02A132AF63FCFF40837B44B674B76E4
8FD0C7367BC67F41C69D179A9D8F36F3A84B3AE05F25F56032B04AB8A96049A1
F3B6B46B1ACDC441EDFD8013BADDD572E9DB08526455C6B9FAA1650BE8922CF3
F0574F6C4F7DFD3E1A3A0FBB1E99FF4319B> |-
/K <1C60D8A8C9B7B3D0EB7806B42229263C492A5DCAC6F1244164F295F5E410
8473A68BA31A10E6F22AB9EF5A9409C157DE2CE2626E4A77235FEEAB98F25141
006AE9C4D1B4E11290268B11ACD649F2BAF3C5397CDDB526BB3A5F414F769243
45024ECADABF989F9B40066B7184C29209EDBEF164C8091E1B5C8273E90CDEBB
300534143408AE764D7FC8C684B944DA4C2DD7320AA192D5C9091A2D19011F97
9A683EF4C872C8750436184FFC81729408ED8902371EA5D99CF979C895977400
7A893C30CD774A51914B58976B511D1370A8ABC9D36F32920DCEF74BF6E20082
784EDA54E5D25C601A69A047A091F63000A36321555F8F6A69EFF7A90EC8C26B
60467577D6168978B6AB0736DD646045844B58D5B9C53EC3B7F19445B4FBC197
93A9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDH+Calibri /Encoding get
dup 32 /space put
dup 51 /three put
dup 57 /nine put
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /.notdef /five 3{/.notdef}rp /nine 17{/.notdef}rp /K 180{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 210.149 mo
(1293 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
672.38 223.736 mo
689.465 223.736 li
.71722 .798611 .258183 .0968338 cmyk
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDH+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A0860A05CDAB07FCC8C6F1456010984E043BC1080A8E4
004C7A6F96FF4AD7F2A4B870B666CC1C7EA11B61E750FAAE008DD2598CE85BEE
4C2722299D9BDE6BD901B361B9FFD1A74A6881105044BA6119A67BABA2C5AA34
4BC5F5DC3AF8B4A3D3F44101FD3AF23A3469D02149FFD63F48CC3EA80D9EB13A
8494F7709B008152FFA0D84385AFFDE11B5FA65E8FC9AAD2BCC7E5E382783235
F954A8738DCC9A5760FEB582741B59F3C495CA1895A9F6120A54415FC0BB4494
CFF5A03D1CB88055E001BDA6B35B19BB5CD64D26C1A126C3877F4B0A8ECE9817
BE4A2EC5FA3C6FC9FCDEF6FA038892760F02C70AC24D1AFF24D0C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDH+Calibri /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 3{/.notdef}rp /nine 17{/.notdef}rp /K 180{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 226.254 mo
(1493 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
672.38 239.753 mo
689.465 239.753 li
.580774 .259068 .991333 .0688182 cmyk
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDH+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A0860A34D75BA8453DBFB814014C0C4728DA471D5EF3
791FA4240EB1CC5BF59A5FA3487E2F0E763DAE46F0DA05A89110163D83524D7E
A404AA647CFB8B0BF18B885098268812056B970352E34734EFB8EA99DA80F13C
7EFBAAE9ADBB45CD604BFF3A39C9CC7A0A83927D7D5A4B2E75D06E370927DFBA
451037A06D79A6A428CAC7E4423B70CA5D5D84E759135799161CA6E3C2209FA7
2A04B7CEE79D2AC2B53CAC28C9C6BE5E7D7175AE6E2CDBF62577563D698630AB
A357964D6FFA816FE517BCC518B9BCEDB14F7DE18A518BCAEFF1096D5DA42B50
3A93BE53FF4096FBA3F5C24B50D0262930A71DE4A30874070C74699A09A6A247
94006AC9B7A896C548D6B8A51F3AEA75D328845EEB09204FA41C0B74E70ABFB1
182501534524562F70E09292D6FA1A2C8E6C1FD060E3FBD2AF40CE1DF48002A1
4BE258ED46D903FA50D027660F585DE036DCF220923D5C07205E776E7E63A964
5C94249B49895A3F8BA08BA0FB2447F849C17ADA529360F3F87B59DDD9C8CE3F
87CCDE20932F0C0C3CA7CC03F3A3737BDDA3DE2F37B11A6A44911E362A1E35F4
3EA93B84A7F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDH+Calibri /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five 2{/.notdef}rp /eight /nine 17{/.notdef}rp /K 
180{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 242.351 mo
(1893 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
672.38 255.876 mo
689.465 255.876 li
.282292 .876616 .794858 .24213 cmyk
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: PEJBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDH+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A0860A364A1C4BD4224B64164DA02FBCB4B7345339E2A8
52FD73E42DE7B33A3E7CFB23D9B5B8828A7C7D03CC2719F783D654783B633B73
A159EC40ED3395FD8B11AAD632B5F29C41331F1B36125BA7D1997B676C8B10E4
336915C40AB6B715EB23A1290DE9BC0FC782B3F347C05ADDB685745560E028E6
D97D9B35BCB3F2E559B2DC5C5BA08FC08878230072154C5ED21DC85222CEE603
D2207BBABB8920C302B640B67339B888C31AFFCD44289945C30BE18E4BB99D4A
64979385EA488C3253806E2D6260691D0C13654DD70C80A76BBEC3A015B5ED35
3B26EFCFEEB6FE090864A2CDC657CC530BBBC6E4432DD73860472AE853F0A442
CE33C314B6FB1A984BFFA8B424295E2E940122AF725F7E4DA2F35898F6EE04DB
FD7E3B4D0DE9D4BE8784F49E3C23BC8B8AF125653EE8B0C9AAC11F53D23578DB
44B0D0AE9BFCADB8B50F9B84D1369F9276D7D311EED812EA2436CC31922AF348
437A5A953DC50D5D5FA6A0F3539C2875F47124A85A390502719CA13B79152707
92BEC2AFCFF9F604488CC0865FE1B7A6F72DFBD2EEA384F569C8F80EFA751CBA
37C08B0FB2064FF9BEB6D7BCAD5976B48494092CB6C87915EF1610> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDH+Calibri /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDH+Calibri*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three /four /five /six /.notdef /eight /nine 17{/.notdef}rp 
/K 180{/.notdef}rp]
OLNYDH+Calibri nf
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 258.438 mo
(1693 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
672.38 271.999 mo
689.465 271.999 li
.865598 .642817 .189273 .0409857 cmyk
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 274.535 mo
(2093 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
672.38 288.015 mo
689.465 288.015 li
.0636912 .698146 1 .00854505 cmyk
@
gsave
290.87 516.406 mo
719.575 516.406 li
719.575 87.7004 li
290.87 87.7004 li
cp
eclp
1 /0 /CSD get_res sepcs
1 sep
OLNYDH+Calibri*1 [8.8624 0 0 -8.8624 0 0 ]msf
691.431 290.64 mo
(2293 K)
[4.49329 4.573 4.49329 4.49329 2.00287 0 ]xsh
grestore
.640655 lw
0 lc
290.87 516.512 mo
719.682 516.512 li
719.682 87.7003 li
290.87 87.7003 li
cp
1 /0 /CSD get_res sepcs
.475 sep
@
grestore
393.92 111.54 mo
616.63 111.54 li
616.63 87.306 li
393.92 87.306 li
cp
ef
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
393.92 111.54 mo
616.63 111.54 li
616.63 87.306 li
393.92 87.306 li
cp
1 /0 /CSD get_res sepcs
.502 sep
@
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: CIIAAA+Arial,Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
systemdict begin
OLNYDG+Arial,Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B64EDFF4DB3154EF1496D6E24F0CAC281A26842F9982575972
80DD1E6498DF18A9DA7D721D169321D8C5E0431AC7382FA4310DC48BBF78710C
6BC5247040A24ACAC01421F5FBDE686580BE547F54A1AA74DC005E8E5CD476A9
5687DB199C1234EC19B3DCC9809D20AF7E582B47F9C3146B190D9EA96357C8C7
5B37ED0E8A0609D6AA98D6ECE5CCE67035EEBD2539BAF0BB0A05B823E40DDAE9
B8EE162F6E47FABB31D9FF0B75F8D71F52C148E77FE80FB24454F3884141B009
620C0B57EC496B1B9A1D8EA8A41DD33836FFD894AD961F351294F76A> |-
/a <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B62
9FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73D4
43463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B40
E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02BB
76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2F9
524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB6837
78C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C92
0ECC30772CD6DD1CCCB84D330E3FAA> |-
/c <1C60D8A8C9B7EF32242001ABD2AFBBD336641D8D7284783472C96CFCC434
DFC100FC24422711A9090DEA4D32109037578992AFF27835B7F260887A799CBA
44C497ED942D76A3A4BD63536DE6F757481EB22D2DEF055F331ED9622202739A
C583596554B76ADC212E19C7FBCE810B4022B5DAB3AF3C114AF2730DCBE9D35C
B6B42E872730D77BAB> |-
/d <1C60D8A8C9B7D8BE1937528A8A04A3F08B6D80EAB145BDD9DBE53FB1B70A
6DDBF10422FFF8F4C48F788DD104B24EA5229392446A977753676010F4776395
4952B19E372D9318BC5C7A48B7A85FDEA74862756E58887CA2F53B9D7C319DD7
A84656FBF89C0C66533E86D0B18AA2C13EC41ADA69D4E07EF68978C6DC11D8A9
705A6EC736D21DD4607DF3> |-
/e <1C60D8A8C9B7EF322BF270AB151730C1576B3DBF6DAC6B05EF7C7C2AC355
0E4D7D76EEB5EC00E2AE0B63EA674701E41362C9EF4C943E6044930A81C0288C
730E9CD4222EC82D37FE43450E9A846C17FEBAA9742B3180B655FFA4E0E014EF
214E09E7DE6E45A7476C6DEA21B47E198DDC2AD648DA39E6CBF2981071855AA9
4524E4E0809AB2B25573430347DD> |-
/f <1C60D8A8C9B81F2C5A71D50B9B0701F5A31E22DDFBF554FF2D149AB14DDE
FC1B9ADBD8105EC88497FBC09B03794C95967111EB4354C8578F0E042075107F
9743D9A4F26007EA81109EB5443BB577E4EC9F8677529403BA64E3F5> |-
/g <1C60D8A8C9B7D8BE2780ECF91BB8FE73517B0190DDC8DBC9897295332E6D
8EF13268DE217D7EA63F2C2488BA6624154001DFCD86A24A51CFE6922F8614F4
FD4481342B3992244B419F0D448BA14CBCD530939FD538BD00615A031E3CBF16
09B0E4C3D7F5A051C575D052C1A51F88B318CA9D0C7CFDFA53AA8FB2F2EE274E
E2F4C85657CA9E748262BB03EF446591D320994414EE439D72B9883F38366A41
CF501DCE32006C591422CCF439307E4D3088D90FF7CD2955301C96A46D1D1545
AF9D499025D541CB2077BD42919F91257F222D868E80527F0D65> |-
/h <1C60D8A8C9B7D8BE30E20DCA6EE6AB6CC3B52F6392A45738EC6E57C5FD4B
5006DD4CC13130165A71E6C8AD32848FD70F464465300BAF67B8EDC5E52749AF
8D970E7EFFDCC8EF63F6AB31364E59004A6FCF5A143C0BB48A0AC6C4FDED1312
DDD5BAEDEFE14256E656A094680FE5979938> |-
/i <1C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F6678
BEC800D8864E53D53A> |-
/l <1C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |-
/o <1C60D8A8C9B7D8BE34A30C11766266259B98A0BA89715D82F7092153A622
8252D7594BDD75B2A7C57DC89088F8B1FFC43993725AE434A67B356F5F6B64D5
28A1696640F00DD016EBC232B8C863EA85B4B724E805002B9447A61792050E5F
2AB51B8800BF6303526C74FB360B7027D54FFCEDAF13BF8EA7CB1A81691C0A4F
B25E1EA64C0904433C6A5F35BBF9DD5C4CBFC1A5> |-
/r <1C60D8A8C9B7361F02EEC91E54B85D1C77E667FE2BCF3D09A421FBF63CB6
30EA2A0B7B19FFD8078B4DB5A7731C633809BCAB3FF296D65B89F29DE6B6DB35
AA635F12FEC0F1664A8FB613C79352FA72> |-
/u <1C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E93
9BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A253D
952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9BF3
E443E03AAD9292AF57449A5275904AD9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OLNYDG+Arial,Bold /Encoding get
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 114 /r put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/OLNYDG+Arial,Bold*1 
[32{/.notdef}rp /space 18{/.notdef}rp /three 15{/.notdef}rp /C /D /E 
/F 2{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O 
/P /.notdef /R /S /T 12{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i 2{/.notdef}rp 
/l 2{/.notdef}rp /o 2{/.notdef}rp /r 2{/.notdef}rp /u 138{/.notdef}rp]
OLNYDG+Arial,Bold nf
OLNYDG+Arial,Bold*1 [14.04 0 0 -14.04 0 0 ]msf
401.18 104.5 mo
(Surface de charge de la loi L3F)
[9.36478 8.52219 5.50378 4.6752 7.80624 7.80624 7.80624 3.5802 8.52216 7.80624 3.83292 7.80624 
8.50812 7.80624 5.50378 8.52216 7.80627 3.72058 8.52216 7.80627 3.72058 3.94525 7.80621 3.83295 
3.94519 8.52222 3.94525 3.59418 8.52222 7.80621 0 ]xsh
606.67 104.5 mo
( )sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize A4
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
