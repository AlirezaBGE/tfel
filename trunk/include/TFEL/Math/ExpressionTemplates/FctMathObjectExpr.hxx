/*!
 * \file   FctMathObjectExpr.hxx
 * \brief  This file implements the type generated by the application of standard mathematical functions on vectors
 * \author Helfer Thomas
 * \date   01 jui 2006
 */

#ifndef _LIB_TFEL_FCT_MATHOBJECT_EXPR_HXX_
#define _LIB_TFEL_FCT_MATHOBJECT_EXPR_HXX_

#include<string>
#include<cstddef>

#include"TFEL/Config/TFELConfig.hxx"

#include"TFEL/Metaprogramming/Implements.hxx"
#include"TFEL/TypeTraits/IsTemporary.hxx"

#include"TFEL/Math/General/FctObjectRandomAccessConstIterator.hxx"
#include"TFEL/Math/Function/FunctionConcept.hxx"

namespace tfel{

  namespace math {

    /*!
     * brief  Defines the FctMathObjectExpr.
     * param  A, a vector type
     * author Helfer Thomas
     * date   01 jui 2006
     */
    template<template<typename> class MathObjectConcept,
	     template<typename> class MathObjectTraits,
	     typename A,typename Func>
    class FctMathObjectExpr
    {

      TFEL_STATIC_ASSERT((tfel::meta::Implements<A,MathObjectConcept>::cond));
      TFEL_STATIC_ASSERT((tfel::meta::Implements<Func,FunctionConcept>::cond));

      typedef typename MathObjectTraits<A>::NumType   NumTypeA;
      static const bool IsATemporary = tfel::typetraits::IsTemporary<A>::cond;

      typename tfel::meta::IF<IsATemporary,const A,const A&>::type a;
      const Func f;
      const typename A::RunTimeProperties RTP;

      FctMathObjectExpr();

    public:

      typedef typename ComputeUnaryResult<NumTypeA,Func>::Handle NumType;
      typedef typename MathObjectTraits<A>::IndexType IndexType;

    protected:

      typedef const A    first_arg;
      typedef const Func second_arg;

      typedef NumType        value_type;
      typedef NumType*       pointer;
      typedef const NumType* const_pointer;
      typedef NumType&       reference;
      typedef const NumType& const_reference;
      typedef IndexType      size_type;
      typedef ptrdiff_t      difference_type;

      TFEL_MATH_INLINE FctMathObjectExpr(const A& l,const Func& r)
	: a(l),	f(r),RTP(a.getRunTimeProperties())
      {}

      TFEL_MATH_INLINE FctMathObjectExpr(const FctMathObjectExpr& src)
	: a(src.a),f(src.f),RTP(src.RTP)
      {}

      TFEL_MATH_INLINE NumType
      operator()(const IndexType i) const
      {
	return f(a(i));
      }

      TFEL_MATH_INLINE NumType                                                    
      operator()(const IndexType i,const IndexType j) const
      {                                                                                 
	return f(a(i,j));
      }										        

      TFEL_MATH_INLINE NumType                                                    
      operator()(const IndexType i,const IndexType j,const IndexType k) const
      {                                                                                 
	return f(a(i,j,k));
      }										        

    public:

      typedef typename A::RunTimeProperties RunTimeProperties;
      typedef FctObjectRandomAccessConstIterator<A,Func> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

      TFEL_MATH_INLINE RunTimeProperties
      getRunTimeProperties(void) const
      {
	return RTP;
      }

      TFEL_MATH_INLINE const_iterator begin(void) const
      {
	return const_iterator(a.begin(),f);
      }

      TFEL_MATH_INLINE const_iterator end(void) const
      {
	return const_iterator(a.end(),f);
      }

      TFEL_MATH_INLINE const_reverse_iterator rbegin(void) const
      {
	return const_reverse_iterator(end(),f);
      }

      TFEL_MATH_INLINE const_reverse_iterator rend(void) const
      {
	return const_reverse_iterator(begin(),f);
      }

    };

  } // end of namespace math

} // end of namespace tfel

#endif /* _LIB_TFEL_FCT_MATHOBJECT_EXPR_HXX */

