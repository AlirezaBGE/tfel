/*!
 * \file   FctMatrixExprWithoutConstIterator.hxx
 * \brief  This file implements the type generated by the application of standard mathematical functions on matrices.
 * \author Helfer Thomas
 * \date   01 jui 2006
 */

#ifndef _LIB_TFEL_FCT_MATRIX_EXPRWITHOUTCONSTITERATOR_HXX_
#define _LIB_TFEL_FCT_MATRIX_EXPRWITHOUTCONSTITERATOR_HXX_ 

#include <cmath>
#include <string>

#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Metaprogramming/IsSuperClassOf.hxx"
#include"TFEL/TypeTraits/IsTemporary.hxx"
#include"TFEL/Utilities/Name.hxx"
#include"TFEL/Math/Matrix/MatrixConcept.hxx"


namespace tfel{

  namespace math {

    /*!											
     * brief  Defines the FctMatrixExprWithoutConstIterator.
     * param  A, a vector type								
     * author Helfer Thomas								
     * date   01 jui 2006								
     */											
    template<typename A,typename Func>
    class FctMatrixExprWithoutConstIterator    
    {
      										        
      TFEL_STATIC_ASSERT((tfel::meta::Implements<A,MatrixConcept>::cond));
      TFEL_STATIC_ASSERT((tfel::meta::Implements<Func,FunctionConcept>::cond));
										        
      typedef typename MatrixTraits<A>::NumType   NumTypeA;                             
      typedef typename MatrixTraits<A>::IndexType IndexType;			        
      static const bool IsATemporary = tfel::typetraits::IsTemporary<A>::cond;          
      										        
      typename tfel::meta::IF<IsATemporary,const A,const A&>::type a;                   
      const Func f;
      const typename A::RunTimeProperties RTP;                                          
            									        
      FctMatrixExprWithoutConstIterator();

    public:									        
      										        
      typedef typename ComputeUnaryResult<NumTypeA,Func>::Handle NumType;             
      										        
      static const std::string 
      getName(void){ 
	using namespace std;
	using namespace tfel::utilities;
	return string("FctMatrixExprWithoutConstIterator<")
	  +Name<A>::getName()
	  +Name<Func>::getName()
	  +string(">");        
      }
       								        
    protected:									        
										        
      typedef A    first_arg;
      typedef Func second_arg;

      typedef NumType        value_type;                                                
      typedef NumType*       pointer;	    						
      typedef const NumType* const_pointer; 						
      typedef NumType&       reference;	    						
      typedef const NumType& const_reference;						
      typedef IndexType      size_type;	    						
      typedef ptrdiff_t      difference_type;						
										        
      TFEL_MATH_INLINE 
      FctMatrixExprWithoutConstIterator(const A& l,const Func& r)
	: a(l),	f(r),RTP(a.getRunTimeProperties())					        
      {}         							                
										        
      TFEL_MATH_INLINE 
      FctMatrixExprWithoutConstIterator(const FctMatrixExprWithoutConstIterator& src)
	: a(src.a),f(src.f),RTP(src.RTP)						        
      {}									        
      										        
      TFEL_MATH_INLINE const NumType                                                    
      operator()(const IndexType i,const IndexType j) const
      {                                                                                 
	return f(a(i,j)); 						                
      }										        
                                                                                        
    public:                                                                             
                                                                                        
      typedef typename A::RunTimeProperties RunTimeProperties;                          
										        
      TFEL_MATH_INLINE const RunTimeProperties                                          
      getRunTimeProperties(void) const                                                  
      {                                                                                 
	return RTP;                                                                     
      }                                                                                 

    }; 

  } // end of namespace math

} // end of namespace tfel

#endif /* _LIB_TFEL_FCT_MATRIX_EXPRWITHOUTCONSTITERATOR_HXX */

